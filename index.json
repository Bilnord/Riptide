{
  "api/index.html": {
    "href": "api/index.html",
    "title": "API Docs | Riptide Docs",
    "keywords": "API Docs Welcome to Riptide's API reference documentation."
  },
  "api/Riptide.Client.html": {
    "href": "api/Riptide.Client.html",
    "title": "Client Class | Riptide Docs",
    "keywords": "Client Class Namespace : Riptide Assembly : RiptideNetworking.dll A client that can connect to a Server . <!--h5 id=\"Riptide_Client_syntax\">Syntax</h5--> public class Client : Peer Inheritance Object Peer Client Inherited Members Peer.LogName Peer.TimeoutTime Peer.HeartbeatInterval Peer.DCNeverConnected Peer.DCTransportError Peer.DCTimedOut Peer.DCKicked Peer.DCServerStopped Peer.DCDisconnected Peer.UnknownReason Peer.CRNoConnection Peer.CRServerFull Peer.CRRejected Peer.CRCustom Peer.FindMessageHandlers() Peer.StartTime() Peer.StopTime() Peer.HandleMessages() Peer.HandleData(Object, DataReceivedEventArgs) Peer.IncreaseActiveCount() Peer.DecreaseActiveCount() Constructors | Improve this Doc View Source Client(IClient, String) <!--h5 class=\"decalaration\">Declaration</h5--> public Client(IClient transport, string logName = \"CLIENT\") Parameters Type Name Description IClient transport String logName | Improve this Doc View Source Client(String) Initializes the peer. <!--h5 class=\"decalaration\">Declaration</h5--> public Client(string logName = \"CLIENT\") Parameters Type Name Description String logName The name to use when logging messages via RiptideLogger . Properties | Improve this Doc View Source Connection <!--h5 class=\"decalaration\">Declaration</h5--> public Connection Connection { get; } Property Value Type Description Connection | Improve this Doc View Source Id The client's numeric ID. <!--h5 class=\"decalaration\">Declaration</h5--> public ushort Id { get; } Property Value Type Description UInt16 | Improve this Doc View Source IsConnected Whether or not the client is currently connected. <!--h5 class=\"decalaration\">Declaration</h5--> public bool IsConnected { get; } Property Value Type Description Boolean | Improve this Doc View Source IsConnecting Whether or not the client is currently in the process of connecting. <!--h5 class=\"decalaration\">Declaration</h5--> public bool IsConnecting { get; } Property Value Type Description Boolean | Improve this Doc View Source IsNotConnected Whether or not the client is currently not connected nor trying to connect. <!--h5 class=\"decalaration\">Declaration</h5--> public bool IsNotConnected { get; } Property Value Type Description Boolean | Improve this Doc View Source IsPending Whether or not the client's connection is currently pending (will only be true when a server doesn't immediately accept the connection request). <!--h5 class=\"decalaration\">Declaration</h5--> public bool IsPending { get; } Property Value Type Description Boolean | Improve this Doc View Source RTT The round trip time (ping) of the connection, in milliseconds. -1 if not calculated yet. <!--h5 class=\"decalaration\">Declaration</h5--> public short RTT { get; } Property Value Type Description Int16 | Improve this Doc View Source SmoothRTT <!--h5 class=\"decalaration\">Declaration</h5--> public short SmoothRTT { get; } Property Value Type Description Int16 Remarks This value is slower to accurately represent lasting changes in latency than RTT , but it is less susceptible to changing drastically due to significant—but temporary—jumps in latency. Methods | Improve this Doc View Source ChangeTransport(IClient) Disconnects the client if it's connected and swaps out the transport it's using. <!--h5 class=\"decalaration\">Declaration</h5--> public void ChangeTransport(IClient newTransport) Parameters Type Name Description IClient newTransport The new transport to use for sending and receiving data. Remarks This method does not automatically reconnect to the server. To continue communicating with the server, Connect(String, Int32, Byte, Message) must be called again. | Improve this Doc View Source Connect(String, Int32, Byte, Message) Attempts to connect to a server at the given host address. <!--h5 class=\"decalaration\">Declaration</h5--> public bool Connect(string hostAddress, int maxConnectionAttempts = 5, byte messageHandlerGroupId = null, Message message = null) Parameters Type Name Description String hostAddress The host address to connect to. Int32 maxConnectionAttempts How many connection attempts to make before giving up. Byte messageHandlerGroupId The ID of the group of message handler methods to use when building Riptide.Client.messageHandlers . Message message Data that should be sent to the server with the connection attempt. Use Create() to get an empty message instance. Returns Type Description Boolean true if a connection attempt will be made. false if an issue occurred (such as hostAddress being in an invalid format) and a connection attempt will not be made. Remarks Riptide's default transport expects the host address to consist of an IP and port, separated by a colon. For example: 127.0.0.1:7777 . If you are using a different transport, check the relevant documentation for what information it requires in the host address. | Improve this Doc View Source CreateMessageHandlersDictionary(Byte) Builds a dictionary of message IDs and their corresponding message handler methods. <!--h5 class=\"decalaration\">Declaration</h5--> protected override void CreateMessageHandlersDictionary(byte messageHandlerGroupId) Parameters Type Name Description Byte messageHandlerGroupId The ID of the group of message handler methods to include in the dictionary. Overrides Peer.CreateMessageHandlersDictionary(Byte) | Improve this Doc View Source Disconnect() Disconnects from the server. <!--h5 class=\"decalaration\">Declaration</h5--> public void Disconnect() | Improve this Doc View Source Handle(Message, MessageHeader, Connection) Handles a message. <!--h5 class=\"decalaration\">Declaration</h5--> protected override void Handle(Message message, MessageHeader header, Connection connection) Parameters Type Name Description Message message The message to handle. MessageHeader header The message's header type. Connection connection The connection which the message was received on. Overrides Peer.Handle(Message, MessageHeader, Connection) | Improve this Doc View Source OnClientConnected(UInt16) Invokes the ClientConnected event. <!--h5 class=\"decalaration\">Declaration</h5--> protected virtual void OnClientConnected(ushort clientId) Parameters Type Name Description UInt16 clientId The numeric ID of the client that connected. | Improve this Doc View Source OnClientDisconnected(UInt16) Invokes the ClientDisconnected event. <!--h5 class=\"decalaration\">Declaration</h5--> protected virtual void OnClientDisconnected(ushort clientId) Parameters Type Name Description UInt16 clientId The numeric ID of the client that disconnected. | Improve this Doc View Source OnConnected() Invokes the Connected event. <!--h5 class=\"decalaration\">Declaration</h5--> protected virtual void OnConnected() | Improve this Doc View Source OnConnectionFailed(RejectReason, Message) Invokes the ConnectionFailed event. <!--h5 class=\"decalaration\">Declaration</h5--> protected virtual void OnConnectionFailed(RejectReason reason, Message message = null) Parameters Type Name Description RejectReason reason The reason for the connection failure. Message message Additional data related to the failed connection attempt. | Improve this Doc View Source OnDisconnected(DisconnectReason, Message) Invokes the Disconnected event. <!--h5 class=\"decalaration\">Declaration</h5--> protected virtual void OnDisconnected(DisconnectReason reason, Message message) Parameters Type Name Description DisconnectReason reason The reason for the disconnection. Message message Additional data related to the disconnection. | Improve this Doc View Source OnMessageReceived(Message) Invokes the MessageReceived event and initiates handling of the received message. <!--h5 class=\"decalaration\">Declaration</h5--> protected virtual void OnMessageReceived(Message message) Parameters Type Name Description Message message The received message. | Improve this Doc View Source Send(Message, Boolean) Sends a message to the server. <!--h5 class=\"decalaration\">Declaration</h5--> public void Send(Message message, bool shouldRelease = true) Parameters Type Name Description Message message The message to send. Boolean shouldRelease Whether or not to return the message to the pool after it is sent. Remarks | Improve this Doc View Source Update() Handles any received messages and invokes any delayed events which need to be invoked. <!--h5 class=\"decalaration\">Declaration</h5--> public override void Update() Overrides Peer.Update() Events | Improve this Doc View Source ClientConnected Invoked when another non-local client connects. <!--h5 class=\"decalaration\">Declaration</h5--> public event EventHandler<ClientConnectedEventArgs> ClientConnected Event Type Type Description EventHandler < ClientConnectedEventArgs > | Improve this Doc View Source ClientDisconnected Invoked when another non-local client disconnects. <!--h5 class=\"decalaration\">Declaration</h5--> public event EventHandler<ClientDisconnectedEventArgs> ClientDisconnected Event Type Type Description EventHandler < ClientDisconnectedEventArgs > | Improve this Doc View Source Connected Invoked when a connection to the server is established. <!--h5 class=\"decalaration\">Declaration</h5--> public event EventHandler Connected Event Type Type Description EventHandler | Improve this Doc View Source ConnectionFailed Invoked when a connection to the server fails to be established. <!--h5 class=\"decalaration\">Declaration</h5--> public event EventHandler<ConnectionFailedEventArgs> ConnectionFailed Event Type Type Description EventHandler < ConnectionFailedEventArgs > | Improve this Doc View Source Disconnected Invoked when disconnected from the server. <!--h5 class=\"decalaration\">Declaration</h5--> public event EventHandler<DisconnectedEventArgs> Disconnected Event Type Type Description EventHandler < DisconnectedEventArgs > | Improve this Doc View Source MessageReceived Invoked when a message is received. <!--h5 class=\"decalaration\">Declaration</h5--> public event EventHandler<MessageReceivedEventArgs> MessageReceived Event Type Type Description EventHandler < MessageReceivedEventArgs >"
  },
  "api/Riptide.Client.MessageHandler.html": {
    "href": "api/Riptide.Client.MessageHandler.html",
    "title": "Client.MessageHandler Delegate | Riptide Docs",
    "keywords": "Client.MessageHandler Delegate Namespace : Riptide Assembly : RiptideNetworking.dll Encapsulates a method that handles a message from a server. <!--h5 id=\"Riptide_Client_MessageHandler_syntax\">Syntax</h5--> public delegate void MessageHandler(Message message); Parameters Type Name Description Message message The message that was received."
  },
  "api/Riptide.ClientConnectedEventArgs.html": {
    "href": "api/Riptide.ClientConnectedEventArgs.html",
    "title": "ClientConnectedEventArgs Class | Riptide Docs",
    "keywords": "ClientConnectedEventArgs Class Namespace : Riptide Assembly : RiptideNetworking.dll Contains event data for when a non-local client connects to the server. <!--h5 id=\"Riptide_ClientConnectedEventArgs_syntax\">Syntax</h5--> public class ClientConnectedEventArgs : EventArgs Inheritance Object ClientConnectedEventArgs Constructors | Improve this Doc View Source ClientConnectedEventArgs(UInt16) Initializes event data. <!--h5 class=\"decalaration\">Declaration</h5--> public ClientConnectedEventArgs(ushort id) Parameters Type Name Description UInt16 id The numeric ID of the client that connected. Fields | Improve this Doc View Source Id The numeric ID of the client that connected. <!--h5 class=\"decalaration\">Declaration</h5--> public readonly ushort Id Field Value Type Description UInt16"
  },
  "api/Riptide.ClientDisconnectedEventArgs.html": {
    "href": "api/Riptide.ClientDisconnectedEventArgs.html",
    "title": "ClientDisconnectedEventArgs Class | Riptide Docs",
    "keywords": "ClientDisconnectedEventArgs Class Namespace : Riptide Assembly : RiptideNetworking.dll Contains event data for when a non-local client disconnects from the server. <!--h5 id=\"Riptide_ClientDisconnectedEventArgs_syntax\">Syntax</h5--> public class ClientDisconnectedEventArgs : EventArgs Inheritance Object ClientDisconnectedEventArgs Constructors | Improve this Doc View Source ClientDisconnectedEventArgs(UInt16) Initializes event data. <!--h5 class=\"decalaration\">Declaration</h5--> public ClientDisconnectedEventArgs(ushort id) Parameters Type Name Description UInt16 id The numeric ID of the client that disconnected. Fields | Improve this Doc View Source Id The numeric ID of the client that disconnected. <!--h5 class=\"decalaration\">Declaration</h5--> public readonly ushort Id Field Value Type Description UInt16"
  },
  "api/Riptide.Connection.html": {
    "href": "api/Riptide.Connection.html",
    "title": "Connection Class | Riptide Docs",
    "keywords": "Connection Class Namespace : Riptide Assembly : RiptideNetworking.dll Represents a connection to a Server or Client . <!--h5 id=\"Riptide_Connection_syntax\">Syntax</h5--> public abstract class Connection : object Inheritance Object Connection TcpConnection UdpConnection Constructors | Improve this Doc View Source Connection() Initializes the connection. <!--h5 class=\"decalaration\">Declaration</h5--> protected Connection() Properties | Improve this Doc View Source CanTimeout Whether or not the connection can time out. <!--h5 class=\"decalaration\">Declaration</h5--> public bool CanTimeout { get; set; } Property Value Type Description Boolean | Improve this Doc View Source Id The connection's numeric ID. <!--h5 class=\"decalaration\">Declaration</h5--> public ushort Id { get; } Property Value Type Description UInt16 | Improve this Doc View Source IsConnected Whether or not the connection is currently connected. <!--h5 class=\"decalaration\">Declaration</h5--> public bool IsConnected { get; } Property Value Type Description Boolean | Improve this Doc View Source IsConnecting Whether or not the connection is currently in the process of connecting. <!--h5 class=\"decalaration\">Declaration</h5--> public bool IsConnecting { get; } Property Value Type Description Boolean | Improve this Doc View Source IsNotConnected Whether or not the connection is currently not connected nor trying to connect. <!--h5 class=\"decalaration\">Declaration</h5--> public bool IsNotConnected { get; } Property Value Type Description Boolean | Improve this Doc View Source IsPending Whether or not the connection is currently pending (will only be true when a server doesn't immediately accept the connection request). <!--h5 class=\"decalaration\">Declaration</h5--> public bool IsPending { get; } Property Value Type Description Boolean | Improve this Doc View Source RTT The round trip time (ping) of the connection, in milliseconds. -1 if not calculated yet. <!--h5 class=\"decalaration\">Declaration</h5--> public short RTT { get; } Property Value Type Description Int16 | Improve this Doc View Source SmoothRTT The smoothed round trip time (ping) of the connection, in milliseconds. -1 if not calculated yet. <!--h5 class=\"decalaration\">Declaration</h5--> public short SmoothRTT { get; } Property Value Type Description Int16 Remarks This value is slower to accurately represent lasting changes in latency than RTT , but it is less susceptible to changing drastically due to significant—but temporary—jumps in latency. Methods | Improve this Doc View Source ResetTimeout() Resets the connection's timeout time. <!--h5 class=\"decalaration\">Declaration</h5--> public void ResetTimeout() | Improve this Doc View Source Send(Byte[], Int32) Sends data. <!--h5 class=\"decalaration\">Declaration</h5--> protected abstract void Send(byte[] dataBuffer, int amount) Parameters Type Name Description Byte [] dataBuffer The array containing the data. Int32 amount The number of bytes in the array which should be sent."
  },
  "api/Riptide.ConnectionFailedEventArgs.html": {
    "href": "api/Riptide.ConnectionFailedEventArgs.html",
    "title": "ConnectionFailedEventArgs Class | Riptide Docs",
    "keywords": "ConnectionFailedEventArgs Class Namespace : Riptide Assembly : RiptideNetworking.dll Contains event data for when a connection attempt to a server fails. <!--h5 id=\"Riptide_ConnectionFailedEventArgs_syntax\">Syntax</h5--> public class ConnectionFailedEventArgs : EventArgs Inheritance Object ConnectionFailedEventArgs Constructors | Improve this Doc View Source ConnectionFailedEventArgs(Message) Initializes event data. <!--h5 class=\"decalaration\">Declaration</h5--> public ConnectionFailedEventArgs(Message message) Parameters Type Name Description Message message Additional data related to the failed connection attempt (if any). Fields | Improve this Doc View Source Message Additional data related to the failed connection attempt (if any). <!--h5 class=\"decalaration\">Declaration</h5--> public readonly Message Message Field Value Type Description Message"
  },
  "api/Riptide.ConnectionState.html": {
    "href": "api/Riptide.ConnectionState.html",
    "title": "ConnectionState Enum | Riptide Docs",
    "keywords": "ConnectionState Enum Namespace : Riptide Assembly : RiptideNetworking.dll The state of a connection. <!--h5 id=\"Riptide_ConnectionState_syntax\">Syntax</h5--> public enum ConnectionState : byte Fields Name Description Connected Connected. A connection has been established successfully. Connecting Connecting. Still trying to establish a connection. NotConnected Not connected. No connection has been established or the connection has been closed. Pending Connection is pending. The server is still determining whether or not the connection should be allowed."
  },
  "api/Riptide.DisconnectedEventArgs.html": {
    "href": "api/Riptide.DisconnectedEventArgs.html",
    "title": "DisconnectedEventArgs Class | Riptide Docs",
    "keywords": "DisconnectedEventArgs Class Namespace : Riptide Assembly : RiptideNetworking.dll Contains event data for when the client disconnects from a server. <!--h5 id=\"Riptide_DisconnectedEventArgs_syntax\">Syntax</h5--> public class DisconnectedEventArgs : EventArgs Inheritance Object DisconnectedEventArgs Constructors | Improve this Doc View Source DisconnectedEventArgs(DisconnectReason, Message) Initializes event data. <!--h5 class=\"decalaration\">Declaration</h5--> public DisconnectedEventArgs(DisconnectReason reason, Message message) Parameters Type Name Description DisconnectReason reason The reason for the disconnection. Message message Additional data related to the disconnection (if any). Fields | Improve this Doc View Source Message Additional data related to the disconnection (if any). <!--h5 class=\"decalaration\">Declaration</h5--> public readonly Message Message Field Value Type Description Message | Improve this Doc View Source Reason The reason for the disconnection. <!--h5 class=\"decalaration\">Declaration</h5--> public readonly DisconnectReason Reason Field Value Type Description DisconnectReason"
  },
  "api/Riptide.DisconnectReason.html": {
    "href": "api/Riptide.DisconnectReason.html",
    "title": "DisconnectReason Enum | Riptide Docs",
    "keywords": "DisconnectReason Enum Namespace : Riptide Assembly : RiptideNetworking.dll The reason for a disconnection. <!--h5 id=\"Riptide_DisconnectReason_syntax\">Syntax</h5--> public enum DisconnectReason : byte Fields Name Description ConnectionRejected The connection attempt was rejected by the server. Disconnected The disconnection was initiated by the client. Kicked The client was forcibly disconnected by the server. NeverConnected No connection was ever established. ServerStopped The server shut down. TimedOut The connection timed out. TransportError The active transport detected a problem with the connection."
  },
  "api/Riptide.DuplicateHandlerException.html": {
    "href": "api/Riptide.DuplicateHandlerException.html",
    "title": "DuplicateHandlerException Class | Riptide Docs",
    "keywords": "DuplicateHandlerException Class Namespace : Riptide Assembly : RiptideNetworking.dll The exception that is thrown when multiple methods with MessageHandlerAttribute s are set to handle messages with the same ID and have the same method signature. <!--h5 id=\"Riptide_DuplicateHandlerException_syntax\">Syntax</h5--> public class DuplicateHandlerException : Exception Inheritance Object DuplicateHandlerException Constructors | Improve this Doc View Source DuplicateHandlerException() Initializes a new DuplicateHandlerException instance with a specified error message. <!--h5 class=\"decalaration\">Declaration</h5--> public DuplicateHandlerException() | Improve this Doc View Source DuplicateHandlerException(String) Initializes a new DuplicateHandlerException instance with a specified error message. <!--h5 class=\"decalaration\">Declaration</h5--> public DuplicateHandlerException(string message) Parameters Type Name Description String message The error message that explains the reason for the exception. | Improve this Doc View Source DuplicateHandlerException(String, Exception) Initializes a new DuplicateHandlerException instance with a specified error message and a reference to the inner exception that is the cause of this exception. <!--h5 class=\"decalaration\">Declaration</h5--> public DuplicateHandlerException(string message, Exception inner) Parameters Type Name Description String message The error message that explains the reason for the exception. Exception inner The exception that is the cause of the current exception. If inner is not a null reference, the current exception is raised in a catch block that handles the inner exception. | Improve this Doc View Source DuplicateHandlerException(UInt16, MethodInfo, MethodInfo) Initializes a new DuplicateHandlerException instance and constructs an error message from the given information. <!--h5 class=\"decalaration\">Declaration</h5--> public DuplicateHandlerException(ushort id, MethodInfo method1, MethodInfo method2) Parameters Type Name Description UInt16 id The message ID with multiple handler methods. MethodInfo method1 The first handler method's info. MethodInfo method2 The second handler method's info. Fields | Improve this Doc View Source DeclaringType1 The type containing the first handler method. <!--h5 class=\"decalaration\">Declaration</h5--> public readonly Type DeclaringType1 Field Value Type Description Type | Improve this Doc View Source DeclaringType2 The type containing the second handler method. <!--h5 class=\"decalaration\">Declaration</h5--> public readonly Type DeclaringType2 Field Value Type Description Type | Improve this Doc View Source HandlerMethodName1 The name of the first handler method. <!--h5 class=\"decalaration\">Declaration</h5--> public readonly string HandlerMethodName1 Field Value Type Description String | Improve this Doc View Source HandlerMethodName2 The name of the second handler method. <!--h5 class=\"decalaration\">Declaration</h5--> public readonly string HandlerMethodName2 Field Value Type Description String | Improve this Doc View Source Id The message ID with multiple handler methods. <!--h5 class=\"decalaration\">Declaration</h5--> public readonly ushort Id Field Value Type Description UInt16"
  },
  "api/Riptide.Experimental.TcpTransport.html": {
    "href": "api/Riptide.Experimental.TcpTransport.html",
    "title": "Riptide.Experimental.TcpTransport Namespace | Riptide Docs",
    "keywords": "Riptide.Experimental.TcpTransport Namespace Classes TcpClient A client which can connect to a TcpServer . TcpConnection Represents a connection to a TcpServer or TcpClient . TcpPeer Provides base send & receive functionality for TcpServer and TcpClient . TcpServer A server which can accept connections from TcpClient s."
  },
  "api/Riptide.Experimental.TcpTransport.TcpClient.html": {
    "href": "api/Riptide.Experimental.TcpTransport.TcpClient.html",
    "title": "TcpClient Class | Riptide Docs",
    "keywords": "TcpClient Class Namespace : Riptide.Experimental.TcpTransport Assembly : RiptideNetworking.dll A client which can connect to a TcpServer . <!--h5 id=\"Riptide_Experimental_TcpTransport_TcpClient_syntax\">Syntax</h5--> public class TcpClient : TcpPeer, IClient, IPeer Inheritance Object TcpPeer TcpClient Implements IClient IPeer Inherited Members TcpPeer.Disconnected TcpPeer.DefaultSocketBufferSize TcpPeer.socketBufferSize TcpPeer.socket TcpPeer.OnDisconnected(Connection, DisconnectReason) Methods | Improve this Doc View Source Connect(String, out Connection, out String) Starts the transport and attempts to connect to the given host address. <!--h5 class=\"decalaration\">Declaration</h5--> public bool Connect(string hostAddress, out Connection connection, out string connectError) Parameters Type Name Description String hostAddress The host address to connect to. Connection connection The pending connection. null if an issue occurred. String connectError The error message associated with the issue that occurred, if any. Returns Type Description Boolean true if a connection attempt will be made. false if an issue occurred (such as hostAddress being in an invalid format) and a connection attempt will not be made. Remarks Expects the host address to consist of an IP and port, separated by a colon. For example: 127.0.0.1:7777 . | Improve this Doc View Source Disconnect() Closes the connection to the server. <!--h5 class=\"decalaration\">Declaration</h5--> public void Disconnect() | Improve this Doc View Source OnConnected() Invokes the Connected event. <!--h5 class=\"decalaration\">Declaration</h5--> protected virtual void OnConnected() | Improve this Doc View Source OnConnectionFailed() Invokes the ConnectionFailed event. <!--h5 class=\"decalaration\">Declaration</h5--> protected virtual void OnConnectionFailed() | Improve this Doc View Source OnDataReceived(Int32, TcpConnection) Handles received data. <!--h5 class=\"decalaration\">Declaration</h5--> protected override void OnDataReceived(int amount, TcpConnection fromConnection) Parameters Type Name Description Int32 amount The number of bytes that were received. TcpConnection fromConnection The connection from which the data was received. Overrides TcpPeer.OnDataReceived(Int32, TcpConnection) | Improve this Doc View Source Poll() Initiates handling of any received messages. <!--h5 class=\"decalaration\">Declaration</h5--> public void Poll() Events | Improve this Doc View Source Connected Invoked when a connection is established at the transport level. <!--h5 class=\"decalaration\">Declaration</h5--> public event EventHandler Connected Event Type Type Description EventHandler | Improve this Doc View Source ConnectionFailed Invoked when a connection attempt fails at the transport level. <!--h5 class=\"decalaration\">Declaration</h5--> public event EventHandler ConnectionFailed Event Type Type Description EventHandler | Improve this Doc View Source DataReceived Invoked when data is received by the transport. <!--h5 class=\"decalaration\">Declaration</h5--> public event EventHandler<DataReceivedEventArgs> DataReceived Event Type Type Description EventHandler < DataReceivedEventArgs >"
  },
  "api/Riptide.Experimental.TcpTransport.TcpConnection.html": {
    "href": "api/Riptide.Experimental.TcpTransport.TcpConnection.html",
    "title": "TcpConnection Class | Riptide Docs",
    "keywords": "TcpConnection Class Namespace : Riptide.Experimental.TcpTransport Assembly : RiptideNetworking.dll Represents a connection to a TcpServer or TcpClient . <!--h5 id=\"Riptide_Experimental_TcpTransport_TcpConnection_syntax\">Syntax</h5--> public class TcpConnection : Connection Inheritance Object Connection TcpConnection Implements IEquatable < TcpConnection > Inherited Members Connection.Id Connection.IsNotConnected Connection.IsConnecting Connection.IsPending Connection.IsConnected Connection.RTT Connection.SmoothRTT Connection.CanTimeout Connection.ResetTimeout() Fields | Improve this Doc View Source RemoteEndPoint The endpoint representing the other end of the connection. <!--h5 class=\"decalaration\">Declaration</h5--> public readonly IPEndPoint RemoteEndPoint Field Value Type Description IPEndPoint Methods | Improve this Doc View Source Equals(TcpConnection) <!--h5 class=\"decalaration\">Declaration</h5--> public bool Equals(TcpConnection other) Parameters Type Name Description TcpConnection other Returns Type Description Boolean | Improve this Doc View Source Equals(Object) <!--h5 class=\"decalaration\">Declaration</h5--> public override bool Equals(object obj) Parameters Type Name Description Object obj Returns Type Description Boolean | Improve this Doc View Source GetHashCode() <!--h5 class=\"decalaration\">Declaration</h5--> public override int GetHashCode() Returns Type Description Int32 | Improve this Doc View Source Send(Byte[], Int32) Sends data. <!--h5 class=\"decalaration\">Declaration</h5--> protected override void Send(byte[] dataBuffer, int amount) Parameters Type Name Description Byte [] dataBuffer The array containing the data. Int32 amount The number of bytes in the array which should be sent. Overrides Connection.Send(Byte[], Int32) | Improve this Doc View Source ToString() <!--h5 class=\"decalaration\">Declaration</h5--> public override string ToString() Returns Type Description String Operators | Improve this Doc View Source Equality(TcpConnection, TcpConnection) <!--h5 class=\"decalaration\">Declaration</h5--> public static bool operator ==(TcpConnection left, TcpConnection right) Parameters Type Name Description TcpConnection left TcpConnection right Returns Type Description Boolean | Improve this Doc View Source Inequality(TcpConnection, TcpConnection) <!--h5 class=\"decalaration\">Declaration</h5--> public static bool operator !=(TcpConnection left, TcpConnection right) Parameters Type Name Description TcpConnection left TcpConnection right Returns Type Description Boolean"
  },
  "api/Riptide.Experimental.TcpTransport.TcpPeer.html": {
    "href": "api/Riptide.Experimental.TcpTransport.TcpPeer.html",
    "title": "TcpPeer Class | Riptide Docs",
    "keywords": "TcpPeer Class Namespace : Riptide.Experimental.TcpTransport Assembly : RiptideNetworking.dll Provides base send & receive functionality for TcpServer and TcpClient . <!--h5 id=\"Riptide_Experimental_TcpTransport_TcpPeer_syntax\">Syntax</h5--> public abstract class TcpPeer : object Inheritance Object TcpPeer TcpClient TcpServer Constructors | Improve this Doc View Source TcpPeer(Int32) Initializes the transport. <!--h5 class=\"decalaration\">Declaration</h5--> protected TcpPeer(int socketBufferSize = null) Parameters Type Name Description Int32 socketBufferSize How big the socket's send and receive buffers should be. Fields | Improve this Doc View Source DefaultSocketBufferSize The default size used for the socket's send and receive buffers. <!--h5 class=\"decalaration\">Declaration</h5--> protected const int DefaultSocketBufferSize = null Field Value Type Description Int32 | Improve this Doc View Source socket The main socket, either used for listening for connections or for sending and receiving data. <!--h5 class=\"decalaration\">Declaration</h5--> protected Socket socket Field Value Type Description Socket | Improve this Doc View Source socketBufferSize The size to use for the socket's send and receive buffers. <!--h5 class=\"decalaration\">Declaration</h5--> protected readonly int socketBufferSize Field Value Type Description Int32 Methods | Improve this Doc View Source OnDataReceived(Int32, TcpConnection) Handles received data. <!--h5 class=\"decalaration\">Declaration</h5--> protected abstract void OnDataReceived(int amount, TcpConnection fromConnection) Parameters Type Name Description Int32 amount The number of bytes that were received. TcpConnection fromConnection The connection from which the data was received. | Improve this Doc View Source OnDisconnected(Connection, DisconnectReason) Invokes the Disconnected event. <!--h5 class=\"decalaration\">Declaration</h5--> protected virtual void OnDisconnected(Connection connection, DisconnectReason reason) Parameters Type Name Description Connection connection The closed connection. DisconnectReason reason The reason for the disconnection. Events | Improve this Doc View Source Disconnected Invoked when a disconnection is initiated or detected by the transport. <!--h5 class=\"decalaration\">Declaration</h5--> public event EventHandler<DisconnectedEventArgs> Disconnected Event Type Type Description EventHandler < DisconnectedEventArgs >"
  },
  "api/Riptide.Experimental.TcpTransport.TcpServer.html": {
    "href": "api/Riptide.Experimental.TcpTransport.TcpServer.html",
    "title": "TcpServer Class | Riptide Docs",
    "keywords": "TcpServer Class Namespace : Riptide.Experimental.TcpTransport Assembly : RiptideNetworking.dll A server which can accept connections from TcpClient s. <!--h5 id=\"Riptide_Experimental_TcpTransport_TcpServer_syntax\">Syntax</h5--> public class TcpServer : TcpPeer, IServer, IPeer Inheritance Object TcpPeer TcpServer Implements IServer IPeer Inherited Members TcpPeer.Disconnected TcpPeer.DefaultSocketBufferSize TcpPeer.socketBufferSize TcpPeer.socket TcpPeer.OnDisconnected(Connection, DisconnectReason) Constructors | Improve this Doc View Source TcpServer(Int32) Initializes the transport. <!--h5 class=\"decalaration\">Declaration</h5--> public TcpServer(int socketBufferSize = null) Parameters Type Name Description Int32 socketBufferSize How big the socket's send and receive buffers should be. Properties | Improve this Doc View Source MaxPendingConnections The maximum number of pending connections to allow at any given time. <!--h5 class=\"decalaration\">Declaration</h5--> public int MaxPendingConnections { get; } Property Value Type Description Int32 | Improve this Doc View Source Port The local port that the server is running on. <!--h5 class=\"decalaration\">Declaration</h5--> public ushort Port { get; } Property Value Type Description UInt16 Methods | Improve this Doc View Source Close(Connection) Closes an active connection. <!--h5 class=\"decalaration\">Declaration</h5--> public void Close(Connection connection) Parameters Type Name Description Connection connection The connection to close. | Improve this Doc View Source OnConnected(Connection) Invokes the Connected event. <!--h5 class=\"decalaration\">Declaration</h5--> protected virtual void OnConnected(Connection connection) Parameters Type Name Description Connection connection The successfully established connection. | Improve this Doc View Source OnDataReceived(Int32, TcpConnection) Handles received data. <!--h5 class=\"decalaration\">Declaration</h5--> protected override void OnDataReceived(int amount, TcpConnection fromConnection) Parameters Type Name Description Int32 amount The number of bytes that were received. TcpConnection fromConnection The connection from which the data was received. Overrides TcpPeer.OnDataReceived(Int32, TcpConnection) | Improve this Doc View Source Poll() Initiates handling of any received messages. <!--h5 class=\"decalaration\">Declaration</h5--> public void Poll() | Improve this Doc View Source Shutdown() Closes all existing connections and stops listening for new connections. <!--h5 class=\"decalaration\">Declaration</h5--> public void Shutdown() | Improve this Doc View Source Start(UInt16) Starts the transport and begins listening for incoming connections. <!--h5 class=\"decalaration\">Declaration</h5--> public void Start(ushort port) Parameters Type Name Description UInt16 port The local port on which to listen for connections. Events | Improve this Doc View Source Connected Invoked when a connection is established at the transport level. <!--h5 class=\"decalaration\">Declaration</h5--> public event EventHandler<ConnectedEventArgs> Connected Event Type Type Description EventHandler < ConnectedEventArgs > | Improve this Doc View Source DataReceived Invoked when data is received by the transport. <!--h5 class=\"decalaration\">Declaration</h5--> public event EventHandler<DataReceivedEventArgs> DataReceived Event Type Type Description EventHandler < DataReceivedEventArgs >"
  },
  "api/Riptide.html": {
    "href": "api/Riptide.html",
    "title": "Riptide Namespace | Riptide Docs",
    "keywords": "Riptide Namespace Classes Client A client that can connect to a Server . ClientConnectedEventArgs Contains event data for when a non-local client connects to the server. ClientDisconnectedEventArgs Contains event data for when a non-local client disconnects from the server. Connection Represents a connection to a Server or Client . ConnectionFailedEventArgs Contains event data for when a connection attempt to a server fails. DisconnectedEventArgs Contains event data for when the client disconnects from a server. DuplicateHandlerException The exception that is thrown when multiple methods with MessageHandlerAttribute s are set to handle messages with the same ID and have the same method signature. InsufficientCapacityException The exception that is thrown when a Message does not contain enough unread bytes to add a certain value. InvalidHandlerSignatureException The exception that is thrown when a method with a MessageHandlerAttribute does not have an acceptable message handler method signature (either Server.MessageHandler or Client.MessageHandler ). Message Provides functionality for converting data to bytes and vice versa. MessageHandlerAttribute Specifies a method as the message handler for messages with the given ID. MessageReceivedEventArgs Contains event data for when a message is received. MessageRelayFilter Provides functionality for enabling/disabling automatic message relaying by message type. NonStaticHandlerException The exception that is thrown when a method with a MessageHandlerAttribute is not marked as static . Peer Provides base functionality for Server and Client . Server A server that can accept connections from Client s. ServerConnectedEventArgs Contains event data for when a client connects to the server. ServerDisconnectedEventArgs Contains event data for when a client disconnects from the server. Interfaces IMessageSerializable Represents a type that can be added to and retrieved from messages using the AddSerializable<T>(T) and GetSerializable<T>() methods. Enums ConnectionState The state of a connection. DisconnectReason The reason for a disconnection. MessageSendMode The send mode of a Message . RejectReason The reason the connection attempt was rejected. Delegates Client.MessageHandler Encapsulates a method that handles a message from a server. Server.ConnectionAttemptHandler Encapsulates a method that determines whether or not to accept a client's connection attempt. Server.MessageHandler Encapsulates a method that handles a message from a client."
  },
  "api/Riptide.IMessageSerializable.html": {
    "href": "api/Riptide.IMessageSerializable.html",
    "title": "IMessageSerializable Interface | Riptide Docs",
    "keywords": "IMessageSerializable Interface Namespace : Riptide Assembly : RiptideNetworking.dll Represents a type that can be added to and retrieved from messages using the AddSerializable<T>(T) and GetSerializable<T>() methods. <!--h5 id=\"Riptide_IMessageSerializable_syntax\">Syntax</h5--> public interface IMessageSerializable Methods | Improve this Doc View Source Deserialize(Message) Retrieves the type from the message. <!--h5 class=\"decalaration\">Declaration</h5--> void Deserialize(Message message) Parameters Type Name Description Message message The message to retrieve the type from. | Improve this Doc View Source Serialize(Message) Adds the type to the message. <!--h5 class=\"decalaration\">Declaration</h5--> void Serialize(Message message) Parameters Type Name Description Message message The message to add the type to."
  },
  "api/Riptide.InsufficientCapacityException.html": {
    "href": "api/Riptide.InsufficientCapacityException.html",
    "title": "InsufficientCapacityException Class | Riptide Docs",
    "keywords": "InsufficientCapacityException Class Namespace : Riptide Assembly : RiptideNetworking.dll The exception that is thrown when a Message does not contain enough unread bytes to add a certain value. <!--h5 id=\"Riptide_InsufficientCapacityException_syntax\">Syntax</h5--> public class InsufficientCapacityException : Exception Inheritance Object InsufficientCapacityException Constructors | Improve this Doc View Source InsufficientCapacityException() Initializes a new InsufficientCapacityException instance. <!--h5 class=\"decalaration\">Declaration</h5--> public InsufficientCapacityException() | Improve this Doc View Source InsufficientCapacityException(Message, Int32, String, Int32, Int32) Initializes a new InsufficientCapacityException instance and constructs an error message from the given information. <!--h5 class=\"decalaration\">Declaration</h5--> public InsufficientCapacityException(Message message, int arrayLength, string typeName, int requiredBytes, int totalRequiredBytes = null) Parameters Type Name Description Message message The message with insufficient remaining capacity. Int32 arrayLength The length of the array which could not be added to the message. String typeName The name of the array's type. Int32 requiredBytes The number of available bytes required for a single element of the array to be added successfully. Int32 totalRequiredBytes The number of available bytes required for the entire array to be added successfully. If left as -1, this will be set to arrayLength * requiredBytes . | Improve this Doc View Source InsufficientCapacityException(Message, String, Int32) Initializes a new InsufficientCapacityException instance and constructs an error message from the given information. <!--h5 class=\"decalaration\">Declaration</h5--> public InsufficientCapacityException(Message message, string typeName, int requiredBytes) Parameters Type Name Description Message message The message with insufficient remaining capacity. String typeName The name of the type which could not be added to the message. Int32 requiredBytes The number of available bytes required for the type to be added successfully. | Improve this Doc View Source InsufficientCapacityException(String) Initializes a new InsufficientCapacityException instance with a specified error message. <!--h5 class=\"decalaration\">Declaration</h5--> public InsufficientCapacityException(string message) Parameters Type Name Description String message The error message that explains the reason for the exception. | Improve this Doc View Source InsufficientCapacityException(String, Exception) Initializes a new InsufficientCapacityException instance with a specified error message and a reference to the inner exception that is the cause of this exception. <!--h5 class=\"decalaration\">Declaration</h5--> public InsufficientCapacityException(string message, Exception inner) Parameters Type Name Description String message The error message that explains the reason for the exception. Exception inner The exception that is the cause of the current exception. If inner is not a null reference, the current exception is raised in a catch block that handles the inner exception. Fields | Improve this Doc View Source RequiredBytes The number of available bytes the type requires in order to be added successfully. <!--h5 class=\"decalaration\">Declaration</h5--> public readonly int RequiredBytes Field Value Type Description Int32 | Improve this Doc View Source RiptideMessage The message with insufficient remaining capacity. <!--h5 class=\"decalaration\">Declaration</h5--> public readonly Message RiptideMessage Field Value Type Description Message | Improve this Doc View Source TypeName The name of the type which could not be added to the message. <!--h5 class=\"decalaration\">Declaration</h5--> public readonly string TypeName Field Value Type Description String"
  },
  "api/Riptide.InvalidHandlerSignatureException.html": {
    "href": "api/Riptide.InvalidHandlerSignatureException.html",
    "title": "InvalidHandlerSignatureException Class | Riptide Docs",
    "keywords": "InvalidHandlerSignatureException Class Namespace : Riptide Assembly : RiptideNetworking.dll The exception that is thrown when a method with a MessageHandlerAttribute does not have an acceptable message handler method signature (either Server.MessageHandler or Client.MessageHandler ). <!--h5 id=\"Riptide_InvalidHandlerSignatureException_syntax\">Syntax</h5--> public class InvalidHandlerSignatureException : Exception Inheritance Object InvalidHandlerSignatureException Constructors | Improve this Doc View Source InvalidHandlerSignatureException() Initializes a new InvalidHandlerSignatureException instance. <!--h5 class=\"decalaration\">Declaration</h5--> public InvalidHandlerSignatureException() | Improve this Doc View Source InvalidHandlerSignatureException(String) Initializes a new InvalidHandlerSignatureException instance with a specified error message. <!--h5 class=\"decalaration\">Declaration</h5--> public InvalidHandlerSignatureException(string message) Parameters Type Name Description String message The error message that explains the reason for the exception. | Improve this Doc View Source InvalidHandlerSignatureException(String, Exception) Initializes a new InvalidHandlerSignatureException instance with a specified error message and a reference to the inner exception that is the cause of this exception. <!--h5 class=\"decalaration\">Declaration</h5--> public InvalidHandlerSignatureException(string message, Exception inner) Parameters Type Name Description String message The error message that explains the reason for the exception. Exception inner The exception that is the cause of the current exception. If inner is not a null reference, the current exception is raised in a catch block that handles the inner exception. | Improve this Doc View Source InvalidHandlerSignatureException(Type, String) Initializes a new InvalidHandlerSignatureException instance and constructs an error message from the given information. <!--h5 class=\"decalaration\">Declaration</h5--> public InvalidHandlerSignatureException(Type declaringType, string handlerMethodName) Parameters Type Name Description Type declaringType The type containing the handler method. String handlerMethodName The name of the handler method. Fields | Improve this Doc View Source DeclaringType The type containing the handler method. <!--h5 class=\"decalaration\">Declaration</h5--> public readonly Type DeclaringType Field Value Type Description Type | Improve this Doc View Source HandlerMethodName The name of the handler method. <!--h5 class=\"decalaration\">Declaration</h5--> public readonly string HandlerMethodName Field Value Type Description String"
  },
  "api/Riptide.Message.html": {
    "href": "api/Riptide.Message.html",
    "title": "Message Class | Riptide Docs",
    "keywords": "Message Class Namespace : Riptide Assembly : RiptideNetworking.dll Provides functionality for converting data to bytes and vice versa. <!--h5 id=\"Riptide_Message_syntax\">Syntax</h5--> public class Message : object Inheritance Object Message Fields | Improve this Doc View Source MaxHeaderSize The maximum number of bytes required for a message's header. <!--h5 class=\"decalaration\">Declaration</h5--> public const int MaxHeaderSize = null Field Value Type Description Int32 Remarks 1 byte for the actual header, 2 bytes for the sequence ID (only for reliable messages), 2 bytes for the message ID. Messages sent unreliably will use 2 bytes less than this value for the header. Properties | Improve this Doc View Source InstancesPerPeer How many messages to add to the pool for each Server or Client instance that is started. <!--h5 class=\"decalaration\">Declaration</h5--> public static byte InstancesPerPeer { get; set; } Property Value Type Description Byte Remarks Changes will not affect Server and Client instances which are already running until they are restarted. | Improve this Doc View Source MaxPayloadSize The maximum number of bytes of payload data that a message can contain. This value represents how many bytes can be added to a message on top of the MaxHeaderSize . <!--h5 class=\"decalaration\">Declaration</h5--> public static int MaxPayloadSize { get; set; } Property Value Type Description Int32 | Improve this Doc View Source MaxSize The maximum number of bytes that a message can contain, including the MaxHeaderSize . <!--h5 class=\"decalaration\">Declaration</h5--> public static int MaxSize { get; } Property Value Type Description Int32 | Improve this Doc View Source SendMode The message's send mode. <!--h5 class=\"decalaration\">Declaration</h5--> public MessageSendMode SendMode { get; } Property Value Type Description MessageSendMode | Improve this Doc View Source UnreadLength The length in bytes of the unread data contained in the message. <!--h5 class=\"decalaration\">Declaration</h5--> public int UnreadLength { get; } Property Value Type Description Int32 | Improve this Doc View Source WrittenLength The length in bytes of the data that has been written to the message. <!--h5 class=\"decalaration\">Declaration</h5--> public int WrittenLength { get; } Property Value Type Description Int32 Methods | Improve this Doc View Source Add(Boolean) Adds a to the message. <!--h5 class=\"decalaration\">Declaration</h5--> public Message Add(bool value) Parameters Type Name Description Boolean value The to add. Returns Type Description Message The message that the was added to. Remarks This method is simply an alternative way of calling AddBool(Boolean) . | Improve this Doc View Source Add(Boolean[], Boolean) Adds a array to the message. <!--h5 class=\"decalaration\">Declaration</h5--> public Message Add(bool[] array, bool includeLength = true) Parameters Type Name Description Boolean [] array The array to add. Boolean includeLength Whether or not to include the length of the array in the message. Returns Type Description Message The message that the array was added to. Remarks This method is simply an alternative way of calling AddBools(Boolean[], Boolean) . | Improve this Doc View Source Add(Byte) Adds a single to the message. <!--h5 class=\"decalaration\">Declaration</h5--> public Message Add(byte value) Parameters Type Name Description Byte value The to add. Returns Type Description Message The message that the was added to. Remarks This method is simply an alternative way of calling AddByte(Byte) . | Improve this Doc View Source Add(Byte[], Boolean) Adds a array to the message. <!--h5 class=\"decalaration\">Declaration</h5--> public Message Add(byte[] array, bool includeLength = true) Parameters Type Name Description Byte [] array The array to add. Boolean includeLength Whether or not to include the length of the array in the message. Returns Type Description Message The message that the array was added to. Remarks This method is simply an alternative way of calling AddBytes(Byte[], Boolean) . | Improve this Doc View Source Add(Double) Adds a to the message. <!--h5 class=\"decalaration\">Declaration</h5--> public Message Add(double value) Parameters Type Name Description Double value The to add. Returns Type Description Message The message that the was added to. Remarks This method is simply an alternative way of calling AddDouble(Double) . | Improve this Doc View Source Add(Double[], Boolean) Adds a array to the message. <!--h5 class=\"decalaration\">Declaration</h5--> public Message Add(double[] array, bool includeLength = true) Parameters Type Name Description Double [] array The array to add. Boolean includeLength Whether or not to include the length of the array in the message. Returns Type Description Message The message that the array was added to. Remarks This method is simply an alternative way of calling AddDoubles(Double[], Boolean) . | Improve this Doc View Source Add(Int16) Adds a to the message. <!--h5 class=\"decalaration\">Declaration</h5--> public Message Add(short value) Parameters Type Name Description Int16 value The to add. Returns Type Description Message The message that the was added to. Remarks This method is simply an alternative way of calling AddShort(Int16) . | Improve this Doc View Source Add(Int16[], Boolean) Adds a array to the message. <!--h5 class=\"decalaration\">Declaration</h5--> public Message Add(short[] array, bool includeLength = true) Parameters Type Name Description Int16 [] array The array to add. Boolean includeLength Whether or not to include the length of the array in the message. Returns Type Description Message The message that the array was added to. Remarks This method is simply an alternative way of calling AddShorts(Int16[], Boolean) . | Improve this Doc View Source Add(Int32) Adds an to the message. <!--h5 class=\"decalaration\">Declaration</h5--> public Message Add(int value) Parameters Type Name Description Int32 value The to add. Returns Type Description Message The message that the was added to. Remarks This method is simply an alternative way of calling AddInt(Int32) . | Improve this Doc View Source Add(Int32[], Boolean) Adds an array message. <!--h5 class=\"decalaration\">Declaration</h5--> public Message Add(int[] array, bool includeLength = true) Parameters Type Name Description Int32 [] array The array to add. Boolean includeLength Whether or not to include the length of the array in the message. Returns Type Description Message The message that the array was added to. Remarks This method is simply an alternative way of calling AddInts(Int32[], Boolean) . | Improve this Doc View Source Add(Int64) Adds a to the message. <!--h5 class=\"decalaration\">Declaration</h5--> public Message Add(long value) Parameters Type Name Description Int64 value The to add. Returns Type Description Message The message that the was added to. Remarks This method is simply an alternative way of calling AddLong(Int64) . | Improve this Doc View Source Add(Int64[], Boolean) Adds a array to the message. <!--h5 class=\"decalaration\">Declaration</h5--> public Message Add(long[] array, bool includeLength = true) Parameters Type Name Description Int64 [] array The array to add. Boolean includeLength Whether or not to include the length of the array in the message. Returns Type Description Message The message that the array was added to. Remarks This method is simply an alternative way of calling AddLongs(Int64[], Boolean) . | Improve this Doc View Source Add(SByte) Adds a single to the message. <!--h5 class=\"decalaration\">Declaration</h5--> public Message Add(sbyte value) Parameters Type Name Description SByte value The to add. Returns Type Description Message The message that the was added to. Remarks This method is simply an alternative way of calling AddSByte(SByte) . | Improve this Doc View Source Add(SByte[], Boolean) Adds an array to the message. <!--h5 class=\"decalaration\">Declaration</h5--> public Message Add(sbyte[] array, bool includeLength = true) Parameters Type Name Description SByte [] array The array to add. Boolean includeLength Whether or not to include the length of the array in the message. Returns Type Description Message The message that the array was added to. Remarks This method is simply an alternative way of calling AddSBytes(SByte[], Boolean) . | Improve this Doc View Source Add(Single) Adds a to the message. <!--h5 class=\"decalaration\">Declaration</h5--> public Message Add(float value) Parameters Type Name Description Single value The to add. Returns Type Description Message The message that the was added to. Remarks This method is simply an alternative way of calling AddFloat(Single) . | Improve this Doc View Source Add(Single[], Boolean) Adds a array to the message. <!--h5 class=\"decalaration\">Declaration</h5--> public Message Add(float[] array, bool includeLength = true) Parameters Type Name Description Single [] array The array to add. Boolean includeLength Whether or not to include the length of the array in the message. Returns Type Description Message The message that the array was added to. Remarks This method is simply an alternative way of calling AddFloats(Single[], Boolean) . | Improve this Doc View Source Add(String) Adds a to the message. <!--h5 class=\"decalaration\">Declaration</h5--> public Message Add(string value) Parameters Type Name Description String value The to add. Returns Type Description Message The message that the was added to. Remarks This method is simply an alternative way of calling AddString(String) . | Improve this Doc View Source Add(String[], Boolean) Adds a array to the message. <!--h5 class=\"decalaration\">Declaration</h5--> public Message Add(string[] array, bool includeLength = true) Parameters Type Name Description String [] array The array to add. Boolean includeLength Whether or not to include the length of the array in the message. Returns Type Description Message The message that the array was added to. Remarks This method is simply an alternative way of calling AddStrings(String[], Boolean) . | Improve this Doc View Source Add(UInt16) Adds a to the message. <!--h5 class=\"decalaration\">Declaration</h5--> public Message Add(ushort value) Parameters Type Name Description UInt16 value The to add. Returns Type Description Message The message that the was added to. Remarks This method is simply an alternative way of calling AddUShort(UInt16) . | Improve this Doc View Source Add(UInt16[], Boolean) Adds a array to the message. <!--h5 class=\"decalaration\">Declaration</h5--> public Message Add(ushort[] array, bool includeLength = true) Parameters Type Name Description UInt16 [] array The array to add. Boolean includeLength Whether or not to include the length of the array in the message. Returns Type Description Message The message that the array was added to. Remarks This method is simply an alternative way of calling AddUShorts(UInt16[], Boolean) . | Improve this Doc View Source Add(UInt32) Adds a to the message. <!--h5 class=\"decalaration\">Declaration</h5--> public Message Add(uint value) Parameters Type Name Description UInt32 value The to add. Returns Type Description Message The message that the was added to. Remarks This method is simply an alternative way of calling AddUInt(UInt32) . | Improve this Doc View Source Add(UInt32[], Boolean) Adds a array to the message. <!--h5 class=\"decalaration\">Declaration</h5--> public Message Add(uint[] array, bool includeLength = true) Parameters Type Name Description UInt32 [] array The array to add. Boolean includeLength Whether or not to include the length of the array in the message. Returns Type Description Message The message that the array was added to. Remarks This method is simply an alternative way of calling AddUInts(UInt32[], Boolean) . | Improve this Doc View Source Add(UInt64) Adds a to the message. <!--h5 class=\"decalaration\">Declaration</h5--> public Message Add(ulong value) Parameters Type Name Description UInt64 value The to add. Returns Type Description Message The message that the was added to. Remarks This method is simply an alternative way of calling AddULong(UInt64) . | Improve this Doc View Source Add(UInt64[], Boolean) Adds a array to the message. <!--h5 class=\"decalaration\">Declaration</h5--> public Message Add(ulong[] array, bool includeLength = true) Parameters Type Name Description UInt64 [] array The array to add. Boolean includeLength Whether or not to include the length of the array in the message. Returns Type Description Message The message that the array was added to. Remarks This method is simply an alternative way of calling AddULongs(UInt64[], Boolean) . | Improve this Doc View Source Add<T>(T) Adds a serializable to the message. <!--h5 class=\"decalaration\">Declaration</h5--> public Message Add<T>(T value) where T : IMessageSerializable Parameters Type Name Description T value The serializable to add. Returns Type Description Message The message that the serializable was added to. Type Parameters Name Description T Remarks This method is simply an alternative way of calling AddSerializable<T>(T) . | Improve this Doc View Source Add<T>(T[], Boolean) Adds an array of serializables to the message. <!--h5 class=\"decalaration\">Declaration</h5--> public Message Add<T>(T[] array, bool includeLength = true) where T : IMessageSerializable, new() Parameters Type Name Description T[] array The array to add. Boolean includeLength Whether or not to include the length of the array in the message. Returns Type Description Message The message that the array was added to. Type Parameters Name Description T Remarks This method is simply an alternative way of calling AddSerializables<T>(T[], Boolean) . | Improve this Doc View Source AddBool(Boolean) Adds a to the message. <!--h5 class=\"decalaration\">Declaration</h5--> public Message AddBool(bool value) Parameters Type Name Description Boolean value The to add. Returns Type Description Message The message that the was added to. | Improve this Doc View Source AddBools(Boolean[], Boolean) Adds a array to the message. <!--h5 class=\"decalaration\">Declaration</h5--> public Message AddBools(bool[] array, bool includeLength = true) Parameters Type Name Description Boolean [] array The array to add. Boolean includeLength Whether or not to include the length of the array in the message. Returns Type Description Message The message that the array was added to. | Improve this Doc View Source AddByte(Byte) Adds a single to the message. <!--h5 class=\"decalaration\">Declaration</h5--> public Message AddByte(byte value) Parameters Type Name Description Byte value The to add. Returns Type Description Message The message that the was added to. | Improve this Doc View Source AddBytes(Byte[], Boolean) Adds a array to the message. <!--h5 class=\"decalaration\">Declaration</h5--> public Message AddBytes(byte[] array, bool includeLength = true) Parameters Type Name Description Byte [] array The array to add. Boolean includeLength Whether or not to include the length of the array in the message. Returns Type Description Message The message that the array was added to. | Improve this Doc View Source AddDouble(Double) Adds a to the message. <!--h5 class=\"decalaration\">Declaration</h5--> public Message AddDouble(double value) Parameters Type Name Description Double value The to add. Returns Type Description Message The message that the was added to. | Improve this Doc View Source AddDoubles(Double[], Boolean) Adds a array to the message. <!--h5 class=\"decalaration\">Declaration</h5--> public Message AddDoubles(double[] array, bool includeLength = true) Parameters Type Name Description Double [] array The array to add. Boolean includeLength Whether or not to include the length of the array in the message. Returns Type Description Message The message that the array was added to. | Improve this Doc View Source AddFloat(Single) Adds a to the message. <!--h5 class=\"decalaration\">Declaration</h5--> public Message AddFloat(float value) Parameters Type Name Description Single value The to add. Returns Type Description Message The message that the was added to. | Improve this Doc View Source AddFloats(Single[], Boolean) Adds a array to the message. <!--h5 class=\"decalaration\">Declaration</h5--> public Message AddFloats(float[] array, bool includeLength = true) Parameters Type Name Description Single [] array The array to add. Boolean includeLength Whether or not to include the length of the array in the message. Returns Type Description Message The message that the array was added to. | Improve this Doc View Source AddInt(Int32) Adds an to the message. <!--h5 class=\"decalaration\">Declaration</h5--> public Message AddInt(int value) Parameters Type Name Description Int32 value The to add. Returns Type Description Message The message that the was added to. | Improve this Doc View Source AddInts(Int32[], Boolean) Adds an array message. <!--h5 class=\"decalaration\">Declaration</h5--> public Message AddInts(int[] array, bool includeLength = true) Parameters Type Name Description Int32 [] array The array to add. Boolean includeLength Whether or not to include the length of the array in the message. Returns Type Description Message The message that the array was added to. | Improve this Doc View Source AddLong(Int64) Adds a to the message. <!--h5 class=\"decalaration\">Declaration</h5--> public Message AddLong(long value) Parameters Type Name Description Int64 value The to add. Returns Type Description Message The message that the was added to. | Improve this Doc View Source AddLongs(Int64[], Boolean) Adds a array to the message. <!--h5 class=\"decalaration\">Declaration</h5--> public Message AddLongs(long[] array, bool includeLength = true) Parameters Type Name Description Int64 [] array The array to add. Boolean includeLength Whether or not to include the length of the array in the message. Returns Type Description Message The message that the array was added to. | Improve this Doc View Source AddSByte(SByte) Adds a single to the message. <!--h5 class=\"decalaration\">Declaration</h5--> public Message AddSByte(sbyte value) Parameters Type Name Description SByte value The to add. Returns Type Description Message The message that the was added to. | Improve this Doc View Source AddSBytes(SByte[], Boolean) Adds an array to the message. <!--h5 class=\"decalaration\">Declaration</h5--> public Message AddSBytes(sbyte[] array, bool includeLength = true) Parameters Type Name Description SByte [] array The array to add. Boolean includeLength Whether or not to include the length of the array in the message. Returns Type Description Message The message that the array was added to. | Improve this Doc View Source AddSerializable<T>(T) Adds a serializable to the message. <!--h5 class=\"decalaration\">Declaration</h5--> public Message AddSerializable<T>(T value) where T : IMessageSerializable Parameters Type Name Description T value The serializable to add. Returns Type Description Message The message that the serializable was added to. Type Parameters Name Description T | Improve this Doc View Source AddSerializables<T>(T[], Boolean) Adds an array of serializables to the message. <!--h5 class=\"decalaration\">Declaration</h5--> public Message AddSerializables<T>(T[] array, bool includeLength = true) where T : IMessageSerializable Parameters Type Name Description T[] array The array to add. Boolean includeLength Whether or not to include the length of the array in the message. Returns Type Description Message The message that the array was added to. Type Parameters Name Description T | Improve this Doc View Source AddShort(Int16) Adds a to the message. <!--h5 class=\"decalaration\">Declaration</h5--> public Message AddShort(short value) Parameters Type Name Description Int16 value The to add. Returns Type Description Message The message that the was added to. | Improve this Doc View Source AddShorts(Int16[], Boolean) Adds a array to the message. <!--h5 class=\"decalaration\">Declaration</h5--> public Message AddShorts(short[] array, bool includeLength = true) Parameters Type Name Description Int16 [] array The array to add. Boolean includeLength Whether or not to include the length of the array in the message. Returns Type Description Message The message that the array was added to. | Improve this Doc View Source AddString(String) Adds a to the message. <!--h5 class=\"decalaration\">Declaration</h5--> public Message AddString(string value) Parameters Type Name Description String value The to add. Returns Type Description Message The message that the was added to. | Improve this Doc View Source AddStrings(String[], Boolean) Adds a array to the message. <!--h5 class=\"decalaration\">Declaration</h5--> public Message AddStrings(string[] array, bool includeLength = true) Parameters Type Name Description String [] array The array to add. Boolean includeLength Whether or not to include the length of the array in the message. Returns Type Description Message The message that the array was added to. | Improve this Doc View Source AddUInt(UInt32) Adds a to the message. <!--h5 class=\"decalaration\">Declaration</h5--> public Message AddUInt(uint value) Parameters Type Name Description UInt32 value The to add. Returns Type Description Message The message that the was added to. | Improve this Doc View Source AddUInts(UInt32[], Boolean) Adds a array to the message. <!--h5 class=\"decalaration\">Declaration</h5--> public Message AddUInts(uint[] array, bool includeLength = true) Parameters Type Name Description UInt32 [] array The array to add. Boolean includeLength Whether or not to include the length of the array in the message. Returns Type Description Message The message that the array was added to. | Improve this Doc View Source AddULong(UInt64) Adds a to the message. <!--h5 class=\"decalaration\">Declaration</h5--> public Message AddULong(ulong value) Parameters Type Name Description UInt64 value The to add. Returns Type Description Message The message that the was added to. | Improve this Doc View Source AddULongs(UInt64[], Boolean) Adds a array to the message. <!--h5 class=\"decalaration\">Declaration</h5--> public Message AddULongs(ulong[] array, bool includeLength = true) Parameters Type Name Description UInt64 [] array The array to add. Boolean includeLength Whether or not to include the length of the array in the message. Returns Type Description Message The message that the array was added to. | Improve this Doc View Source AddUShort(UInt16) Adds a to the message. <!--h5 class=\"decalaration\">Declaration</h5--> public Message AddUShort(ushort value) Parameters Type Name Description UInt16 value The to add. Returns Type Description Message The message that the was added to. | Improve this Doc View Source AddUShorts(UInt16[], Boolean) Adds a array to the message. <!--h5 class=\"decalaration\">Declaration</h5--> public Message AddUShorts(ushort[] array, bool includeLength = true) Parameters Type Name Description UInt16 [] array The array to add. Boolean includeLength Whether or not to include the length of the array in the message. Returns Type Description Message The message that the array was added to. | Improve this Doc View Source Create() Gets a usable message instance. <!--h5 class=\"decalaration\">Declaration</h5--> public static Message Create() Returns Type Description Message A message instance ready to be used. | Improve this Doc View Source Create(MessageSendMode, Enum) Gets a message instance that can be used for sending. <!--h5 class=\"decalaration\">Declaration</h5--> public static Message Create(MessageSendMode sendMode, Enum id) Parameters Type Name Description MessageSendMode sendMode The mode in which the message should be sent. Enum id Returns Type Description Message A message instance ready to be used for sending. Remarks NOTE: id will be cast to a . You should ensure that its value never exceeds that of , otherwise you'll encounter unexpected behaviour when handling messages. | Improve this Doc View Source Create(MessageSendMode, UInt16) Gets a message instance that can be used for sending. <!--h5 class=\"decalaration\">Declaration</h5--> public static Message Create(MessageSendMode sendMode, ushort id) Parameters Type Name Description MessageSendMode sendMode The mode in which the message should be sent. UInt16 id The message ID. Returns Type Description Message A message instance ready to be used for sending. | Improve this Doc View Source GetBool() Retrieves a from the message. <!--h5 class=\"decalaration\">Declaration</h5--> public bool GetBool() Returns Type Description Boolean The that was retrieved. | Improve this Doc View Source GetBools() Retrieves a array from the message. <!--h5 class=\"decalaration\">Declaration</h5--> public bool[] GetBools() Returns Type Description Boolean [] The array that was retrieved. | Improve this Doc View Source GetBools(Int32) Retrieves a array from the message. <!--h5 class=\"decalaration\">Declaration</h5--> public bool[] GetBools(int amount) Parameters Type Name Description Int32 amount The amount of bools to retrieve. Returns Type Description Boolean [] The array that was retrieved. | Improve this Doc View Source GetBools(Int32, Boolean[], Int32) Populates a array with bools retrieved from the message. <!--h5 class=\"decalaration\">Declaration</h5--> public void GetBools(int amount, bool[] intoArray, int startIndex = 0) Parameters Type Name Description Int32 amount The amount of bools to retrieve. Boolean [] intoArray The array to populate. Int32 startIndex The position at which to start populating the array. | Improve this Doc View Source GetByte() Retrieves a single from the message. <!--h5 class=\"decalaration\">Declaration</h5--> public byte GetByte() Returns Type Description Byte The that was retrieved. | Improve this Doc View Source GetBytes() Retrieves a array from the message. <!--h5 class=\"decalaration\">Declaration</h5--> public byte[] GetBytes() Returns Type Description Byte [] The array that was retrieved. | Improve this Doc View Source GetBytes(Int32) Retrieves a array from the message. <!--h5 class=\"decalaration\">Declaration</h5--> public byte[] GetBytes(int amount) Parameters Type Name Description Int32 amount The amount of bytes to retrieve. Returns Type Description Byte [] The array that was retrieved. | Improve this Doc View Source GetBytes(Int32, Byte[], Int32) Populates a array with bytes retrieved from the message. <!--h5 class=\"decalaration\">Declaration</h5--> public void GetBytes(int amount, byte[] intoArray, int startIndex = 0) Parameters Type Name Description Int32 amount The amount of bytes to retrieve. Byte [] intoArray The array to populate. Int32 startIndex The position at which to start populating the array. | Improve this Doc View Source GetDouble() Retrieves a from the message. <!--h5 class=\"decalaration\">Declaration</h5--> public double GetDouble() Returns Type Description Double The that was retrieved. | Improve this Doc View Source GetDoubles() Retrieves a array from the message. <!--h5 class=\"decalaration\">Declaration</h5--> public double[] GetDoubles() Returns Type Description Double [] The array that was retrieved. | Improve this Doc View Source GetDoubles(Int32) Retrieves a array from the message. <!--h5 class=\"decalaration\">Declaration</h5--> public double[] GetDoubles(int amount) Parameters Type Name Description Int32 amount The amount of doubles to retrieve. Returns Type Description Double [] The array that was retrieved. | Improve this Doc View Source GetDoubles(Int32, Double[], Int32) Populates a array with doubles retrieved from the message. <!--h5 class=\"decalaration\">Declaration</h5--> public void GetDoubles(int amount, double[] intoArray, int startIndex = 0) Parameters Type Name Description Int32 amount The amount of doubles to retrieve. Double [] intoArray The array to populate. Int32 startIndex The position at which to start populating the array. | Improve this Doc View Source GetFloat() Retrieves a from the message. <!--h5 class=\"decalaration\">Declaration</h5--> public float GetFloat() Returns Type Description Single The that was retrieved. | Improve this Doc View Source GetFloats() Retrieves a array from the message. <!--h5 class=\"decalaration\">Declaration</h5--> public float[] GetFloats() Returns Type Description Single [] The array that was retrieved. | Improve this Doc View Source GetFloats(Int32) Retrieves a array from the message. <!--h5 class=\"decalaration\">Declaration</h5--> public float[] GetFloats(int amount) Parameters Type Name Description Int32 amount The amount of floats to retrieve. Returns Type Description Single [] The array that was retrieved. | Improve this Doc View Source GetFloats(Int32, Single[], Int32) Populates a array with floats retrieved from the message. <!--h5 class=\"decalaration\">Declaration</h5--> public void GetFloats(int amount, float[] intoArray, int startIndex = 0) Parameters Type Name Description Int32 amount The amount of floats to retrieve. Single [] intoArray The array to populate. Int32 startIndex The position at which to start populating the array. | Improve this Doc View Source GetInt() Retrieves an from the message. <!--h5 class=\"decalaration\">Declaration</h5--> public int GetInt() Returns Type Description Int32 The that was retrieved. | Improve this Doc View Source GetInts() Retrieves an array from the message. <!--h5 class=\"decalaration\">Declaration</h5--> public int[] GetInts() Returns Type Description Int32 [] The array that was retrieved. | Improve this Doc View Source GetInts(Int32) Retrieves an array from the message. <!--h5 class=\"decalaration\">Declaration</h5--> public int[] GetInts(int amount) Parameters Type Name Description Int32 amount The amount of ints to retrieve. Returns Type Description Int32 [] The array that was retrieved. | Improve this Doc View Source GetInts(Int32, Int32[], Int32) Populates an array with ints retrieved from the message. <!--h5 class=\"decalaration\">Declaration</h5--> public void GetInts(int amount, int[] intoArray, int startIndex = 0) Parameters Type Name Description Int32 amount The amount of ints to retrieve. Int32 [] intoArray The array to populate. Int32 startIndex The position at which to start populating the array. | Improve this Doc View Source GetLong() Retrieves a from the message. <!--h5 class=\"decalaration\">Declaration</h5--> public long GetLong() Returns Type Description Int64 The that was retrieved. | Improve this Doc View Source GetLongs() Retrieves a array from the message. <!--h5 class=\"decalaration\">Declaration</h5--> public long[] GetLongs() Returns Type Description Int64 [] The array that was retrieved. | Improve this Doc View Source GetLongs(Int32) Retrieves a array from the message. <!--h5 class=\"decalaration\">Declaration</h5--> public long[] GetLongs(int amount) Parameters Type Name Description Int32 amount The amount of longs to retrieve. Returns Type Description Int64 [] The array that was retrieved. | Improve this Doc View Source GetLongs(Int32, Int64[], Int32) Populates a array with longs retrieved from the message. <!--h5 class=\"decalaration\">Declaration</h5--> public void GetLongs(int amount, long[] intoArray, int startIndex = 0) Parameters Type Name Description Int32 amount The amount of longs to retrieve. Int64 [] intoArray The array to populate. Int32 startIndex The position at which to start populating the array. | Improve this Doc View Source GetSByte() Retrieves a single from the message. <!--h5 class=\"decalaration\">Declaration</h5--> public sbyte GetSByte() Returns Type Description SByte The that was retrieved. | Improve this Doc View Source GetSBytes() Retrieves an array from the message. <!--h5 class=\"decalaration\">Declaration</h5--> public sbyte[] GetSBytes() Returns Type Description SByte [] The array that was retrieved. | Improve this Doc View Source GetSBytes(Int32) Retrieves an array from the message. <!--h5 class=\"decalaration\">Declaration</h5--> public sbyte[] GetSBytes(int amount) Parameters Type Name Description Int32 amount The amount of sbytes to retrieve. Returns Type Description SByte [] The array that was retrieved. | Improve this Doc View Source GetSBytes(Int32, SByte[], Int32) Populates a array with bytes retrieved from the message. <!--h5 class=\"decalaration\">Declaration</h5--> public void GetSBytes(int amount, sbyte[] intArray, int startIndex = 0) Parameters Type Name Description Int32 amount The amount of sbytes to retrieve. SByte [] intArray The array to populate. Int32 startIndex The position at which to start populating intArray . | Improve this Doc View Source GetSerializable<T>() Retrieves a serializable from the message. <!--h5 class=\"decalaration\">Declaration</h5--> public T GetSerializable<T>() where T : IMessageSerializable, new() Returns Type Description T The serializable that was retrieved. Type Parameters Name Description T | Improve this Doc View Source GetSerializables<T>() Retrieves an array of serializables from the message. <!--h5 class=\"decalaration\">Declaration</h5--> public T[] GetSerializables<T>() where T : IMessageSerializable, new() Returns Type Description T[] The array that was retrieved. Type Parameters Name Description T | Improve this Doc View Source GetSerializables<T>(Int32) Retrieves an array of serializables from the message. <!--h5 class=\"decalaration\">Declaration</h5--> public T[] GetSerializables<T>(int amount) where T : IMessageSerializable, new() Parameters Type Name Description Int32 amount The amount of serializables to retrieve. Returns Type Description T[] The array that was retrieved. Type Parameters Name Description T | Improve this Doc View Source GetSerializables<T>(Int32, T[], Int32) Populates an array of serializables retrieved from the message. <!--h5 class=\"decalaration\">Declaration</h5--> public void GetSerializables<T>(int amount, T[] intoArray, int startIndex = 0) where T : IMessageSerializable, new() Parameters Type Name Description Int32 amount The amount of serializables to retrieve. T[] intoArray The array to populate. Int32 startIndex The position at which to start populating the array. Type Parameters Name Description T | Improve this Doc View Source GetShort() Retrieves a from the message. <!--h5 class=\"decalaration\">Declaration</h5--> public short GetShort() Returns Type Description Int16 The that was retrieved. | Improve this Doc View Source GetShorts() Retrieves a array from the message. <!--h5 class=\"decalaration\">Declaration</h5--> public short[] GetShorts() Returns Type Description Int16 [] The array that was retrieved. | Improve this Doc View Source GetShorts(Int32) Retrieves a array from the message. <!--h5 class=\"decalaration\">Declaration</h5--> public short[] GetShorts(int amount) Parameters Type Name Description Int32 amount The amount of shorts to retrieve. Returns Type Description Int16 [] The array that was retrieved. | Improve this Doc View Source GetShorts(Int32, Int16[], Int32) Populates a array with shorts retrieved from the message. <!--h5 class=\"decalaration\">Declaration</h5--> public void GetShorts(int amount, short[] intoArray, int startIndex = 0) Parameters Type Name Description Int32 amount The amount of shorts to retrieve. Int16 [] intoArray The array to populate. Int32 startIndex The position at which to start populating the array. | Improve this Doc View Source GetString() Retrieves a from the message. <!--h5 class=\"decalaration\">Declaration</h5--> public string GetString() Returns Type Description String The that was retrieved. | Improve this Doc View Source GetStrings() Retrieves a array from the message. <!--h5 class=\"decalaration\">Declaration</h5--> public string[] GetStrings() Returns Type Description String [] The array that was retrieved. | Improve this Doc View Source GetStrings(Int32) Retrieves a array from the message. <!--h5 class=\"decalaration\">Declaration</h5--> public string[] GetStrings(int amount) Parameters Type Name Description Int32 amount The amount of strings to retrieve. Returns Type Description String [] The array that was retrieved. | Improve this Doc View Source GetStrings(Int32, String[], Int32) Populates a array with strings retrieved from the message. <!--h5 class=\"decalaration\">Declaration</h5--> public void GetStrings(int amount, string[] intoArray, int startIndex = 0) Parameters Type Name Description Int32 amount The amount of strings to retrieve. String [] intoArray The array to populate. Int32 startIndex The position at which to start populating the array. | Improve this Doc View Source GetUInt() Retrieves a from the message. <!--h5 class=\"decalaration\">Declaration</h5--> public uint GetUInt() Returns Type Description UInt32 The that was retrieved. | Improve this Doc View Source GetUInts() Retrieves a array from the message. <!--h5 class=\"decalaration\">Declaration</h5--> public uint[] GetUInts() Returns Type Description UInt32 [] The array that was retrieved. | Improve this Doc View Source GetUInts(Int32) Retrieves a array from the message. <!--h5 class=\"decalaration\">Declaration</h5--> public uint[] GetUInts(int amount) Parameters Type Name Description Int32 amount The amount of uints to retrieve. Returns Type Description UInt32 [] The array that was retrieved. | Improve this Doc View Source GetUInts(Int32, UInt32[], Int32) Populates a array with uints retrieved from the message. <!--h5 class=\"decalaration\">Declaration</h5--> public void GetUInts(int amount, uint[] intoArray, int startIndex = 0) Parameters Type Name Description Int32 amount The amount of uints to retrieve. UInt32 [] intoArray The array to populate. Int32 startIndex The position at which to start populating the array. | Improve this Doc View Source GetULong() Retrieves a from the message. <!--h5 class=\"decalaration\">Declaration</h5--> public ulong GetULong() Returns Type Description UInt64 The that was retrieved. | Improve this Doc View Source GetULongs() Retrieves a array from the message. <!--h5 class=\"decalaration\">Declaration</h5--> public ulong[] GetULongs() Returns Type Description UInt64 [] The array that was retrieved. | Improve this Doc View Source GetULongs(Int32) Retrieves a array from the message. <!--h5 class=\"decalaration\">Declaration</h5--> public ulong[] GetULongs(int amount) Parameters Type Name Description Int32 amount The amount of ulongs to retrieve. Returns Type Description UInt64 [] The array that was retrieved. | Improve this Doc View Source GetULongs(Int32, UInt64[], Int32) Populates a array with ulongs retrieved from the message. <!--h5 class=\"decalaration\">Declaration</h5--> public void GetULongs(int amount, ulong[] intoArray, int startIndex = 0) Parameters Type Name Description Int32 amount The amount of ulongs to retrieve. UInt64 [] intoArray The array to populate. Int32 startIndex The position at which to start populating the array. | Improve this Doc View Source GetUShort() Retrieves a from the message. <!--h5 class=\"decalaration\">Declaration</h5--> public ushort GetUShort() Returns Type Description UInt16 The that was retrieved. | Improve this Doc View Source GetUShorts() Retrieves a array from the message. <!--h5 class=\"decalaration\">Declaration</h5--> public ushort[] GetUShorts() Returns Type Description UInt16 [] The array that was retrieved. | Improve this Doc View Source GetUShorts(Int32) Retrieves a array from the message. <!--h5 class=\"decalaration\">Declaration</h5--> public ushort[] GetUShorts(int amount) Parameters Type Name Description Int32 amount The amount of ushorts to retrieve. Returns Type Description UInt16 [] The array that was retrieved. | Improve this Doc View Source GetUShorts(Int32, UInt16[], Int32) Populates a array with ushorts retrieved from the message. <!--h5 class=\"decalaration\">Declaration</h5--> public void GetUShorts(int amount, ushort[] intoArray, int startIndex = 0) Parameters Type Name Description Int32 amount The amount of ushorts to retrieve. UInt16 [] intoArray The array to populate. Int32 startIndex The position at which to start populating the array. | Improve this Doc View Source Release() Returns the message instance to the internal pool so it can be reused. <!--h5 class=\"decalaration\">Declaration</h5--> public void Release() | Improve this Doc View Source TrimPool() Trims the message pool to a more appropriate size for how many Server and/or Client instances are currently running. <!--h5 class=\"decalaration\">Declaration</h5--> public static void TrimPool()"
  },
  "api/Riptide.MessageHandlerAttribute.html": {
    "href": "api/Riptide.MessageHandlerAttribute.html",
    "title": "MessageHandlerAttribute Class | Riptide Docs",
    "keywords": "MessageHandlerAttribute Class Namespace : Riptide Assembly : RiptideNetworking.dll Specifies a method as the message handler for messages with the given ID. <!--h5 id=\"Riptide_MessageHandlerAttribute_syntax\">Syntax</h5--> public sealed class MessageHandlerAttribute : Attribute Inheritance Object MessageHandlerAttribute Remarks In order for a method to qualify as a message handler, it must match a valid message handler method signature. Server s will only use methods marked with this attribute if they match the Server.MessageHandler signature, and Client s will only use methods marked with this attribute if they match the Client.MessageHandler signature. Methods marked with this attribute which match neither of the valid message handler signatures will not be used by Server s or Client s and will cause warnings at runtime. If you want a Server or Client to only use a subset of all message handler methods, you can do so by setting up custom message handler groups. Simply set the group ID in the MessageHandlerAttribute(UInt16, Byte) constructor and pass the same value to the Start(UInt16, UInt16, Byte) or Connect(String, Int32, Byte, Message) method. This will make that Server or Client only use message handlers which have the same group ID. Constructors | Improve this Doc View Source MessageHandlerAttribute(UInt16, Byte) Initializes a new instance of the MessageHandlerAttribute class with the messageId and groupId values. <!--h5 class=\"decalaration\">Declaration</h5--> public MessageHandlerAttribute(ushort messageId, byte groupId = null) Parameters Type Name Description UInt16 messageId The ID of the message type which this method is meant to handle. Byte groupId The ID of the group of message handlers which this method belongs to. Remarks Server s will only use this method if its signature matches the Server.MessageHandler signature. Client s will only use this method if its signature matches the Client.MessageHandler signature. This method will be ignored if its signature matches neither of the valid message handler signatures. Fields | Improve this Doc View Source GroupId The ID of the group of message handlers which this method belongs to. <!--h5 class=\"decalaration\">Declaration</h5--> public readonly byte GroupId Field Value Type Description Byte | Improve this Doc View Source MessageId The ID of the message type which this method is meant to handle. <!--h5 class=\"decalaration\">Declaration</h5--> public readonly ushort MessageId Field Value Type Description UInt16"
  },
  "api/Riptide.MessageReceivedEventArgs.html": {
    "href": "api/Riptide.MessageReceivedEventArgs.html",
    "title": "MessageReceivedEventArgs Class | Riptide Docs",
    "keywords": "MessageReceivedEventArgs Class Namespace : Riptide Assembly : RiptideNetworking.dll Contains event data for when a message is received. <!--h5 id=\"Riptide_MessageReceivedEventArgs_syntax\">Syntax</h5--> public class MessageReceivedEventArgs : EventArgs Inheritance Object MessageReceivedEventArgs Constructors | Improve this Doc View Source MessageReceivedEventArgs(Connection, UInt16, Message) Initializes event data. <!--h5 class=\"decalaration\">Declaration</h5--> public MessageReceivedEventArgs(Connection fromConnection, ushort messageId, Message message) Parameters Type Name Description Connection fromConnection The connection from which the message was received. UInt16 messageId The ID of the message. Message message The received message. Fields | Improve this Doc View Source FromConnection The connection from which the message was received. <!--h5 class=\"decalaration\">Declaration</h5--> public readonly Connection FromConnection Field Value Type Description Connection | Improve this Doc View Source Message The received message. <!--h5 class=\"decalaration\">Declaration</h5--> public readonly Message Message Field Value Type Description Message | Improve this Doc View Source MessageId The ID of the message. <!--h5 class=\"decalaration\">Declaration</h5--> public readonly ushort MessageId Field Value Type Description UInt16"
  },
  "api/Riptide.MessageRelayFilter.html": {
    "href": "api/Riptide.MessageRelayFilter.html",
    "title": "MessageRelayFilter Class | Riptide Docs",
    "keywords": "MessageRelayFilter Class Namespace : Riptide Assembly : RiptideNetworking.dll Provides functionality for enabling/disabling automatic message relaying by message type. <!--h5 id=\"Riptide_MessageRelayFilter_syntax\">Syntax</h5--> public class MessageRelayFilter : object Inheritance Object MessageRelayFilter Constructors | Improve this Doc View Source MessageRelayFilter(Int32) Creates a filter of a given size. <!--h5 class=\"decalaration\">Declaration</h5--> public MessageRelayFilter(int size) Parameters Type Name Description Int32 size How big to make the filter. Remarks size should be set to the value of the largest message ID, plus 1. For example, if a server will handle messages with IDs 1, 2, 3, 7, and 8, size should be set to 9 (8 is the largest possible value, and 8 + 1 = 9) despite the fact that there are only 5 unique message IDs the server will ever handle. | Improve this Doc View Source MessageRelayFilter(Int32, UInt16[]) Creates a filter of a given size and enables relaying for the given message IDs. <!--h5 class=\"decalaration\">Declaration</h5--> public MessageRelayFilter(int size, params ushort[] idsToEnable) Parameters Type Name Description Int32 size How big to make the filter. UInt16 [] idsToEnable Message IDs to enable auto relaying for. Remarks | Improve this Doc View Source MessageRelayFilter(Type) Creates a filter based on an enum of message IDs. <!--h5 class=\"decalaration\">Declaration</h5--> public MessageRelayFilter(Type idEnum) Parameters Type Name Description Type idEnum The enum type. | Improve this Doc View Source MessageRelayFilter(Type, Enum[]) Creates a filter based on an enum of message IDs and enables relaying for the given message IDs. <!--h5 class=\"decalaration\">Declaration</h5--> public MessageRelayFilter(Type idEnum, params Enum[] idsToEnable) Parameters Type Name Description Type idEnum The enum type. Enum [] idsToEnable Message IDs to enable relaying for. Methods | Improve this Doc View Source DisableRelay(Enum) Disables auto relaying for the given message ID. <!--h5 class=\"decalaration\">Declaration</h5--> public void DisableRelay(Enum forMessageId) Parameters Type Name Description Enum forMessageId | Improve this Doc View Source DisableRelay(UInt16) Disables auto relaying for the given message ID. <!--h5 class=\"decalaration\">Declaration</h5--> public void DisableRelay(ushort forMessageId) Parameters Type Name Description UInt16 forMessageId The message ID to enable relaying for. | Improve this Doc View Source EnableRelay(Enum) Enables auto relaying for the given message ID. <!--h5 class=\"decalaration\">Declaration</h5--> public void EnableRelay(Enum forMessageId) Parameters Type Name Description Enum forMessageId | Improve this Doc View Source EnableRelay(UInt16) Enables auto relaying for the given message ID. <!--h5 class=\"decalaration\">Declaration</h5--> public void EnableRelay(ushort forMessageId) Parameters Type Name Description UInt16 forMessageId The message ID to enable relaying for."
  },
  "api/Riptide.MessageSendMode.html": {
    "href": "api/Riptide.MessageSendMode.html",
    "title": "MessageSendMode Enum | Riptide Docs",
    "keywords": "MessageSendMode Enum Namespace : Riptide Assembly : RiptideNetworking.dll The send mode of a Message . <!--h5 id=\"Riptide_MessageSendMode_syntax\">Syntax</h5--> public enum MessageSendMode : byte Fields Name Description Reliable Reliable send mode. Unreliable Unreliable send mode."
  },
  "api/Riptide.NonStaticHandlerException.html": {
    "href": "api/Riptide.NonStaticHandlerException.html",
    "title": "NonStaticHandlerException Class | Riptide Docs",
    "keywords": "NonStaticHandlerException Class Namespace : Riptide Assembly : RiptideNetworking.dll The exception that is thrown when a method with a MessageHandlerAttribute is not marked as static . <!--h5 id=\"Riptide_NonStaticHandlerException_syntax\">Syntax</h5--> public class NonStaticHandlerException : Exception Inheritance Object NonStaticHandlerException Constructors | Improve this Doc View Source NonStaticHandlerException() Initializes a new NonStaticHandlerException instance. <!--h5 class=\"decalaration\">Declaration</h5--> public NonStaticHandlerException() | Improve this Doc View Source NonStaticHandlerException(String) Initializes a new NonStaticHandlerException instance with a specified error message. <!--h5 class=\"decalaration\">Declaration</h5--> public NonStaticHandlerException(string message) Parameters Type Name Description String message The error message that explains the reason for the exception. | Improve this Doc View Source NonStaticHandlerException(String, Exception) Initializes a new NonStaticHandlerException instance with a specified error message and a reference to the inner exception that is the cause of this exception. <!--h5 class=\"decalaration\">Declaration</h5--> public NonStaticHandlerException(string message, Exception inner) Parameters Type Name Description String message The error message that explains the reason for the exception. Exception inner The exception that is the cause of the current exception. If inner is not a null reference, the current exception is raised in a catch block that handles the inner exception. | Improve this Doc View Source NonStaticHandlerException(Type, String) Initializes a new NonStaticHandlerException instance and constructs an error message from the given information. <!--h5 class=\"decalaration\">Declaration</h5--> public NonStaticHandlerException(Type declaringType, string handlerMethodName) Parameters Type Name Description Type declaringType The type containing the handler method. String handlerMethodName The name of the handler method. Fields | Improve this Doc View Source DeclaringType The type containing the handler method. <!--h5 class=\"decalaration\">Declaration</h5--> public readonly Type DeclaringType Field Value Type Description Type | Improve this Doc View Source HandlerMethodName The name of the handler method. <!--h5 class=\"decalaration\">Declaration</h5--> public readonly string HandlerMethodName Field Value Type Description String"
  },
  "api/Riptide.Peer.html": {
    "href": "api/Riptide.Peer.html",
    "title": "Peer Class | Riptide Docs",
    "keywords": "Peer Class Namespace : Riptide Assembly : RiptideNetworking.dll Provides base functionality for Server and Client . <!--h5 id=\"Riptide_Peer_syntax\">Syntax</h5--> public abstract class Peer : object Inheritance Object Peer Client Server Constructors | Improve this Doc View Source Peer(String) Initializes the peer. <!--h5 class=\"decalaration\">Declaration</h5--> public Peer(string logName) Parameters Type Name Description String logName The name to use when logging messages via RiptideLogger . Fields | Improve this Doc View Source CRCustom The text to log when the connection failed due to Custom . <!--h5 class=\"decalaration\">Declaration</h5--> protected const string CRCustom = null Field Value Type Description String | Improve this Doc View Source CRNoConnection The text to log when the connection failed due to NoConnection . <!--h5 class=\"decalaration\">Declaration</h5--> protected const string CRNoConnection = null Field Value Type Description String | Improve this Doc View Source CRRejected The text to log when the connection failed due to Rejected . <!--h5 class=\"decalaration\">Declaration</h5--> protected const string CRRejected = null Field Value Type Description String | Improve this Doc View Source CRServerFull The text to log when the connection failed due to ServerFull . <!--h5 class=\"decalaration\">Declaration</h5--> protected const string CRServerFull = null Field Value Type Description String | Improve this Doc View Source DCDisconnected The text to log when disconnected due to Disconnected . <!--h5 class=\"decalaration\">Declaration</h5--> protected const string DCDisconnected = null Field Value Type Description String | Improve this Doc View Source DCKicked The text to log when disconnected due to Kicked . <!--h5 class=\"decalaration\">Declaration</h5--> protected const string DCKicked = null Field Value Type Description String | Improve this Doc View Source DCNeverConnected The text to log when disconnected due to NeverConnected . <!--h5 class=\"decalaration\">Declaration</h5--> protected const string DCNeverConnected = null Field Value Type Description String | Improve this Doc View Source DCServerStopped The text to log when disconnected due to ServerStopped . <!--h5 class=\"decalaration\">Declaration</h5--> protected const string DCServerStopped = null Field Value Type Description String | Improve this Doc View Source DCTimedOut The text to log when disconnected due to TimedOut . <!--h5 class=\"decalaration\">Declaration</h5--> protected const string DCTimedOut = null Field Value Type Description String | Improve this Doc View Source DCTransportError The text to log when disconnected due to TransportError . <!--h5 class=\"decalaration\">Declaration</h5--> protected const string DCTransportError = null Field Value Type Description String | Improve this Doc View Source LogName The name to use when logging messages via RiptideLogger . <!--h5 class=\"decalaration\">Declaration</h5--> public readonly string LogName Field Value Type Description String | Improve this Doc View Source UnknownReason The text to log when disconnected or rejected due to an unknown reason. <!--h5 class=\"decalaration\">Declaration</h5--> protected const string UnknownReason = null Field Value Type Description String Properties | Improve this Doc View Source HeartbeatInterval The interval (in milliseconds) at which to send and expect heartbeats to be received. <!--h5 class=\"decalaration\">Declaration</h5--> public ushort HeartbeatInterval { get; set; } Property Value Type Description UInt16 Remarks Changes to this value will only take effect after the next heartbeat is executed. | Improve this Doc View Source TimeoutTime The time (in milliseconds) after which to disconnect if no heartbeats are received. <!--h5 class=\"decalaration\">Declaration</h5--> public ushort TimeoutTime { get; set; } Property Value Type Description UInt16 Methods | Improve this Doc View Source CreateMessageHandlersDictionary(Byte) Builds a dictionary of message IDs and their corresponding message handler methods. <!--h5 class=\"decalaration\">Declaration</h5--> protected abstract void CreateMessageHandlersDictionary(byte messageHandlerGroupId) Parameters Type Name Description Byte messageHandlerGroupId The ID of the group of message handler methods to include in the dictionary. | Improve this Doc View Source DecreaseActiveCount() Decreases Riptide.Peer.ActiveCount . For use when a Server or Client is stopped. <!--h5 class=\"decalaration\">Declaration</h5--> protected static void DecreaseActiveCount() | Improve this Doc View Source FindMessageHandlers() Retrieves methods marked with MessageHandlerAttribute . <!--h5 class=\"decalaration\">Declaration</h5--> protected MethodInfo[] FindMessageHandlers() Returns Type Description MethodInfo [] An array containing message handler methods. | Improve this Doc View Source Handle(Message, MessageHeader, Connection) Handles a message. <!--h5 class=\"decalaration\">Declaration</h5--> protected abstract void Handle(Message message, MessageHeader header, Connection connection) Parameters Type Name Description Message message The message to handle. MessageHeader header The message's header type. Connection connection The connection which the message was received on. | Improve this Doc View Source HandleData(Object, DataReceivedEventArgs) Handles data received by the transport. <!--h5 class=\"decalaration\">Declaration</h5--> protected void HandleData(object _, DataReceivedEventArgs e) Parameters Type Name Description Object _ DataReceivedEventArgs e | Improve this Doc View Source HandleMessages() Handles all queued messages. <!--h5 class=\"decalaration\">Declaration</h5--> protected void HandleMessages() | Improve this Doc View Source IncreaseActiveCount() Increases Riptide.Peer.ActiveCount . For use when a new Server or Client is started. <!--h5 class=\"decalaration\">Declaration</h5--> protected static void IncreaseActiveCount() | Improve this Doc View Source StartTime() Starts tracking how much time has passed. <!--h5 class=\"decalaration\">Declaration</h5--> protected void StartTime() | Improve this Doc View Source StopTime() Stops tracking how much time has passed. <!--h5 class=\"decalaration\">Declaration</h5--> protected void StopTime() | Improve this Doc View Source Update() Handles any received messages and invokes any delayed events which need to be invoked. <!--h5 class=\"decalaration\">Declaration</h5--> public virtual void Update()"
  },
  "api/Riptide.RejectReason.html": {
    "href": "api/Riptide.RejectReason.html",
    "title": "RejectReason Enum | Riptide Docs",
    "keywords": "RejectReason Enum Namespace : Riptide Assembly : RiptideNetworking.dll The reason the connection attempt was rejected. <!--h5 id=\"Riptide_RejectReason_syntax\">Syntax</h5--> public enum RejectReason : byte Fields Name Description AlreadyConnected The client is already connected. Custom The connection attempt was rejected and custom data may have been included with the rejection message. NoConnection No response was received from the server (because the client has no internet connection, the server is offline, no server is listening on the target endpoint, etc.). Pending A connection attempt is already pending. Rejected The connection attempt was rejected. ServerFull The server is full."
  },
  "api/Riptide.Server.ConnectionAttemptHandler.html": {
    "href": "api/Riptide.Server.ConnectionAttemptHandler.html",
    "title": "Server.ConnectionAttemptHandler Delegate | Riptide Docs",
    "keywords": "Server.ConnectionAttemptHandler Delegate Namespace : Riptide Assembly : RiptideNetworking.dll Encapsulates a method that determines whether or not to accept a client's connection attempt. <!--h5 id=\"Riptide_Server_ConnectionAttemptHandler_syntax\">Syntax</h5--> public delegate void ConnectionAttemptHandler(Connection pendingConnection, Message connectMessage); Parameters Type Name Description Connection pendingConnection Message connectMessage"
  },
  "api/Riptide.Server.html": {
    "href": "api/Riptide.Server.html",
    "title": "Server Class | Riptide Docs",
    "keywords": "Server Class Namespace : Riptide Assembly : RiptideNetworking.dll A server that can accept connections from Client s. <!--h5 id=\"Riptide_Server_syntax\">Syntax</h5--> public class Server : Peer Inheritance Object Peer Server Inherited Members Peer.LogName Peer.TimeoutTime Peer.HeartbeatInterval Peer.DCNeverConnected Peer.DCTransportError Peer.DCTimedOut Peer.DCKicked Peer.DCServerStopped Peer.DCDisconnected Peer.UnknownReason Peer.CRNoConnection Peer.CRServerFull Peer.CRRejected Peer.CRCustom Peer.FindMessageHandlers() Peer.StartTime() Peer.StopTime() Peer.HandleMessages() Peer.HandleData(Object, DataReceivedEventArgs) Peer.IncreaseActiveCount() Peer.DecreaseActiveCount() Constructors | Improve this Doc View Source Server(IServer, String) Handles initial setup. <!--h5 class=\"decalaration\">Declaration</h5--> public Server(IServer transport, string logName = \"SERVER\") Parameters Type Name Description IServer transport The transport to use for sending and receiving data. String logName The name to use when logging messages via RiptideLogger . | Improve this Doc View Source Server(String) Handles initial setup using the built-in UDP transport. <!--h5 class=\"decalaration\">Declaration</h5--> public Server(string logName = \"SERVER\") Parameters Type Name Description String logName The name to use when logging messages via RiptideLogger . Fields | Improve this Doc View Source HandleConnection An optional method which determines whether or not to accept a client's connection attempt. <!--h5 class=\"decalaration\">Declaration</h5--> public Server.ConnectionAttemptHandler HandleConnection Field Value Type Description Server.ConnectionAttemptHandler Remarks The Connection parameter is the pending connection and the Message parameter is a message containing any additional data the client included with the connection attempt. | Improve this Doc View Source RelayFilter Stores which message IDs have auto relaying enabled. Relaying is disabled entirely when this is null . <!--h5 class=\"decalaration\">Declaration</h5--> public MessageRelayFilter RelayFilter Field Value Type Description MessageRelayFilter Properties | Improve this Doc View Source ClientCount The number of currently connected clients. <!--h5 class=\"decalaration\">Declaration</h5--> public int ClientCount { get; } Property Value Type Description Int32 | Improve this Doc View Source Clients An array of all the currently connected clients. <!--h5 class=\"decalaration\">Declaration</h5--> public Connection[] Clients { get; } Property Value Type Description Connection [] Remarks The position of each Connection instance in the array does not correspond to that client's numeric ID (except by coincidence). | Improve this Doc View Source IsRunning Whether or not the server is currently running. <!--h5 class=\"decalaration\">Declaration</h5--> public bool IsRunning { get; } Property Value Type Description Boolean | Improve this Doc View Source MaxClientCount The maximum number of concurrent connections. <!--h5 class=\"decalaration\">Declaration</h5--> public ushort MaxClientCount { get; } Property Value Type Description UInt16 | Improve this Doc View Source Port The local port that the server is running on. <!--h5 class=\"decalaration\">Declaration</h5--> public ushort Port { get; } Property Value Type Description UInt16 Methods | Improve this Doc View Source Accept(Connection) Accepts the given pending connection. <!--h5 class=\"decalaration\">Declaration</h5--> public void Accept(Connection connection) Parameters Type Name Description Connection connection The connection to accept. | Improve this Doc View Source ChangeTransport(IServer) Stops the server if it's running and swaps out the transport it's using. <!--h5 class=\"decalaration\">Declaration</h5--> public void ChangeTransport(IServer newTransport) Parameters Type Name Description IServer newTransport The new underlying transport server to use for sending and receiving data. Remarks This method does not automatically restart the server. To continue accepting connections, Start(UInt16, UInt16, Byte) must be called again. | Improve this Doc View Source CreateMessageHandlersDictionary(Byte) Builds a dictionary of message IDs and their corresponding message handler methods. <!--h5 class=\"decalaration\">Declaration</h5--> protected override void CreateMessageHandlersDictionary(byte messageHandlerGroupId) Parameters Type Name Description Byte messageHandlerGroupId The ID of the group of message handler methods to include in the dictionary. Overrides Peer.CreateMessageHandlersDictionary(Byte) | Improve this Doc View Source DisconnectClient(Connection, Message) Disconnects the given client. <!--h5 class=\"decalaration\">Declaration</h5--> public void DisconnectClient(Connection client, Message message = null) Parameters Type Name Description Connection client The client to disconnect. Message message Data that should be sent to the client being disconnected. Use Create() to get an empty message instance. | Improve this Doc View Source DisconnectClient(UInt16, Message) Disconnects a specific client. <!--h5 class=\"decalaration\">Declaration</h5--> public void DisconnectClient(ushort id, Message message = null) Parameters Type Name Description UInt16 id The numeric ID of the client to disconnect. Message message Data that should be sent to the client being disconnected. Use Create() to get an empty message instance. | Improve this Doc View Source Handle(Message, MessageHeader, Connection) Handles a message. <!--h5 class=\"decalaration\">Declaration</h5--> protected override void Handle(Message message, MessageHeader header, Connection connection) Parameters Type Name Description Message message The message to handle. MessageHeader header The message's header type. Connection connection The connection which the message was received on. Overrides Peer.Handle(Message, MessageHeader, Connection) | Improve this Doc View Source OnClientConnected(Connection) Invokes the ClientConnected event. <!--h5 class=\"decalaration\">Declaration</h5--> protected virtual void OnClientConnected(Connection client) Parameters Type Name Description Connection client The newly connected client. | Improve this Doc View Source OnClientDisconnected(Connection, DisconnectReason) Invokes the ClientDisconnected event. <!--h5 class=\"decalaration\">Declaration</h5--> protected virtual void OnClientDisconnected(Connection connection, DisconnectReason reason) Parameters Type Name Description Connection connection The client that disconnected. DisconnectReason reason The reason for the disconnection. | Improve this Doc View Source OnMessageReceived(Message, Connection) Invokes the MessageReceived event and initiates handling of the received message. <!--h5 class=\"decalaration\">Declaration</h5--> protected virtual void OnMessageReceived(Message message, Connection fromConnection) Parameters Type Name Description Message message The received message. Connection fromConnection The client from which the message was received. | Improve this Doc View Source Reject(Connection, Message) Rejects the given pending connection. <!--h5 class=\"decalaration\">Declaration</h5--> public void Reject(Connection connection, Message message = null) Parameters Type Name Description Connection connection The connection to reject. Message message Data that should be sent to the client being rejected. Use Create() to get an empty message instance. | Improve this Doc View Source Send(Message, Connection, Boolean) Sends a message to a given client. <!--h5 class=\"decalaration\">Declaration</h5--> public void Send(Message message, Connection toClient, bool shouldRelease = true) Parameters Type Name Description Message message The message to send. Connection toClient The client to send the message to. Boolean shouldRelease Whether or not to return the message to the pool after it is sent. Remarks | Improve this Doc View Source Send(Message, UInt16, Boolean) Sends a message to a given client. <!--h5 class=\"decalaration\">Declaration</h5--> public void Send(Message message, ushort toClient, bool shouldRelease = true) Parameters Type Name Description Message message The message to send. UInt16 toClient The numeric ID of the client to send the message to. Boolean shouldRelease Whether or not to return the message to the pool after it is sent. Remarks | Improve this Doc View Source SendToAll(Message, Boolean) Sends a message to all connected clients. <!--h5 class=\"decalaration\">Declaration</h5--> public void SendToAll(Message message, bool shouldRelease = true) Parameters Type Name Description Message message The message to send. Boolean shouldRelease Whether or not to return the message to the pool after it is sent. Remarks | Improve this Doc View Source SendToAll(Message, UInt16, Boolean) Sends a message to all connected clients except the given one. <!--h5 class=\"decalaration\">Declaration</h5--> public void SendToAll(Message message, ushort exceptToClientId, bool shouldRelease = true) Parameters Type Name Description Message message The message to send. UInt16 exceptToClientId The numeric ID of the client to not send the message to. Boolean shouldRelease Whether or not to return the message to the pool after it is sent. Remarks | Improve this Doc View Source Start(UInt16, UInt16, Byte) Starts the server. <!--h5 class=\"decalaration\">Declaration</h5--> public void Start(ushort port, ushort maxClientCount, byte messageHandlerGroupId = null) Parameters Type Name Description UInt16 port The local port on which to start the server. UInt16 maxClientCount The maximum number of concurrent connections to allow. Byte messageHandlerGroupId The ID of the group of message handler methods to use when building Riptide.Server.messageHandlers . | Improve this Doc View Source Stop() Stops the server. <!--h5 class=\"decalaration\">Declaration</h5--> public void Stop() | Improve this Doc View Source TryGetClient(UInt16, out Connection) Retrieves the client with the given ID, if a client with that ID is currently connected. <!--h5 class=\"decalaration\">Declaration</h5--> public bool TryGetClient(ushort id, out Connection client) Parameters Type Name Description UInt16 id The ID of the client to retrieve. Connection client The retrieved client. Returns Type Description Boolean true if a client with the given ID was connected; otherwise false . | Improve this Doc View Source Update() Handles any received messages and invokes any delayed events which need to be invoked. <!--h5 class=\"decalaration\">Declaration</h5--> public override void Update() Overrides Peer.Update() Events | Improve this Doc View Source ClientConnected Invoked when a client connects. <!--h5 class=\"decalaration\">Declaration</h5--> public event EventHandler<ServerConnectedEventArgs> ClientConnected Event Type Type Description EventHandler < ServerConnectedEventArgs > | Improve this Doc View Source ClientDisconnected Invoked when a client disconnects. <!--h5 class=\"decalaration\">Declaration</h5--> public event EventHandler<ServerDisconnectedEventArgs> ClientDisconnected Event Type Type Description EventHandler < ServerDisconnectedEventArgs > | Improve this Doc View Source MessageReceived Invoked when a message is received. <!--h5 class=\"decalaration\">Declaration</h5--> public event EventHandler<MessageReceivedEventArgs> MessageReceived Event Type Type Description EventHandler < MessageReceivedEventArgs >"
  },
  "api/Riptide.Server.MessageHandler.html": {
    "href": "api/Riptide.Server.MessageHandler.html",
    "title": "Server.MessageHandler Delegate | Riptide Docs",
    "keywords": "Server.MessageHandler Delegate Namespace : Riptide Assembly : RiptideNetworking.dll Encapsulates a method that handles a message from a client. <!--h5 id=\"Riptide_Server_MessageHandler_syntax\">Syntax</h5--> public delegate void MessageHandler(ushort fromClientId, Message message); Parameters Type Name Description UInt16 fromClientId The numeric ID of the client from whom the message was received. Message message The message that was received."
  },
  "api/Riptide.ServerConnectedEventArgs.html": {
    "href": "api/Riptide.ServerConnectedEventArgs.html",
    "title": "ServerConnectedEventArgs Class | Riptide Docs",
    "keywords": "ServerConnectedEventArgs Class Namespace : Riptide Assembly : RiptideNetworking.dll Contains event data for when a client connects to the server. <!--h5 id=\"Riptide_ServerConnectedEventArgs_syntax\">Syntax</h5--> public class ServerConnectedEventArgs : EventArgs Inheritance Object ServerConnectedEventArgs Constructors | Improve this Doc View Source ServerConnectedEventArgs(Connection) Initializes event data. <!--h5 class=\"decalaration\">Declaration</h5--> public ServerConnectedEventArgs(Connection client) Parameters Type Name Description Connection client The newly connected client. Fields | Improve this Doc View Source Client The newly connected client. <!--h5 class=\"decalaration\">Declaration</h5--> public readonly Connection Client Field Value Type Description Connection"
  },
  "api/Riptide.ServerDisconnectedEventArgs.html": {
    "href": "api/Riptide.ServerDisconnectedEventArgs.html",
    "title": "ServerDisconnectedEventArgs Class | Riptide Docs",
    "keywords": "ServerDisconnectedEventArgs Class Namespace : Riptide Assembly : RiptideNetworking.dll Contains event data for when a client disconnects from the server. <!--h5 id=\"Riptide_ServerDisconnectedEventArgs_syntax\">Syntax</h5--> public class ServerDisconnectedEventArgs : EventArgs Inheritance Object ServerDisconnectedEventArgs Constructors | Improve this Doc View Source ServerDisconnectedEventArgs(Connection, DisconnectReason) Initializes event data. <!--h5 class=\"decalaration\">Declaration</h5--> public ServerDisconnectedEventArgs(Connection client, DisconnectReason reason) Parameters Type Name Description Connection client The client that disconnected. DisconnectReason reason The reason for the disconnection. Fields | Improve this Doc View Source Client The client that disconnected. <!--h5 class=\"decalaration\">Declaration</h5--> public readonly Connection Client Field Value Type Description Connection | Improve this Doc View Source Reason The reason for the disconnection. <!--h5 class=\"decalaration\">Declaration</h5--> public readonly DisconnectReason Reason Field Value Type Description DisconnectReason"
  },
  "api/Riptide.Transports.ConnectedEventArgs.html": {
    "href": "api/Riptide.Transports.ConnectedEventArgs.html",
    "title": "ConnectedEventArgs Class | Riptide Docs",
    "keywords": "ConnectedEventArgs Class Namespace : Riptide.Transports Assembly : RiptideNetworking.dll Contains event data for when a server's transport successfully establishes a connection to a client. <!--h5 id=\"Riptide_Transports_ConnectedEventArgs_syntax\">Syntax</h5--> public class ConnectedEventArgs : object Inheritance Object ConnectedEventArgs Constructors | Improve this Doc View Source ConnectedEventArgs(Connection) Initializes event data. <!--h5 class=\"decalaration\">Declaration</h5--> public ConnectedEventArgs(Connection connection) Parameters Type Name Description Connection connection The newly established connection. Fields | Improve this Doc View Source Connection The newly established connection. <!--h5 class=\"decalaration\">Declaration</h5--> public readonly Connection Connection Field Value Type Description Connection"
  },
  "api/Riptide.Transports.DataReceivedEventArgs.html": {
    "href": "api/Riptide.Transports.DataReceivedEventArgs.html",
    "title": "DataReceivedEventArgs Class | Riptide Docs",
    "keywords": "DataReceivedEventArgs Class Namespace : Riptide.Transports Assembly : RiptideNetworking.dll Contains event data for when a server's or client's transport receives data. <!--h5 id=\"Riptide_Transports_DataReceivedEventArgs_syntax\">Syntax</h5--> public class DataReceivedEventArgs : object Inheritance Object DataReceivedEventArgs Constructors | Improve this Doc View Source DataReceivedEventArgs(Byte[], Int32, Connection) Initializes event data. <!--h5 class=\"decalaration\">Declaration</h5--> public DataReceivedEventArgs(byte[] dataBuffer, int amount, Connection fromConnection) Parameters Type Name Description Byte [] dataBuffer An array containing the received data. Int32 amount The number of bytes that were received. Connection fromConnection The connection which the data was received from. Fields | Improve this Doc View Source Amount The number of bytes that were received. <!--h5 class=\"decalaration\">Declaration</h5--> public readonly int Amount Field Value Type Description Int32 | Improve this Doc View Source DataBuffer An array containing the received data. <!--h5 class=\"decalaration\">Declaration</h5--> public readonly byte[] DataBuffer Field Value Type Description Byte [] | Improve this Doc View Source FromConnection The connection which the data was received from. <!--h5 class=\"decalaration\">Declaration</h5--> public readonly Connection FromConnection Field Value Type Description Connection"
  },
  "api/Riptide.Transports.DisconnectedEventArgs.html": {
    "href": "api/Riptide.Transports.DisconnectedEventArgs.html",
    "title": "DisconnectedEventArgs Class | Riptide Docs",
    "keywords": "DisconnectedEventArgs Class Namespace : Riptide.Transports Assembly : RiptideNetworking.dll Contains event data for when a server's or client's transport initiates or detects a disconnection. <!--h5 id=\"Riptide_Transports_DisconnectedEventArgs_syntax\">Syntax</h5--> public class DisconnectedEventArgs : object Inheritance Object DisconnectedEventArgs Constructors | Improve this Doc View Source DisconnectedEventArgs(Connection, DisconnectReason) Initializes event data. <!--h5 class=\"decalaration\">Declaration</h5--> public DisconnectedEventArgs(Connection connection, DisconnectReason reason) Parameters Type Name Description Connection connection The closed connection. DisconnectReason reason The reason for the disconnection. Fields | Improve this Doc View Source Connection The closed connection. <!--h5 class=\"decalaration\">Declaration</h5--> public readonly Connection Connection Field Value Type Description Connection | Improve this Doc View Source Reason The reason for the disconnection. <!--h5 class=\"decalaration\">Declaration</h5--> public readonly DisconnectReason Reason Field Value Type Description DisconnectReason"
  },
  "api/Riptide.Transports.html": {
    "href": "api/Riptide.Transports.html",
    "title": "Riptide.Transports Namespace | Riptide Docs",
    "keywords": "Riptide.Transports Namespace Classes ConnectedEventArgs Contains event data for when a server's transport successfully establishes a connection to a client. DataReceivedEventArgs Contains event data for when a server's or client's transport receives data. DisconnectedEventArgs Contains event data for when a server's or client's transport initiates or detects a disconnection. Interfaces IClient Defines methods, properties, and events which every transport's client must implement. IPeer Defines methods, properties, and events which every transport's server and client must implement. IServer Defines methods, properties, and events which every transport's server must implement. Enums MessageHeader The header type of a Message ."
  },
  "api/Riptide.Transports.IClient.html": {
    "href": "api/Riptide.Transports.IClient.html",
    "title": "IClient Interface | Riptide Docs",
    "keywords": "IClient Interface Namespace : Riptide.Transports Assembly : RiptideNetworking.dll Defines methods, properties, and events which every transport's client must implement. <!--h5 id=\"Riptide_Transports_IClient_syntax\">Syntax</h5--> public interface IClient : IPeer Inherited Members IPeer.DataReceived IPeer.Disconnected IPeer.Poll() Methods | Improve this Doc View Source Connect(String, out Connection, out String) Starts the transport and attempts to connect to the given host address. <!--h5 class=\"decalaration\">Declaration</h5--> bool Connect(string hostAddress, out Connection connection, out string connectError) Parameters Type Name Description String hostAddress The host address to connect to. Connection connection The pending connection. null if an issue occurred. String connectError The error message associated with the issue that occurred, if any. Returns Type Description Boolean true if a connection attempt will be made. false if an issue occurred (such as hostAddress being in an invalid format) and a connection attempt will not be made. | Improve this Doc View Source Disconnect() Closes the connection to the server. <!--h5 class=\"decalaration\">Declaration</h5--> void Disconnect() Events | Improve this Doc View Source Connected Invoked when a connection is established at the transport level. <!--h5 class=\"decalaration\">Declaration</h5--> event EventHandler Connected Event Type Type Description EventHandler | Improve this Doc View Source ConnectionFailed Invoked when a connection attempt fails at the transport level. <!--h5 class=\"decalaration\">Declaration</h5--> event EventHandler ConnectionFailed Event Type Type Description EventHandler"
  },
  "api/Riptide.Transports.IPeer.html": {
    "href": "api/Riptide.Transports.IPeer.html",
    "title": "IPeer Interface | Riptide Docs",
    "keywords": "IPeer Interface Namespace : Riptide.Transports Assembly : RiptideNetworking.dll Defines methods, properties, and events which every transport's server and client must implement. <!--h5 id=\"Riptide_Transports_IPeer_syntax\">Syntax</h5--> public interface IPeer Methods | Improve this Doc View Source Poll() Initiates handling of any received messages. <!--h5 class=\"decalaration\">Declaration</h5--> void Poll() Events | Improve this Doc View Source DataReceived Invoked when data is received by the transport. <!--h5 class=\"decalaration\">Declaration</h5--> event EventHandler<DataReceivedEventArgs> DataReceived Event Type Type Description EventHandler < DataReceivedEventArgs > | Improve this Doc View Source Disconnected Invoked when a disconnection is initiated or detected by the transport. <!--h5 class=\"decalaration\">Declaration</h5--> event EventHandler<DisconnectedEventArgs> Disconnected Event Type Type Description EventHandler < DisconnectedEventArgs >"
  },
  "api/Riptide.Transports.IServer.html": {
    "href": "api/Riptide.Transports.IServer.html",
    "title": "IServer Interface | Riptide Docs",
    "keywords": "IServer Interface Namespace : Riptide.Transports Assembly : RiptideNetworking.dll Defines methods, properties, and events which every transport's server must implement. <!--h5 id=\"Riptide_Transports_IServer_syntax\">Syntax</h5--> public interface IServer : IPeer Inherited Members IPeer.DataReceived IPeer.Disconnected IPeer.Poll() Properties | Improve this Doc View Source Port The local port that the server is running on. <!--h5 class=\"decalaration\">Declaration</h5--> ushort Port { get; } Property Value Type Description UInt16 Methods | Improve this Doc View Source Close(Connection) Closes an active connection. <!--h5 class=\"decalaration\">Declaration</h5--> void Close(Connection connection) Parameters Type Name Description Connection connection The connection to close. | Improve this Doc View Source Shutdown() Closes all existing connections and stops listening for new connections. <!--h5 class=\"decalaration\">Declaration</h5--> void Shutdown() | Improve this Doc View Source Start(UInt16) Starts the transport and begins listening for incoming connections. <!--h5 class=\"decalaration\">Declaration</h5--> void Start(ushort port) Parameters Type Name Description UInt16 port The local port on which to listen for connections. Events | Improve this Doc View Source Connected Invoked when a connection is established at the transport level. <!--h5 class=\"decalaration\">Declaration</h5--> event EventHandler<ConnectedEventArgs> Connected Event Type Type Description EventHandler < ConnectedEventArgs >"
  },
  "api/Riptide.Transports.MessageHeader.html": {
    "href": "api/Riptide.Transports.MessageHeader.html",
    "title": "MessageHeader Enum | Riptide Docs",
    "keywords": "MessageHeader Enum Namespace : Riptide.Transports Assembly : RiptideNetworking.dll The header type of a Message . <!--h5 id=\"Riptide_Transports_MessageHeader_syntax\">Syntax</h5--> public enum MessageHeader : byte Fields Name Description Ack An internal unreliable ack message. AckExtra An internal unreliable ack message, used when acknowledging a sequence ID other than the last received one. ClientConnected An internal reliable client connected message. ClientDisconnected An internal reliable client disconnected message. Connect An internal unreliable connect message. Disconnect An internal unreliable disconnect message. Heartbeat An internal unreliable heartbeat message. Reject An internal unreliable connection rejection message. Reliable A reliable user message. Unreliable An unreliable user message. Welcome An internal reliable welcome message."
  },
  "api/Riptide.Transports.Udp.html": {
    "href": "api/Riptide.Transports.Udp.html",
    "title": "Riptide.Transports.Udp Namespace | Riptide Docs",
    "keywords": "Riptide.Transports.Udp Namespace Classes UdpClient A client which can connect to a UdpServer . UdpConnection Represents a connection to a UdpServer or UdpClient . UdpPeer Provides base send & receive functionality for UdpServer and UdpClient . UdpServer A server which can accept connections from UdpClient s. Enums SocketMode The kind of socket to create."
  },
  "api/Riptide.Transports.Udp.SocketMode.html": {
    "href": "api/Riptide.Transports.Udp.SocketMode.html",
    "title": "SocketMode Enum | Riptide Docs",
    "keywords": "SocketMode Enum Namespace : Riptide.Transports.Udp Assembly : RiptideNetworking.dll The kind of socket to create. <!--h5 id=\"Riptide_Transports_Udp_SocketMode_syntax\">Syntax</h5--> public enum SocketMode : int Fields Name Description Both Dual-mode. Works with both IPv4 and IPv6. IPv4Only IPv4 only mode. IPv6Only IPv6 only mode."
  },
  "api/Riptide.Transports.Udp.UdpClient.html": {
    "href": "api/Riptide.Transports.Udp.UdpClient.html",
    "title": "UdpClient Class | Riptide Docs",
    "keywords": "UdpClient Class Namespace : Riptide.Transports.Udp Assembly : RiptideNetworking.dll A client which can connect to a UdpServer . <!--h5 id=\"Riptide_Transports_Udp_UdpClient_syntax\">Syntax</h5--> public class UdpClient : UdpPeer, IClient, IPeer Inheritance Object UdpPeer UdpClient Implements IClient IPeer Inherited Members UdpPeer.Disconnected UdpPeer.DefaultSocketBufferSize UdpPeer.mode UdpPeer.Poll() UdpPeer.OpenSocket(UInt16) UdpPeer.CloseSocket() UdpPeer.OnDisconnected(Connection, DisconnectReason) Constructors | Improve this Doc View Source UdpClient(SocketMode, Int32) Initializes the transport. <!--h5 class=\"decalaration\">Declaration</h5--> public UdpClient(SocketMode mode = SocketMode.Both, int socketBufferSize = null) Parameters Type Name Description SocketMode mode Whether to create an IPv4 only, IPv6 only, or dual-mode socket. Int32 socketBufferSize How big the socket's send and receive buffers should be. Methods | Improve this Doc View Source Connect(String, out Connection, out String) Starts the transport and attempts to connect to the given host address. <!--h5 class=\"decalaration\">Declaration</h5--> public bool Connect(string hostAddress, out Connection connection, out string connectError) Parameters Type Name Description String hostAddress The host address to connect to. Connection connection The pending connection. null if an issue occurred. String connectError The error message associated with the issue that occurred, if any. Returns Type Description Boolean true if a connection attempt will be made. false if an issue occurred (such as hostAddress being in an invalid format) and a connection attempt will not be made. Remarks Expects the host address to consist of an IP and port, separated by a colon. For example: 127.0.0.1:7777 . | Improve this Doc View Source Disconnect() Closes the connection to the server. <!--h5 class=\"decalaration\">Declaration</h5--> public void Disconnect() | Improve this Doc View Source OnConnected() Invokes the Connected event. <!--h5 class=\"decalaration\">Declaration</h5--> protected virtual void OnConnected() | Improve this Doc View Source OnConnectionFailed() Invokes the ConnectionFailed event. <!--h5 class=\"decalaration\">Declaration</h5--> protected virtual void OnConnectionFailed() | Improve this Doc View Source OnDataReceived(Byte[], Int32, IPEndPoint) Handles received data. <!--h5 class=\"decalaration\">Declaration</h5--> protected override void OnDataReceived(byte[] dataBuffer, int amount, IPEndPoint fromEndPoint) Parameters Type Name Description Byte [] dataBuffer A byte array containing the received data. Int32 amount The number of bytes in dataBuffer used by the received data. IPEndPoint fromEndPoint The endpoint from which the data was received. Overrides UdpPeer.OnDataReceived(Byte[], Int32, IPEndPoint) Events | Improve this Doc View Source Connected Invoked when a connection is established at the transport level. <!--h5 class=\"decalaration\">Declaration</h5--> public event EventHandler Connected Event Type Type Description EventHandler | Improve this Doc View Source ConnectionFailed Invoked when a connection attempt fails at the transport level. <!--h5 class=\"decalaration\">Declaration</h5--> public event EventHandler ConnectionFailed Event Type Type Description EventHandler | Improve this Doc View Source DataReceived Invoked when data is received by the transport. <!--h5 class=\"decalaration\">Declaration</h5--> public event EventHandler<DataReceivedEventArgs> DataReceived Event Type Type Description EventHandler < DataReceivedEventArgs >"
  },
  "api/Riptide.Transports.Udp.UdpConnection.html": {
    "href": "api/Riptide.Transports.Udp.UdpConnection.html",
    "title": "UdpConnection Class | Riptide Docs",
    "keywords": "UdpConnection Class Namespace : Riptide.Transports.Udp Assembly : RiptideNetworking.dll Represents a connection to a UdpServer or UdpClient . <!--h5 id=\"Riptide_Transports_Udp_UdpConnection_syntax\">Syntax</h5--> public class UdpConnection : Connection Inheritance Object Connection UdpConnection Implements IEquatable < UdpConnection > Inherited Members Connection.Id Connection.IsNotConnected Connection.IsConnecting Connection.IsPending Connection.IsConnected Connection.RTT Connection.SmoothRTT Connection.CanTimeout Connection.ResetTimeout() Fields | Improve this Doc View Source RemoteEndPoint The endpoint representing the other end of the connection. <!--h5 class=\"decalaration\">Declaration</h5--> public readonly IPEndPoint RemoteEndPoint Field Value Type Description IPEndPoint Methods | Improve this Doc View Source Equals(UdpConnection) <!--h5 class=\"decalaration\">Declaration</h5--> public bool Equals(UdpConnection other) Parameters Type Name Description UdpConnection other Returns Type Description Boolean | Improve this Doc View Source Equals(Object) <!--h5 class=\"decalaration\">Declaration</h5--> public override bool Equals(object obj) Parameters Type Name Description Object obj Returns Type Description Boolean | Improve this Doc View Source GetHashCode() <!--h5 class=\"decalaration\">Declaration</h5--> public override int GetHashCode() Returns Type Description Int32 | Improve this Doc View Source Send(Byte[], Int32) Sends data. <!--h5 class=\"decalaration\">Declaration</h5--> protected override void Send(byte[] dataBuffer, int amount) Parameters Type Name Description Byte [] dataBuffer The array containing the data. Int32 amount The number of bytes in the array which should be sent. Overrides Connection.Send(Byte[], Int32) | Improve this Doc View Source ToString() <!--h5 class=\"decalaration\">Declaration</h5--> public override string ToString() Returns Type Description String Operators | Improve this Doc View Source Equality(UdpConnection, UdpConnection) <!--h5 class=\"decalaration\">Declaration</h5--> public static bool operator ==(UdpConnection left, UdpConnection right) Parameters Type Name Description UdpConnection left UdpConnection right Returns Type Description Boolean | Improve this Doc View Source Inequality(UdpConnection, UdpConnection) <!--h5 class=\"decalaration\">Declaration</h5--> public static bool operator !=(UdpConnection left, UdpConnection right) Parameters Type Name Description UdpConnection left UdpConnection right Returns Type Description Boolean"
  },
  "api/Riptide.Transports.Udp.UdpPeer.html": {
    "href": "api/Riptide.Transports.Udp.UdpPeer.html",
    "title": "UdpPeer Class | Riptide Docs",
    "keywords": "UdpPeer Class Namespace : Riptide.Transports.Udp Assembly : RiptideNetworking.dll Provides base send & receive functionality for UdpServer and UdpClient . <!--h5 id=\"Riptide_Transports_Udp_UdpPeer_syntax\">Syntax</h5--> public abstract class UdpPeer : object Inheritance Object UdpPeer UdpClient UdpServer Constructors | Improve this Doc View Source UdpPeer(SocketMode, Int32) Initializes the transport. <!--h5 class=\"decalaration\">Declaration</h5--> protected UdpPeer(SocketMode mode, int socketBufferSize) Parameters Type Name Description SocketMode mode Whether to create an IPv4 only, IPv6 only, or dual-mode socket. Int32 socketBufferSize How big the socket's send and receive buffers should be. Fields | Improve this Doc View Source DefaultSocketBufferSize The default size used for the socket's send and receive buffers. <!--h5 class=\"decalaration\">Declaration</h5--> protected const int DefaultSocketBufferSize = null Field Value Type Description Int32 | Improve this Doc View Source mode Whether to create an IPv4 only, IPv6 only, or dual-mode socket. <!--h5 class=\"decalaration\">Declaration</h5--> protected readonly SocketMode mode Field Value Type Description SocketMode Methods | Improve this Doc View Source CloseSocket() Closes the socket and stops the transport. <!--h5 class=\"decalaration\">Declaration</h5--> protected void CloseSocket() | Improve this Doc View Source OnDataReceived(Byte[], Int32, IPEndPoint) Handles received data. <!--h5 class=\"decalaration\">Declaration</h5--> protected abstract void OnDataReceived(byte[] dataBuffer, int amount, IPEndPoint fromEndPoint) Parameters Type Name Description Byte [] dataBuffer A byte array containing the received data. Int32 amount The number of bytes in dataBuffer used by the received data. IPEndPoint fromEndPoint The endpoint from which the data was received. | Improve this Doc View Source OnDisconnected(Connection, DisconnectReason) Invokes the Disconnected event. <!--h5 class=\"decalaration\">Declaration</h5--> protected virtual void OnDisconnected(Connection connection, DisconnectReason reason) Parameters Type Name Description Connection connection The closed connection. DisconnectReason reason The reason for the disconnection. | Improve this Doc View Source OpenSocket(UInt16) Opens the socket and starts the transport. <!--h5 class=\"decalaration\">Declaration</h5--> protected void OpenSocket(ushort port = null) Parameters Type Name Description UInt16 port The port to bind the socket to. | Improve this Doc View Source Poll() Initiates handling of any received messages. <!--h5 class=\"decalaration\">Declaration</h5--> public void Poll() Events | Improve this Doc View Source Disconnected Invoked when a disconnection is initiated or detected by the transport. <!--h5 class=\"decalaration\">Declaration</h5--> public event EventHandler<DisconnectedEventArgs> Disconnected Event Type Type Description EventHandler < DisconnectedEventArgs >"
  },
  "api/Riptide.Transports.Udp.UdpServer.html": {
    "href": "api/Riptide.Transports.Udp.UdpServer.html",
    "title": "UdpServer Class | Riptide Docs",
    "keywords": "UdpServer Class Namespace : Riptide.Transports.Udp Assembly : RiptideNetworking.dll A server which can accept connections from UdpClient s. <!--h5 id=\"Riptide_Transports_Udp_UdpServer_syntax\">Syntax</h5--> public class UdpServer : UdpPeer, IServer, IPeer Inheritance Object UdpPeer UdpServer Implements IServer IPeer Inherited Members UdpPeer.Disconnected UdpPeer.DefaultSocketBufferSize UdpPeer.mode UdpPeer.Poll() UdpPeer.OpenSocket(UInt16) UdpPeer.CloseSocket() UdpPeer.OnDisconnected(Connection, DisconnectReason) Constructors | Improve this Doc View Source UdpServer(SocketMode, Int32) Initializes the transport. <!--h5 class=\"decalaration\">Declaration</h5--> public UdpServer(SocketMode mode = SocketMode.Both, int socketBufferSize = null) Parameters Type Name Description SocketMode mode Whether to create an IPv4 only, IPv6 only, or dual-mode socket. Int32 socketBufferSize How big the socket's send and receive buffers should be. Properties | Improve this Doc View Source Port The local port that the server is running on. <!--h5 class=\"decalaration\">Declaration</h5--> public ushort Port { get; } Property Value Type Description UInt16 Methods | Improve this Doc View Source Close(Connection) Closes an active connection. <!--h5 class=\"decalaration\">Declaration</h5--> public void Close(Connection connection) Parameters Type Name Description Connection connection The connection to close. | Improve this Doc View Source OnConnected(Connection) Invokes the Connected event. <!--h5 class=\"decalaration\">Declaration</h5--> protected virtual void OnConnected(Connection connection) Parameters Type Name Description Connection connection The successfully established connection. | Improve this Doc View Source OnDataReceived(Byte[], Int32, IPEndPoint) Handles received data. <!--h5 class=\"decalaration\">Declaration</h5--> protected override void OnDataReceived(byte[] dataBuffer, int amount, IPEndPoint fromEndPoint) Parameters Type Name Description Byte [] dataBuffer A byte array containing the received data. Int32 amount The number of bytes in dataBuffer used by the received data. IPEndPoint fromEndPoint The endpoint from which the data was received. Overrides UdpPeer.OnDataReceived(Byte[], Int32, IPEndPoint) | Improve this Doc View Source Shutdown() Closes all existing connections and stops listening for new connections. <!--h5 class=\"decalaration\">Declaration</h5--> public void Shutdown() | Improve this Doc View Source Start(UInt16) Starts the transport and begins listening for incoming connections. <!--h5 class=\"decalaration\">Declaration</h5--> public void Start(ushort port) Parameters Type Name Description UInt16 port The local port on which to listen for connections. Events | Improve this Doc View Source Connected Invoked when a connection is established at the transport level. <!--h5 class=\"decalaration\">Declaration</h5--> public event EventHandler<ConnectedEventArgs> Connected Event Type Type Description EventHandler < ConnectedEventArgs > | Improve this Doc View Source DataReceived Invoked when data is received by the transport. <!--h5 class=\"decalaration\">Declaration</h5--> public event EventHandler<DataReceivedEventArgs> DataReceived Event Type Type Description EventHandler < DataReceivedEventArgs >"
  },
  "api/Riptide.Utils.ActionQueue.html": {
    "href": "api/Riptide.Utils.ActionQueue.html",
    "title": "ActionQueue Class | Riptide Docs",
    "keywords": "ActionQueue Class Namespace : Riptide.Utils Assembly : RiptideNetworking.dll Provides functionality for queueing methods for later execution from a chosen thread. <!--h5 id=\"Riptide_Utils_ActionQueue_syntax\">Syntax</h5--> public class ActionQueue : object Inheritance Object ActionQueue Constructors | Improve this Doc View Source ActionQueue(String) Handles initial setup. <!--h5 class=\"decalaration\">Declaration</h5--> public ActionQueue(string logName = \"ACTION QUEUE\") Parameters Type Name Description String logName The name to use when logging messages via RiptideLogger . Fields | Improve this Doc View Source LogName The name to use when logging messages via RiptideLogger . <!--h5 class=\"decalaration\">Declaration</h5--> public readonly string LogName Field Value Type Description String Methods | Improve this Doc View Source Add(Action) Adds an action to the queue. <!--h5 class=\"decalaration\">Declaration</h5--> public void Add(Action action) Parameters Type Name Description Action action The action to be added to the queue. | Improve this Doc View Source Clear() Clears all actions in the queue without executing them. <!--h5 class=\"decalaration\">Declaration</h5--> public void Clear() | Improve this Doc View Source ExecuteAll() Executes all actions in the queue on the calling thread. <!--h5 class=\"decalaration\">Declaration</h5--> public void ExecuteAll() Remarks This method should only be called from a single thread in the application."
  },
  "api/Riptide.Utils.Converter.html": {
    "href": "api/Riptide.Utils.Converter.html",
    "title": "Converter Class | Riptide Docs",
    "keywords": "Converter Class Namespace : Riptide.Utils Assembly : RiptideNetworking.dll Provides functionality for converting bytes to various value types and vice versa. <!--h5 id=\"Riptide_Utils_Converter_syntax\">Syntax</h5--> public class Converter : object Inheritance Object Converter Methods | Improve this Doc View Source FromDouble(Double, Byte[], Int32) Converts a given to bytes and writes them into the given array. <!--h5 class=\"decalaration\">Declaration</h5--> public static void FromDouble(double value, byte[] array, int startIndex) Parameters Type Name Description Double value The to convert. Byte [] array The array to write the bytes into. Int32 startIndex The position in the array at which to write the bytes. | Improve this Doc View Source FromFloat(Single, Byte[], Int32) Converts a given to bytes and writes them into the given array. <!--h5 class=\"decalaration\">Declaration</h5--> public static void FromFloat(float value, byte[] array, int startIndex) Parameters Type Name Description Single value The to convert. Byte [] array The array to write the bytes into. Int32 startIndex The position in the array at which to write the bytes. | Improve this Doc View Source FromInt(Int32, Byte[], Int32) Converts a given to bytes and writes them into the given array. <!--h5 class=\"decalaration\">Declaration</h5--> public static void FromInt(int value, byte[] array, int startIndex) Parameters Type Name Description Int32 value The to convert. Byte [] array The array to write the bytes into. Int32 startIndex The position in the array at which to write the bytes. | Improve this Doc View Source FromLong(Int64, Byte[], Int32) Converts a given to bytes and writes them into the given array. <!--h5 class=\"decalaration\">Declaration</h5--> public static void FromLong(long value, byte[] array, int startIndex) Parameters Type Name Description Int64 value The to convert. Byte [] array The array to write the bytes into. Int32 startIndex The position in the array at which to write the bytes. | Improve this Doc View Source FromShort(Int16, Byte[], Int32) Converts a given to bytes and writes them into the given array. <!--h5 class=\"decalaration\">Declaration</h5--> public static void FromShort(short value, byte[] array, int startIndex) Parameters Type Name Description Int16 value The to convert. Byte [] array The array to write the bytes into. Int32 startIndex The position in the array at which to write the bytes. | Improve this Doc View Source FromUInt(UInt32, Byte[], Int32) Converts a given to bytes and writes them into the given array. <!--h5 class=\"decalaration\">Declaration</h5--> public static void FromUInt(uint value, byte[] array, int startIndex) Parameters Type Name Description UInt32 value The to convert. Byte [] array The array to write the bytes into. Int32 startIndex The position in the array at which to write the bytes. | Improve this Doc View Source FromULong(UInt64, Byte[], Int32) Converts a given to bytes and writes them into the given array. <!--h5 class=\"decalaration\">Declaration</h5--> public static void FromULong(ulong value, byte[] array, int startIndex) Parameters Type Name Description UInt64 value The to convert. Byte [] array The array to write the bytes into. Int32 startIndex The position in the array at which to write the bytes. | Improve this Doc View Source FromUShort(UInt16, Byte[], Int32) Converts a given to bytes and writes them into the given array. <!--h5 class=\"decalaration\">Declaration</h5--> public static void FromUShort(ushort value, byte[] array, int startIndex) Parameters Type Name Description UInt16 value The to convert. Byte [] array The array to write the bytes into. Int32 startIndex The position in the array at which to write the bytes. | Improve this Doc View Source ToDouble(Byte[], Int32) Converts the 8 bytes in the array at startIndex to a . <!--h5 class=\"decalaration\">Declaration</h5--> public static double ToDouble(byte[] array, int startIndex) Parameters Type Name Description Byte [] array The array to read the bytes from. Int32 startIndex The position in the array at which to read the bytes. Returns Type Description Double The converted . | Improve this Doc View Source ToFloat(Byte[], Int32) Converts the 4 bytes in the array at startIndex to a . <!--h5 class=\"decalaration\">Declaration</h5--> public static float ToFloat(byte[] array, int startIndex) Parameters Type Name Description Byte [] array The array to read the bytes from. Int32 startIndex The position in the array at which to read the bytes. Returns Type Description Single The converted . | Improve this Doc View Source ToInt(Byte[], Int32) Converts the 4 bytes in the array at startIndex to a . <!--h5 class=\"decalaration\">Declaration</h5--> public static int ToInt(byte[] array, int startIndex) Parameters Type Name Description Byte [] array The array to read the bytes from. Int32 startIndex The position in the array at which to read the bytes. Returns Type Description Int32 The converted . | Improve this Doc View Source ToLong(Byte[], Int32) Converts the 8 bytes in the array at startIndex to a . <!--h5 class=\"decalaration\">Declaration</h5--> public static long ToLong(byte[] array, int startIndex) Parameters Type Name Description Byte [] array The array to read the bytes from. Int32 startIndex The position in the array at which to read the bytes. Returns Type Description Int64 The converted . | Improve this Doc View Source ToShort(Byte[], Int32) Converts the 2 bytes in the array at startIndex to a . <!--h5 class=\"decalaration\">Declaration</h5--> public static short ToShort(byte[] array, int startIndex) Parameters Type Name Description Byte [] array The array to read the bytes from. Int32 startIndex The position in the array at which to read the bytes. Returns Type Description Int16 The converted . | Improve this Doc View Source ToUInt(Byte[], Int32) Converts the 4 bytes in the array at startIndex to a . <!--h5 class=\"decalaration\">Declaration</h5--> public static uint ToUInt(byte[] array, int startIndex) Parameters Type Name Description Byte [] array The array to read the bytes from. Int32 startIndex The position in the array at which to read the bytes. Returns Type Description UInt32 The converted . | Improve this Doc View Source ToULong(Byte[], Int32) Converts the 8 bytes in the array at startIndex to a . <!--h5 class=\"decalaration\">Declaration</h5--> public static ulong ToULong(byte[] array, int startIndex) Parameters Type Name Description Byte [] array The array to read the bytes from. Int32 startIndex The position in the array at which to read the bytes. Returns Type Description UInt64 The converted . | Improve this Doc View Source ToUShort(Byte[], Int32) Converts the 2 bytes in the array at startIndex to a . <!--h5 class=\"decalaration\">Declaration</h5--> public static ushort ToUShort(byte[] array, int startIndex) Parameters Type Name Description Byte [] array The array to read the bytes from. Int32 startIndex The position in the array at which to read the bytes. Returns Type Description UInt16 The converted ."
  },
  "api/Riptide.Utils.Extensions.html": {
    "href": "api/Riptide.Utils.Extensions.html",
    "title": "Extensions Class | Riptide Docs",
    "keywords": "Extensions Class Namespace : Riptide.Utils Assembly : RiptideNetworking.dll Contains extension methods for various classes. <!--h5 id=\"Riptide_Utils_Extensions_syntax\">Syntax</h5--> public static class Extensions : object Inheritance Object Extensions Methods | Improve this Doc View Source ToStringBasedOnIPFormat(IPEndPoint) Takes the 's IP address and port number and converts it to a string, accounting for whether the address is an IPv4 or IPv6 address. <!--h5 class=\"decalaration\">Declaration</h5--> public static string ToStringBasedOnIPFormat(this IPEndPoint endPoint) Parameters Type Name Description IPEndPoint endPoint Returns Type Description String A string containing the IP address and port number of the endpoint."
  },
  "api/Riptide.Utils.html": {
    "href": "api/Riptide.Utils.html",
    "title": "Riptide.Utils Namespace | Riptide Docs",
    "keywords": "Riptide.Utils Namespace Classes ActionQueue Provides functionality for queueing methods for later execution from a chosen thread. Converter Provides functionality for converting bytes to various value types and vice versa. Extensions Contains extension methods for various classes. RiptideLogger Provides functionality for logging messages. Enums LogType Defines log message types. Delegates RiptideLogger.LogMethod Encapsulates a method used to log messages."
  },
  "api/Riptide.Utils.LogType.html": {
    "href": "api/Riptide.Utils.LogType.html",
    "title": "LogType Enum | Riptide Docs",
    "keywords": "LogType Enum Namespace : Riptide.Utils Assembly : RiptideNetworking.dll Defines log message types. <!--h5 id=\"Riptide_Utils_LogType_syntax\">Syntax</h5--> public enum LogType : int Fields Name Description Debug Logs that are used for investigation during development. Error Logs that highlight problematic events in the application flow which will cause unexpected behavior if not planned for. Info Logs that provide general information about application flow. Warning Logs that highlight abnormal or unexpected events in the application flow."
  },
  "api/Riptide.Utils.RiptideLogger.html": {
    "href": "api/Riptide.Utils.RiptideLogger.html",
    "title": "RiptideLogger Class | Riptide Docs",
    "keywords": "RiptideLogger Class Namespace : Riptide.Utils Assembly : RiptideNetworking.dll Provides functionality for logging messages. <!--h5 id=\"Riptide_Utils_RiptideLogger_syntax\">Syntax</h5--> public class RiptideLogger : object Inheritance Object RiptideLogger Properties | Improve this Doc View Source IsDebugLoggingEnabled Whether or not Debug messages will be logged. <!--h5 class=\"decalaration\">Declaration</h5--> public static bool IsDebugLoggingEnabled { get; } Property Value Type Description Boolean | Improve this Doc View Source IsErrorLoggingEnabled Whether or not Error messages will be logged. <!--h5 class=\"decalaration\">Declaration</h5--> public static bool IsErrorLoggingEnabled { get; } Property Value Type Description Boolean | Improve this Doc View Source IsInfoLoggingEnabled Whether or not Info messages will be logged. <!--h5 class=\"decalaration\">Declaration</h5--> public static bool IsInfoLoggingEnabled { get; } Property Value Type Description Boolean | Improve this Doc View Source IsWarningLoggingEnabled Whether or not Warning messages will be logged. <!--h5 class=\"decalaration\">Declaration</h5--> public static bool IsWarningLoggingEnabled { get; } Property Value Type Description Boolean Methods | Improve this Doc View Source DisableLoggingFor(LogType) Disables logging for messages of the given LogType . <!--h5 class=\"decalaration\">Declaration</h5--> public static void DisableLoggingFor(LogType logType) Parameters Type Name Description LogType logType The type of message to enable logging for. | Improve this Doc View Source EnableLoggingFor(LogType, RiptideLogger.LogMethod) Enables logging for messages of the given LogType . <!--h5 class=\"decalaration\">Declaration</h5--> public static void EnableLoggingFor(LogType logType, RiptideLogger.LogMethod logMethod) Parameters Type Name Description LogType logType The type of message to enable logging for. RiptideLogger.LogMethod logMethod The method to use when logging this type of message. | Improve this Doc View Source Initialize(RiptideLogger.LogMethod, RiptideLogger.LogMethod, RiptideLogger.LogMethod, RiptideLogger.LogMethod, Boolean, String) Initializes RiptideLogger with the supplied log methods. <!--h5 class=\"decalaration\">Declaration</h5--> public static void Initialize(RiptideLogger.LogMethod debugMethod, RiptideLogger.LogMethod infoMethod, RiptideLogger.LogMethod warningMethod, RiptideLogger.LogMethod errorMethod, bool includeTimestamps, string timestampFormat = \"HH:mm:ss\") Parameters Type Name Description RiptideLogger.LogMethod debugMethod The method to use when logging debug messages. Set to null to disable debug logs. RiptideLogger.LogMethod infoMethod The method to use when logging info messages. Set to null to disable info logs. RiptideLogger.LogMethod warningMethod The method to use when logging warning messages. Set to null to disable warning logs. RiptideLogger.LogMethod errorMethod The method to use when logging error messages. Set to null to disable error logs. Boolean includeTimestamps Whether or not to include timestamps when logging messages. String timestampFormat The format to use for timestamps. | Improve this Doc View Source Initialize(RiptideLogger.LogMethod, Boolean, String) Initializes RiptideLogger with all log types enabled. <!--h5 class=\"decalaration\">Declaration</h5--> public static void Initialize(RiptideLogger.LogMethod logMethod, bool includeTimestamps, string timestampFormat = \"HH:mm:ss\") Parameters Type Name Description RiptideLogger.LogMethod logMethod The method to use when logging all types of messages. Boolean includeTimestamps Whether or not to include timestamps when logging messages. String timestampFormat The format to use for timestamps. | Improve this Doc View Source Log(LogType, String) Logs a message. <!--h5 class=\"decalaration\">Declaration</h5--> public static void Log(LogType logType, string message) Parameters Type Name Description LogType logType The type of log message that is being logged. String message The message to log. | Improve this Doc View Source Log(LogType, String, String) Logs a message. <!--h5 class=\"decalaration\">Declaration</h5--> public static void Log(LogType logType, string logName, string message) Parameters Type Name Description LogType logType The type of log message that is being logged. String logName Who is logging this message. String message The message to log."
  },
  "api/Riptide.Utils.RiptideLogger.LogMethod.html": {
    "href": "api/Riptide.Utils.RiptideLogger.LogMethod.html",
    "title": "RiptideLogger.LogMethod Delegate | Riptide Docs",
    "keywords": "RiptideLogger.LogMethod Delegate Namespace : Riptide.Utils Assembly : RiptideNetworking.dll Encapsulates a method used to log messages. <!--h5 id=\"Riptide_Utils_RiptideLogger_LogMethod_syntax\">Syntax</h5--> public delegate void LogMethod(string log); Parameters Type Name Description String log The message to log."
  },
  "articles/intro.html": {
    "href": "articles/intro.html",
    "title": "Introduction | Riptide Docs",
    "keywords": "Introduction"
  },
  "index.html": {
    "href": "index.html",
    "title": "Riptide Networking | Riptide Docs",
    "keywords": "Riptide Networking Riptide is a lightweight C# networking library for multiplayer games."
  }
}