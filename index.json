{
  "api/Riptide.Client.ChangeTransport.html": {
    "href": "api/Riptide.Client.ChangeTransport.html",
    "title": "ChangeTransport Method | Riptide Docs",
    "keywords": "ChangeTransport Method Namespace : Riptide Assembly : RiptideNetworking.dll ChangeTransport(IClient) Disconnects the client if it's connected and swaps out the transport it's using. public void ChangeTransport(IClient newTransport) Parameters IClient newTransport The new transport to use for sending and receiving data. Remarks This method does not automatically reconnect to the server. To continue communicating with the server, Connect(String, Int32, Byte, Message) must be called again."
  },
  "api/Riptide.Client.ClientConnected.html": {
    "href": "api/Riptide.Client.ClientConnected.html",
    "title": "ClientConnected Event | Riptide Docs",
    "keywords": "ClientConnected Event Namespace : Riptide Assembly : RiptideNetworking.dll Invoked when another non-local client connects. public event EventHandler<ClientConnectedEventArgs> ClientConnected Returns EventHandler < ClientConnectedEventArgs >"
  },
  "api/Riptide.Client.ClientDisconnected.html": {
    "href": "api/Riptide.Client.ClientDisconnected.html",
    "title": "ClientDisconnected Event | Riptide Docs",
    "keywords": "ClientDisconnected Event Namespace : Riptide Assembly : RiptideNetworking.dll Invoked when another non-local client disconnects. public event EventHandler<ClientDisconnectedEventArgs> ClientDisconnected Returns EventHandler < ClientDisconnectedEventArgs >"
  },
  "api/Riptide.Client.Connect.html": {
    "href": "api/Riptide.Client.Connect.html",
    "title": "Connect Method | Riptide Docs",
    "keywords": "Connect Method Namespace : Riptide Assembly : RiptideNetworking.dll Connect(String, Int32, Byte, Message) Attempts to connect to a server at the given host address. public bool Connect(string hostAddress, int maxConnectionAttempts = 5, byte messageHandlerGroupId = null, Message message = null) Parameters String hostAddress The host address to connect to. Int32 maxConnectionAttempts How many connection attempts to make before giving up. Byte messageHandlerGroupId The ID of the group of message handler methods to use when building Riptide.Client.messageHandlers . Message message Data that should be sent to the server with the connection attempt. Use Create() to get an empty message instance. Returns Boolean true if a connection attempt will be made. false if an issue occurred (such as hostAddress being in an invalid format) and a connection attempt will not be made. Remarks Riptide's default transport expects the host address to consist of an IP and port, separated by a colon. For example: 127.0.0.1:7777 . If you are using a different transport, check the relevant documentation for what information it requires in the host address."
  },
  "api/Riptide.Client.Connected.html": {
    "href": "api/Riptide.Client.Connected.html",
    "title": "Connected Event | Riptide Docs",
    "keywords": "Connected Event Namespace : Riptide Assembly : RiptideNetworking.dll Invoked when a connection to the server is established. public event EventHandler Connected Returns EventHandler"
  },
  "api/Riptide.Client.Connection.html": {
    "href": "api/Riptide.Client.Connection.html",
    "title": "Connection Property | Riptide Docs",
    "keywords": "Connection Property Namespace : Riptide Assembly : RiptideNetworking.dll Connection The client's connection to a server. public Connection Connection { get; } Property Value Connection"
  },
  "api/Riptide.Client.ConnectionFailed.html": {
    "href": "api/Riptide.Client.ConnectionFailed.html",
    "title": "ConnectionFailed Event | Riptide Docs",
    "keywords": "ConnectionFailed Event Namespace : Riptide Assembly : RiptideNetworking.dll Invoked when a connection to the server fails to be established. public event EventHandler<ConnectionFailedEventArgs> ConnectionFailed Returns EventHandler < ConnectionFailedEventArgs >"
  },
  "api/Riptide.Client.CreateMessageHandlersDictionary.html": {
    "href": "api/Riptide.Client.CreateMessageHandlersDictionary.html",
    "title": "CreateMessageHandlersDictionary Method | Riptide Docs",
    "keywords": "CreateMessageHandlersDictionary Method Namespace : Riptide Assembly : RiptideNetworking.dll CreateMessageHandlersDictionary(Byte) Builds a dictionary of message IDs and their corresponding message handler methods. protected override void CreateMessageHandlersDictionary(byte messageHandlerGroupId) Parameters Byte messageHandlerGroupId The ID of the group of message handler methods to include in the dictionary. Overrides Peer.CreateMessageHandlersDictionary(Byte)"
  },
  "api/Riptide.Client.-ctor.html": {
    "href": "api/Riptide.Client.-ctor.html",
    "title": "Client Constructor | Riptide Docs",
    "keywords": "Client Constructor Namespace : Riptide Assembly : RiptideNetworking.dll Overloads Client(IClient, String) Handles initial setup. Client(String) Handles initial setup using the built-in UDP transport. Client(IClient, String) Handles initial setup. public Client(IClient transport, string logName = \"CLIENT\") Parameters IClient transport The transport to use for sending and receiving data. String logName The name to use when logging messages via RiptideLogger . Client(String) Handles initial setup using the built-in UDP transport. public Client(string logName = \"CLIENT\") Parameters String logName The name to use when logging messages via RiptideLogger ."
  },
  "api/Riptide.Client.Disconnect.html": {
    "href": "api/Riptide.Client.Disconnect.html",
    "title": "Disconnect Method | Riptide Docs",
    "keywords": "Disconnect Method Namespace : Riptide Assembly : RiptideNetworking.dll Disconnect() Disconnects from the server. public void Disconnect()"
  },
  "api/Riptide.Client.Disconnected.html": {
    "href": "api/Riptide.Client.Disconnected.html",
    "title": "Disconnected Event | Riptide Docs",
    "keywords": "Disconnected Event Namespace : Riptide Assembly : RiptideNetworking.dll Invoked when disconnected from the server. public event EventHandler<DisconnectedEventArgs> Disconnected Returns EventHandler < DisconnectedEventArgs >"
  },
  "api/Riptide.Client.Handle.html": {
    "href": "api/Riptide.Client.Handle.html",
    "title": "Handle Method | Riptide Docs",
    "keywords": "Handle Method Namespace : Riptide Assembly : RiptideNetworking.dll Handle(Message, MessageHeader, Connection) Handles a message. protected override void Handle(Message message, MessageHeader header, Connection connection) Parameters Message message The message to handle. MessageHeader header The message's header type. Connection connection The connection which the message was received on. Overrides Peer.Handle(Message, MessageHeader, Connection)"
  },
  "api/Riptide.Client.html": {
    "href": "api/Riptide.Client.html",
    "title": "Client Class | Riptide Docs",
    "keywords": "Client Class Namespace : Riptide Assembly : RiptideNetworking.dll A client that can connect to a Server . public class Client : Peer Inheritance Object Peer Client Inherited Members Peer.LogName Peer.TimeoutTime Peer.HeartbeatInterval Peer.DCNeverConnected Peer.DCTransportError Peer.DCTimedOut Peer.DCKicked Peer.DCServerStopped Peer.DCDisconnected Peer.UnknownReason Peer.CRNoConnection Peer.CRServerFull Peer.CRRejected Peer.CRCustom Peer.FindMessageHandlers() Peer.StartTime() Peer.StopTime() Peer.HandleMessages() Peer.HandleData(Object, DataReceivedEventArgs) Peer.IncreaseActiveCount() Peer.DecreaseActiveCount() Constructors Client(IClient, String) Handles initial setup. Client(String) Handles initial setup using the built-in UDP transport. Properties Connection The client's connection to a server. Id The client's numeric ID. IsConnected Whether or not the client is currently connected. IsConnecting Whether or not the client is currently in the process of connecting. IsNotConnected Whether or not the client is currently not connected nor trying to connect. IsPending Whether or not the client's connection is currently pending (will only be true when a server doesn't immediately accept the connection request). RTT The round trip time (ping) of the connection, in milliseconds. -1 if not calculated yet. SmoothRTT The smoothed round trip time (ping) of the connection, in milliseconds. -1 if not calculated yet. Methods ChangeTransport(IClient) Disconnects the client if it's connected and swaps out the transport it's using. Connect(String, Int32, Byte, Message) Attempts to connect to a server at the given host address. CreateMessageHandlersDictionary(Byte) Builds a dictionary of message IDs and their corresponding message handler methods. Disconnect() Disconnects from the server. Handle(Message, MessageHeader, Connection) Handles a message. OnClientConnected(UInt16) Invokes the ClientConnected event. OnClientDisconnected(UInt16) Invokes the ClientDisconnected event. OnConnected() Invokes the Connected event. OnConnectionFailed(RejectReason, Message) Invokes the ConnectionFailed event. OnDisconnected(DisconnectReason, Message) Invokes the Disconnected event. OnMessageReceived(Message) Invokes the MessageReceived event and initiates handling of the received message. Send(Message, Boolean) Sends a message to the server. Update() Handles any received messages and invokes any delayed events which need to be invoked. Events ClientConnected Invoked when another non-local client connects. ClientDisconnected Invoked when another non-local client disconnects. Connected Invoked when a connection to the server is established. ConnectionFailed Invoked when a connection to the server fails to be established. Disconnected Invoked when disconnected from the server. MessageReceived Invoked when a message is received."
  },
  "api/Riptide.Client.Id.html": {
    "href": "api/Riptide.Client.Id.html",
    "title": "Id Property | Riptide Docs",
    "keywords": "Id Property Namespace : Riptide Assembly : RiptideNetworking.dll Id The client's numeric ID. public ushort Id { get; } Property Value UInt16"
  },
  "api/Riptide.Client.IsConnected.html": {
    "href": "api/Riptide.Client.IsConnected.html",
    "title": "IsConnected Property | Riptide Docs",
    "keywords": "IsConnected Property Namespace : Riptide Assembly : RiptideNetworking.dll IsConnected Whether or not the client is currently connected. public bool IsConnected { get; } Property Value Boolean"
  },
  "api/Riptide.Client.IsConnecting.html": {
    "href": "api/Riptide.Client.IsConnecting.html",
    "title": "IsConnecting Property | Riptide Docs",
    "keywords": "IsConnecting Property Namespace : Riptide Assembly : RiptideNetworking.dll IsConnecting Whether or not the client is currently in the process of connecting. public bool IsConnecting { get; } Property Value Boolean"
  },
  "api/Riptide.Client.IsNotConnected.html": {
    "href": "api/Riptide.Client.IsNotConnected.html",
    "title": "IsNotConnected Property | Riptide Docs",
    "keywords": "IsNotConnected Property Namespace : Riptide Assembly : RiptideNetworking.dll IsNotConnected Whether or not the client is currently not connected nor trying to connect. public bool IsNotConnected { get; } Property Value Boolean"
  },
  "api/Riptide.Client.IsPending.html": {
    "href": "api/Riptide.Client.IsPending.html",
    "title": "IsPending Property | Riptide Docs",
    "keywords": "IsPending Property Namespace : Riptide Assembly : RiptideNetworking.dll IsPending Whether or not the client's connection is currently pending (will only be true when a server doesn't immediately accept the connection request). public bool IsPending { get; } Property Value Boolean"
  },
  "api/Riptide.Client.MessageHandler.html": {
    "href": "api/Riptide.Client.MessageHandler.html",
    "title": "Client.MessageHandler Delegate | Riptide Docs",
    "keywords": "Client.MessageHandler Delegate Namespace : Riptide Assembly : RiptideNetworking.dll Encapsulates a method that handles a message from a server. public delegate void MessageHandler(Message message); Parameters Message message The message that was received."
  },
  "api/Riptide.Client.MessageReceived.html": {
    "href": "api/Riptide.Client.MessageReceived.html",
    "title": "MessageReceived Event | Riptide Docs",
    "keywords": "MessageReceived Event Namespace : Riptide Assembly : RiptideNetworking.dll Invoked when a message is received. public event EventHandler<MessageReceivedEventArgs> MessageReceived Returns EventHandler < MessageReceivedEventArgs >"
  },
  "api/Riptide.Client.OnClientConnected.html": {
    "href": "api/Riptide.Client.OnClientConnected.html",
    "title": "OnClientConnected Method | Riptide Docs",
    "keywords": "OnClientConnected Method Namespace : Riptide Assembly : RiptideNetworking.dll OnClientConnected(UInt16) Invokes the ClientConnected event. protected virtual void OnClientConnected(ushort clientId) Parameters UInt16 clientId The numeric ID of the client that connected."
  },
  "api/Riptide.Client.OnClientDisconnected.html": {
    "href": "api/Riptide.Client.OnClientDisconnected.html",
    "title": "OnClientDisconnected Method | Riptide Docs",
    "keywords": "OnClientDisconnected Method Namespace : Riptide Assembly : RiptideNetworking.dll OnClientDisconnected(UInt16) Invokes the ClientDisconnected event. protected virtual void OnClientDisconnected(ushort clientId) Parameters UInt16 clientId The numeric ID of the client that disconnected."
  },
  "api/Riptide.Client.OnConnected.html": {
    "href": "api/Riptide.Client.OnConnected.html",
    "title": "OnConnected Method | Riptide Docs",
    "keywords": "OnConnected Method Namespace : Riptide Assembly : RiptideNetworking.dll OnConnected() Invokes the Connected event. protected virtual void OnConnected()"
  },
  "api/Riptide.Client.OnConnectionFailed.html": {
    "href": "api/Riptide.Client.OnConnectionFailed.html",
    "title": "OnConnectionFailed Method | Riptide Docs",
    "keywords": "OnConnectionFailed Method Namespace : Riptide Assembly : RiptideNetworking.dll OnConnectionFailed(RejectReason, Message) Invokes the ConnectionFailed event. protected virtual void OnConnectionFailed(RejectReason reason, Message message = null) Parameters RejectReason reason The reason for the connection failure. Message message Additional data related to the failed connection attempt."
  },
  "api/Riptide.Client.OnDisconnected.html": {
    "href": "api/Riptide.Client.OnDisconnected.html",
    "title": "OnDisconnected Method | Riptide Docs",
    "keywords": "OnDisconnected Method Namespace : Riptide Assembly : RiptideNetworking.dll OnDisconnected(DisconnectReason, Message) Invokes the Disconnected event. protected virtual void OnDisconnected(DisconnectReason reason, Message message) Parameters DisconnectReason reason The reason for the disconnection. Message message Additional data related to the disconnection."
  },
  "api/Riptide.Client.OnMessageReceived.html": {
    "href": "api/Riptide.Client.OnMessageReceived.html",
    "title": "OnMessageReceived Method | Riptide Docs",
    "keywords": "OnMessageReceived Method Namespace : Riptide Assembly : RiptideNetworking.dll OnMessageReceived(Message) Invokes the MessageReceived event and initiates handling of the received message. protected virtual void OnMessageReceived(Message message) Parameters Message message The received message."
  },
  "api/Riptide.Client.RTT.html": {
    "href": "api/Riptide.Client.RTT.html",
    "title": "RTT Property | Riptide Docs",
    "keywords": "RTT Property Namespace : Riptide Assembly : RiptideNetworking.dll RTT The round trip time (ping) of the connection, in milliseconds. -1 if not calculated yet. public short RTT { get; } Property Value Int16"
  },
  "api/Riptide.Client.Send.html": {
    "href": "api/Riptide.Client.Send.html",
    "title": "Send Method | Riptide Docs",
    "keywords": "Send Method Namespace : Riptide Assembly : RiptideNetworking.dll Send(Message, Boolean) Sends a message to the server. public void Send(Message message, bool shouldRelease = true) Parameters Message message The message to send. Boolean shouldRelease Whether or not to return the message to the pool after it is sent. Remarks If you intend to continue using the message instance after calling this method, you must set shouldRelease to false . Release() can be used to manually return the message to the pool at a later time."
  },
  "api/Riptide.Client.SmoothRTT.html": {
    "href": "api/Riptide.Client.SmoothRTT.html",
    "title": "SmoothRTT Property | Riptide Docs",
    "keywords": "SmoothRTT Property Namespace : Riptide Assembly : RiptideNetworking.dll SmoothRTT The smoothed round trip time (ping) of the connection, in milliseconds. -1 if not calculated yet. public short SmoothRTT { get; } Property Value Int16 Remarks This value is slower to accurately represent lasting changes in latency than RTT , but it is less susceptible to changing drastically due to significant—but temporary—jumps in latency."
  },
  "api/Riptide.Client.Update.html": {
    "href": "api/Riptide.Client.Update.html",
    "title": "Update Method | Riptide Docs",
    "keywords": "Update Method Namespace : Riptide Assembly : RiptideNetworking.dll Update() Handles any received messages and invokes any delayed events which need to be invoked. public override void Update() Overrides Peer.Update()"
  },
  "api/Riptide.ClientConnectedEventArgs.-ctor.html": {
    "href": "api/Riptide.ClientConnectedEventArgs.-ctor.html",
    "title": "ClientConnectedEventArgs Constructor | Riptide Docs",
    "keywords": "ClientConnectedEventArgs Constructor Namespace : Riptide Assembly : RiptideNetworking.dll ClientConnectedEventArgs(UInt16) Initializes event data. public ClientConnectedEventArgs(ushort id) Parameters UInt16 id The numeric ID of the client that connected."
  },
  "api/Riptide.ClientConnectedEventArgs.html": {
    "href": "api/Riptide.ClientConnectedEventArgs.html",
    "title": "ClientConnectedEventArgs Class | Riptide Docs",
    "keywords": "ClientConnectedEventArgs Class Namespace : Riptide Assembly : RiptideNetworking.dll Contains event data for when a non-local client connects to the server. public class ClientConnectedEventArgs : EventArgs Inheritance Object ClientConnectedEventArgs Constructors ClientConnectedEventArgs(UInt16) Initializes event data. Fields Id The numeric ID of the client that connected."
  },
  "api/Riptide.ClientConnectedEventArgs.Id.html": {
    "href": "api/Riptide.ClientConnectedEventArgs.Id.html",
    "title": "Id Field | Riptide Docs",
    "keywords": "Id Field Namespace : Riptide Assembly : RiptideNetworking.dll The numeric ID of the client that connected. public readonly ushort Id Returns UInt16"
  },
  "api/Riptide.ClientDisconnectedEventArgs.-ctor.html": {
    "href": "api/Riptide.ClientDisconnectedEventArgs.-ctor.html",
    "title": "ClientDisconnectedEventArgs Constructor | Riptide Docs",
    "keywords": "ClientDisconnectedEventArgs Constructor Namespace : Riptide Assembly : RiptideNetworking.dll ClientDisconnectedEventArgs(UInt16) Initializes event data. public ClientDisconnectedEventArgs(ushort id) Parameters UInt16 id The numeric ID of the client that disconnected."
  },
  "api/Riptide.ClientDisconnectedEventArgs.html": {
    "href": "api/Riptide.ClientDisconnectedEventArgs.html",
    "title": "ClientDisconnectedEventArgs Class | Riptide Docs",
    "keywords": "ClientDisconnectedEventArgs Class Namespace : Riptide Assembly : RiptideNetworking.dll Contains event data for when a non-local client disconnects from the server. public class ClientDisconnectedEventArgs : EventArgs Inheritance Object ClientDisconnectedEventArgs Constructors ClientDisconnectedEventArgs(UInt16) Initializes event data. Fields Id The numeric ID of the client that disconnected."
  },
  "api/Riptide.ClientDisconnectedEventArgs.Id.html": {
    "href": "api/Riptide.ClientDisconnectedEventArgs.Id.html",
    "title": "Id Field | Riptide Docs",
    "keywords": "Id Field Namespace : Riptide Assembly : RiptideNetworking.dll The numeric ID of the client that disconnected. public readonly ushort Id Returns UInt16"
  },
  "api/Riptide.Connection.CanTimeout.html": {
    "href": "api/Riptide.Connection.CanTimeout.html",
    "title": "CanTimeout Property | Riptide Docs",
    "keywords": "CanTimeout Property Namespace : Riptide Assembly : RiptideNetworking.dll CanTimeout Whether or not the connection can time out. public bool CanTimeout { get; set; } Property Value Boolean"
  },
  "api/Riptide.Connection.-ctor.html": {
    "href": "api/Riptide.Connection.-ctor.html",
    "title": "Connection Constructor | Riptide Docs",
    "keywords": "Connection Constructor Namespace : Riptide Assembly : RiptideNetworking.dll Connection() Initializes the connection. protected Connection()"
  },
  "api/Riptide.Connection.html": {
    "href": "api/Riptide.Connection.html",
    "title": "Connection Class | Riptide Docs",
    "keywords": "Connection Class Namespace : Riptide Assembly : RiptideNetworking.dll Represents a connection to a Server or Client . public abstract class Connection : object Inheritance Object Connection TcpConnection UdpConnection Constructors Connection() Initializes the connection. Properties CanTimeout Whether or not the connection can time out. Id The connection's numeric ID. IsConnected Whether or not the connection is currently connected. IsConnecting Whether or not the connection is currently in the process of connecting. IsNotConnected Whether or not the connection is currently not connected nor trying to connect. IsPending Whether or not the connection is currently pending (will only be true when a server doesn't immediately accept the connection request). RTT The round trip time (ping) of the connection, in milliseconds. -1 if not calculated yet. SmoothRTT The smoothed round trip time (ping) of the connection, in milliseconds. -1 if not calculated yet. Methods ResetTimeout() Resets the connection's timeout time. Send(Byte[], Int32) Sends data."
  },
  "api/Riptide.Connection.Id.html": {
    "href": "api/Riptide.Connection.Id.html",
    "title": "Id Property | Riptide Docs",
    "keywords": "Id Property Namespace : Riptide Assembly : RiptideNetworking.dll Id The connection's numeric ID. public ushort Id { get; } Property Value UInt16"
  },
  "api/Riptide.Connection.IsConnected.html": {
    "href": "api/Riptide.Connection.IsConnected.html",
    "title": "IsConnected Property | Riptide Docs",
    "keywords": "IsConnected Property Namespace : Riptide Assembly : RiptideNetworking.dll IsConnected Whether or not the connection is currently connected. public bool IsConnected { get; } Property Value Boolean"
  },
  "api/Riptide.Connection.IsConnecting.html": {
    "href": "api/Riptide.Connection.IsConnecting.html",
    "title": "IsConnecting Property | Riptide Docs",
    "keywords": "IsConnecting Property Namespace : Riptide Assembly : RiptideNetworking.dll IsConnecting Whether or not the connection is currently in the process of connecting. public bool IsConnecting { get; } Property Value Boolean"
  },
  "api/Riptide.Connection.IsNotConnected.html": {
    "href": "api/Riptide.Connection.IsNotConnected.html",
    "title": "IsNotConnected Property | Riptide Docs",
    "keywords": "IsNotConnected Property Namespace : Riptide Assembly : RiptideNetworking.dll IsNotConnected Whether or not the connection is currently not connected nor trying to connect. public bool IsNotConnected { get; } Property Value Boolean"
  },
  "api/Riptide.Connection.IsPending.html": {
    "href": "api/Riptide.Connection.IsPending.html",
    "title": "IsPending Property | Riptide Docs",
    "keywords": "IsPending Property Namespace : Riptide Assembly : RiptideNetworking.dll IsPending Whether or not the connection is currently pending (will only be true when a server doesn't immediately accept the connection request). public bool IsPending { get; } Property Value Boolean"
  },
  "api/Riptide.Connection.ResetTimeout.html": {
    "href": "api/Riptide.Connection.ResetTimeout.html",
    "title": "ResetTimeout Method | Riptide Docs",
    "keywords": "ResetTimeout Method Namespace : Riptide Assembly : RiptideNetworking.dll ResetTimeout() Resets the connection's timeout time. public void ResetTimeout()"
  },
  "api/Riptide.Connection.RTT.html": {
    "href": "api/Riptide.Connection.RTT.html",
    "title": "RTT Property | Riptide Docs",
    "keywords": "RTT Property Namespace : Riptide Assembly : RiptideNetworking.dll RTT The round trip time (ping) of the connection, in milliseconds. -1 if not calculated yet. public short RTT { get; } Property Value Int16"
  },
  "api/Riptide.Connection.Send.html": {
    "href": "api/Riptide.Connection.Send.html",
    "title": "Send Method | Riptide Docs",
    "keywords": "Send Method Namespace : Riptide Assembly : RiptideNetworking.dll Send(Byte[], Int32) Sends data. protected abstract void Send(byte[] dataBuffer, int amount) Parameters Byte [] dataBuffer The array containing the data. Int32 amount The number of bytes in the array which should be sent."
  },
  "api/Riptide.Connection.SmoothRTT.html": {
    "href": "api/Riptide.Connection.SmoothRTT.html",
    "title": "SmoothRTT Property | Riptide Docs",
    "keywords": "SmoothRTT Property Namespace : Riptide Assembly : RiptideNetworking.dll SmoothRTT The smoothed round trip time (ping) of the connection, in milliseconds. -1 if not calculated yet. public short SmoothRTT { get; } Property Value Int16 Remarks This value is slower to accurately represent lasting changes in latency than RTT , but it is less susceptible to changing drastically due to significant—but temporary—jumps in latency."
  },
  "api/Riptide.ConnectionFailedEventArgs.-ctor.html": {
    "href": "api/Riptide.ConnectionFailedEventArgs.-ctor.html",
    "title": "ConnectionFailedEventArgs Constructor | Riptide Docs",
    "keywords": "ConnectionFailedEventArgs Constructor Namespace : Riptide Assembly : RiptideNetworking.dll ConnectionFailedEventArgs(Message) Initializes event data. public ConnectionFailedEventArgs(Message message) Parameters Message message Additional data related to the failed connection attempt (if any)."
  },
  "api/Riptide.ConnectionFailedEventArgs.html": {
    "href": "api/Riptide.ConnectionFailedEventArgs.html",
    "title": "ConnectionFailedEventArgs Class | Riptide Docs",
    "keywords": "ConnectionFailedEventArgs Class Namespace : Riptide Assembly : RiptideNetworking.dll Contains event data for when a connection attempt to a server fails. public class ConnectionFailedEventArgs : EventArgs Inheritance Object ConnectionFailedEventArgs Constructors ConnectionFailedEventArgs(Message) Initializes event data. Fields Message Additional data related to the failed connection attempt (if any)."
  },
  "api/Riptide.ConnectionFailedEventArgs.Message.html": {
    "href": "api/Riptide.ConnectionFailedEventArgs.Message.html",
    "title": "Message Field | Riptide Docs",
    "keywords": "Message Field Namespace : Riptide Assembly : RiptideNetworking.dll Additional data related to the failed connection attempt (if any). public readonly Message Message Returns Message"
  },
  "api/Riptide.ConnectionState.html": {
    "href": "api/Riptide.ConnectionState.html",
    "title": "ConnectionState Enum | Riptide Docs",
    "keywords": "ConnectionState Enum Namespace : Riptide Assembly : RiptideNetworking.dll The state of a connection. public enum ConnectionState : byte Fields Connected Connected. A connection has been established successfully. Connecting Connecting. Still trying to establish a connection. NotConnected Not connected. No connection has been established or the connection has been closed. Pending Connection is pending. The server is still determining whether or not the connection should be allowed."
  },
  "api/Riptide.DisconnectedEventArgs.-ctor.html": {
    "href": "api/Riptide.DisconnectedEventArgs.-ctor.html",
    "title": "DisconnectedEventArgs Constructor | Riptide Docs",
    "keywords": "DisconnectedEventArgs Constructor Namespace : Riptide Assembly : RiptideNetworking.dll DisconnectedEventArgs(DisconnectReason, Message) Initializes event data. public DisconnectedEventArgs(DisconnectReason reason, Message message) Parameters DisconnectReason reason The reason for the disconnection. Message message Additional data related to the disconnection (if any)."
  },
  "api/Riptide.DisconnectedEventArgs.html": {
    "href": "api/Riptide.DisconnectedEventArgs.html",
    "title": "DisconnectedEventArgs Class | Riptide Docs",
    "keywords": "DisconnectedEventArgs Class Namespace : Riptide Assembly : RiptideNetworking.dll Contains event data for when the client disconnects from a server. public class DisconnectedEventArgs : EventArgs Inheritance Object DisconnectedEventArgs Constructors DisconnectedEventArgs(DisconnectReason, Message) Initializes event data. Fields Message Additional data related to the disconnection (if any). Reason The reason for the disconnection."
  },
  "api/Riptide.DisconnectedEventArgs.Message.html": {
    "href": "api/Riptide.DisconnectedEventArgs.Message.html",
    "title": "Message Field | Riptide Docs",
    "keywords": "Message Field Namespace : Riptide Assembly : RiptideNetworking.dll Additional data related to the disconnection (if any). public readonly Message Message Returns Message"
  },
  "api/Riptide.DisconnectedEventArgs.Reason.html": {
    "href": "api/Riptide.DisconnectedEventArgs.Reason.html",
    "title": "Reason Field | Riptide Docs",
    "keywords": "Reason Field Namespace : Riptide Assembly : RiptideNetworking.dll The reason for the disconnection. public readonly DisconnectReason Reason Returns DisconnectReason"
  },
  "api/Riptide.DisconnectReason.html": {
    "href": "api/Riptide.DisconnectReason.html",
    "title": "DisconnectReason Enum | Riptide Docs",
    "keywords": "DisconnectReason Enum Namespace : Riptide Assembly : RiptideNetworking.dll The reason for a disconnection. public enum DisconnectReason : byte Fields ConnectionRejected The connection attempt was rejected by the server. Disconnected The disconnection was initiated by the client. Kicked The client was forcibly disconnected by the server. NeverConnected No connection was ever established. ServerStopped The server shut down. TimedOut The connection timed out. TransportError The active transport detected a problem with the connection."
  },
  "api/Riptide.DuplicateHandlerException.-ctor.html": {
    "href": "api/Riptide.DuplicateHandlerException.-ctor.html",
    "title": "DuplicateHandlerException Constructor | Riptide Docs",
    "keywords": "DuplicateHandlerException Constructor Namespace : Riptide Assembly : RiptideNetworking.dll Overloads DuplicateHandlerException() Initializes a new DuplicateHandlerException instance with a specified error message. DuplicateHandlerException(String) Initializes a new DuplicateHandlerException instance with a specified error message. DuplicateHandlerException(String, Exception) Initializes a new DuplicateHandlerException instance with a specified error message and a reference to the inner exception that is the cause of this exception. DuplicateHandlerException(UInt16, MethodInfo, MethodInfo) Initializes a new DuplicateHandlerException instance and constructs an error message from the given information. DuplicateHandlerException() Initializes a new DuplicateHandlerException instance with a specified error message. public DuplicateHandlerException() DuplicateHandlerException(String) Initializes a new DuplicateHandlerException instance with a specified error message. public DuplicateHandlerException(string message) Parameters String message The error message that explains the reason for the exception. DuplicateHandlerException(String, Exception) Initializes a new DuplicateHandlerException instance with a specified error message and a reference to the inner exception that is the cause of this exception. public DuplicateHandlerException(string message, Exception inner) Parameters String message The error message that explains the reason for the exception. Exception inner The exception that is the cause of the current exception. If inner is not a null reference, the current exception is raised in a catch block that handles the inner exception. DuplicateHandlerException(UInt16, MethodInfo, MethodInfo) Initializes a new DuplicateHandlerException instance and constructs an error message from the given information. public DuplicateHandlerException(ushort id, MethodInfo method1, MethodInfo method2) Parameters UInt16 id The message ID with multiple handler methods. MethodInfo method1 The first handler method's info. MethodInfo method2 The second handler method's info."
  },
  "api/Riptide.DuplicateHandlerException.DeclaringType1.html": {
    "href": "api/Riptide.DuplicateHandlerException.DeclaringType1.html",
    "title": "DeclaringType1 Field | Riptide Docs",
    "keywords": "DeclaringType1 Field Namespace : Riptide Assembly : RiptideNetworking.dll The type containing the first handler method. public readonly Type DeclaringType1 Returns Type"
  },
  "api/Riptide.DuplicateHandlerException.DeclaringType2.html": {
    "href": "api/Riptide.DuplicateHandlerException.DeclaringType2.html",
    "title": "DeclaringType2 Field | Riptide Docs",
    "keywords": "DeclaringType2 Field Namespace : Riptide Assembly : RiptideNetworking.dll The type containing the second handler method. public readonly Type DeclaringType2 Returns Type"
  },
  "api/Riptide.DuplicateHandlerException.HandlerMethodName1.html": {
    "href": "api/Riptide.DuplicateHandlerException.HandlerMethodName1.html",
    "title": "HandlerMethodName1 Field | Riptide Docs",
    "keywords": "HandlerMethodName1 Field Namespace : Riptide Assembly : RiptideNetworking.dll The name of the first handler method. public readonly string HandlerMethodName1 Returns String"
  },
  "api/Riptide.DuplicateHandlerException.HandlerMethodName2.html": {
    "href": "api/Riptide.DuplicateHandlerException.HandlerMethodName2.html",
    "title": "HandlerMethodName2 Field | Riptide Docs",
    "keywords": "HandlerMethodName2 Field Namespace : Riptide Assembly : RiptideNetworking.dll The name of the second handler method. public readonly string HandlerMethodName2 Returns String"
  },
  "api/Riptide.DuplicateHandlerException.html": {
    "href": "api/Riptide.DuplicateHandlerException.html",
    "title": "DuplicateHandlerException Class | Riptide Docs",
    "keywords": "DuplicateHandlerException Class Namespace : Riptide Assembly : RiptideNetworking.dll The exception that is thrown when multiple methods with MessageHandlerAttribute s are set to handle messages with the same ID and have the same method signature. public class DuplicateHandlerException : Exception Inheritance Object DuplicateHandlerException Constructors DuplicateHandlerException() Initializes a new DuplicateHandlerException instance with a specified error message. DuplicateHandlerException(String) Initializes a new DuplicateHandlerException instance with a specified error message. DuplicateHandlerException(String, Exception) Initializes a new DuplicateHandlerException instance with a specified error message and a reference to the inner exception that is the cause of this exception. DuplicateHandlerException(UInt16, MethodInfo, MethodInfo) Initializes a new DuplicateHandlerException instance and constructs an error message from the given information. Fields DeclaringType1 The type containing the first handler method. DeclaringType2 The type containing the second handler method. HandlerMethodName1 The name of the first handler method. HandlerMethodName2 The name of the second handler method. Id The message ID with multiple handler methods."
  },
  "api/Riptide.DuplicateHandlerException.Id.html": {
    "href": "api/Riptide.DuplicateHandlerException.Id.html",
    "title": "Id Field | Riptide Docs",
    "keywords": "Id Field Namespace : Riptide Assembly : RiptideNetworking.dll The message ID with multiple handler methods. public readonly ushort Id Returns UInt16"
  },
  "api/Riptide.html": {
    "href": "api/Riptide.html",
    "title": "Riptide Namespace | Riptide Docs",
    "keywords": "Riptide Namespace Classes Client A client that can connect to a Server . ClientConnectedEventArgs Contains event data for when a non-local client connects to the server. ClientDisconnectedEventArgs Contains event data for when a non-local client disconnects from the server. Connection Represents a connection to a Server or Client . ConnectionFailedEventArgs Contains event data for when a connection attempt to a server fails. DisconnectedEventArgs Contains event data for when the client disconnects from a server. DuplicateHandlerException The exception that is thrown when multiple methods with MessageHandlerAttribute s are set to handle messages with the same ID and have the same method signature. InsufficientCapacityException The exception that is thrown when a Message does not contain enough unread bytes to add a certain value. InvalidHandlerSignatureException The exception that is thrown when a method with a MessageHandlerAttribute does not have an acceptable message handler method signature (either Server.MessageHandler or Client.MessageHandler ). Message Provides functionality for converting data to bytes and vice versa. MessageHandlerAttribute Specifies a method as the message handler for messages with the given ID. MessageReceivedEventArgs Contains event data for when a message is received. MessageRelayFilter Provides functionality for enabling/disabling automatic message relaying by message type. NonStaticHandlerException The exception that is thrown when a method with a MessageHandlerAttribute is not marked as static . Peer Provides base functionality for Server and Client . Server A server that can accept connections from Client s. ServerConnectedEventArgs Contains event data for when a client connects to the server. ServerDisconnectedEventArgs Contains event data for when a client disconnects from the server. Interfaces IMessageSerializable Represents a type that can be added to and retrieved from messages using the AddSerializable<T>(T) and GetSerializable<T>() methods. Enums ConnectionState The state of a connection. DisconnectReason The reason for a disconnection. MessageSendMode The send mode of a Message . RejectReason The reason the connection attempt was rejected. Delegates Client.MessageHandler Encapsulates a method that handles a message from a server. Server.ConnectionAttemptHandler Encapsulates a method that determines whether or not to accept a client's connection attempt. Server.MessageHandler Encapsulates a method that handles a message from a client."
  },
  "api/Riptide.IMessageSerializable.Deserialize.html": {
    "href": "api/Riptide.IMessageSerializable.Deserialize.html",
    "title": "Deserialize Method | Riptide Docs",
    "keywords": "Deserialize Method Namespace : Riptide Assembly : RiptideNetworking.dll Deserialize(Message) Retrieves the type from the message. void Deserialize(Message message) Parameters Message message The message to retrieve the type from."
  },
  "api/Riptide.IMessageSerializable.html": {
    "href": "api/Riptide.IMessageSerializable.html",
    "title": "IMessageSerializable Interface | Riptide Docs",
    "keywords": "IMessageSerializable Interface Namespace : Riptide Assembly : RiptideNetworking.dll Represents a type that can be added to and retrieved from messages using the AddSerializable<T>(T) and GetSerializable<T>() methods. public interface IMessageSerializable Methods Deserialize(Message) Retrieves the type from the message. Serialize(Message) Adds the type to the message."
  },
  "api/Riptide.IMessageSerializable.Serialize.html": {
    "href": "api/Riptide.IMessageSerializable.Serialize.html",
    "title": "Serialize Method | Riptide Docs",
    "keywords": "Serialize Method Namespace : Riptide Assembly : RiptideNetworking.dll Serialize(Message) Adds the type to the message. void Serialize(Message message) Parameters Message message The message to add the type to."
  },
  "api/Riptide.InsufficientCapacityException.-ctor.html": {
    "href": "api/Riptide.InsufficientCapacityException.-ctor.html",
    "title": "InsufficientCapacityException Constructor | Riptide Docs",
    "keywords": "InsufficientCapacityException Constructor Namespace : Riptide Assembly : RiptideNetworking.dll Overloads InsufficientCapacityException() Initializes a new InsufficientCapacityException instance. InsufficientCapacityException(String) Initializes a new InsufficientCapacityException instance with a specified error message. InsufficientCapacityException(String, Exception) Initializes a new InsufficientCapacityException instance with a specified error message and a reference to the inner exception that is the cause of this exception. InsufficientCapacityException(Message, String, Int32) Initializes a new InsufficientCapacityException instance and constructs an error message from the given information. InsufficientCapacityException(Message, Int32, String, Int32, Int32) Initializes a new InsufficientCapacityException instance and constructs an error message from the given information. InsufficientCapacityException() Initializes a new InsufficientCapacityException instance. public InsufficientCapacityException() InsufficientCapacityException(String) Initializes a new InsufficientCapacityException instance with a specified error message. public InsufficientCapacityException(string message) Parameters String message The error message that explains the reason for the exception. InsufficientCapacityException(String, Exception) Initializes a new InsufficientCapacityException instance with a specified error message and a reference to the inner exception that is the cause of this exception. public InsufficientCapacityException(string message, Exception inner) Parameters String message The error message that explains the reason for the exception. Exception inner The exception that is the cause of the current exception. If inner is not a null reference, the current exception is raised in a catch block that handles the inner exception. InsufficientCapacityException(Message, String, Int32) Initializes a new InsufficientCapacityException instance and constructs an error message from the given information. public InsufficientCapacityException(Message message, string typeName, int requiredBytes) Parameters Message message The message with insufficient remaining capacity. String typeName The name of the type which could not be added to the message. Int32 requiredBytes The number of available bytes required for the type to be added successfully. InsufficientCapacityException(Message, Int32, String, Int32, Int32) Initializes a new InsufficientCapacityException instance and constructs an error message from the given information. public InsufficientCapacityException(Message message, int arrayLength, string typeName, int requiredBytes, int totalRequiredBytes = null) Parameters Message message The message with insufficient remaining capacity. Int32 arrayLength The length of the array which could not be added to the message. String typeName The name of the array's type. Int32 requiredBytes The number of available bytes required for a single element of the array to be added successfully. Int32 totalRequiredBytes The number of available bytes required for the entire array to be added successfully. If left as -1, this will be set to arrayLength * requiredBytes ."
  },
  "api/Riptide.InsufficientCapacityException.html": {
    "href": "api/Riptide.InsufficientCapacityException.html",
    "title": "InsufficientCapacityException Class | Riptide Docs",
    "keywords": "InsufficientCapacityException Class Namespace : Riptide Assembly : RiptideNetworking.dll The exception that is thrown when a Message does not contain enough unread bytes to add a certain value. public class InsufficientCapacityException : Exception Inheritance Object InsufficientCapacityException Constructors InsufficientCapacityException() Initializes a new InsufficientCapacityException instance. InsufficientCapacityException(Message, Int32, String, Int32, Int32) Initializes a new InsufficientCapacityException instance and constructs an error message from the given information. InsufficientCapacityException(Message, String, Int32) Initializes a new InsufficientCapacityException instance and constructs an error message from the given information. InsufficientCapacityException(String) Initializes a new InsufficientCapacityException instance with a specified error message. InsufficientCapacityException(String, Exception) Initializes a new InsufficientCapacityException instance with a specified error message and a reference to the inner exception that is the cause of this exception. Fields RequiredBytes The number of available bytes the type requires in order to be added successfully. RiptideMessage The message with insufficient remaining capacity. TypeName The name of the type which could not be added to the message."
  },
  "api/Riptide.InsufficientCapacityException.RequiredBytes.html": {
    "href": "api/Riptide.InsufficientCapacityException.RequiredBytes.html",
    "title": "RequiredBytes Field | Riptide Docs",
    "keywords": "RequiredBytes Field Namespace : Riptide Assembly : RiptideNetworking.dll The number of available bytes the type requires in order to be added successfully. public readonly int RequiredBytes Returns Int32"
  },
  "api/Riptide.InsufficientCapacityException.RiptideMessage.html": {
    "href": "api/Riptide.InsufficientCapacityException.RiptideMessage.html",
    "title": "RiptideMessage Field | Riptide Docs",
    "keywords": "RiptideMessage Field Namespace : Riptide Assembly : RiptideNetworking.dll The message with insufficient remaining capacity. public readonly Message RiptideMessage Returns Message"
  },
  "api/Riptide.InsufficientCapacityException.TypeName.html": {
    "href": "api/Riptide.InsufficientCapacityException.TypeName.html",
    "title": "TypeName Field | Riptide Docs",
    "keywords": "TypeName Field Namespace : Riptide Assembly : RiptideNetworking.dll The name of the type which could not be added to the message. public readonly string TypeName Returns String"
  },
  "api/Riptide.InvalidHandlerSignatureException.-ctor.html": {
    "href": "api/Riptide.InvalidHandlerSignatureException.-ctor.html",
    "title": "InvalidHandlerSignatureException Constructor | Riptide Docs",
    "keywords": "InvalidHandlerSignatureException Constructor Namespace : Riptide Assembly : RiptideNetworking.dll Overloads InvalidHandlerSignatureException() Initializes a new InvalidHandlerSignatureException instance. InvalidHandlerSignatureException(String) Initializes a new InvalidHandlerSignatureException instance with a specified error message. InvalidHandlerSignatureException(String, Exception) Initializes a new InvalidHandlerSignatureException instance with a specified error message and a reference to the inner exception that is the cause of this exception. InvalidHandlerSignatureException(Type, String) Initializes a new InvalidHandlerSignatureException instance and constructs an error message from the given information. InvalidHandlerSignatureException() Initializes a new InvalidHandlerSignatureException instance. public InvalidHandlerSignatureException() InvalidHandlerSignatureException(String) Initializes a new InvalidHandlerSignatureException instance with a specified error message. public InvalidHandlerSignatureException(string message) Parameters String message The error message that explains the reason for the exception. InvalidHandlerSignatureException(String, Exception) Initializes a new InvalidHandlerSignatureException instance with a specified error message and a reference to the inner exception that is the cause of this exception. public InvalidHandlerSignatureException(string message, Exception inner) Parameters String message The error message that explains the reason for the exception. Exception inner The exception that is the cause of the current exception. If inner is not a null reference, the current exception is raised in a catch block that handles the inner exception. InvalidHandlerSignatureException(Type, String) Initializes a new InvalidHandlerSignatureException instance and constructs an error message from the given information. public InvalidHandlerSignatureException(Type declaringType, string handlerMethodName) Parameters Type declaringType The type containing the handler method. String handlerMethodName The name of the handler method."
  },
  "api/Riptide.InvalidHandlerSignatureException.DeclaringType.html": {
    "href": "api/Riptide.InvalidHandlerSignatureException.DeclaringType.html",
    "title": "DeclaringType Field | Riptide Docs",
    "keywords": "DeclaringType Field Namespace : Riptide Assembly : RiptideNetworking.dll The type containing the handler method. public readonly Type DeclaringType Returns Type"
  },
  "api/Riptide.InvalidHandlerSignatureException.HandlerMethodName.html": {
    "href": "api/Riptide.InvalidHandlerSignatureException.HandlerMethodName.html",
    "title": "HandlerMethodName Field | Riptide Docs",
    "keywords": "HandlerMethodName Field Namespace : Riptide Assembly : RiptideNetworking.dll The name of the handler method. public readonly string HandlerMethodName Returns String"
  },
  "api/Riptide.InvalidHandlerSignatureException.html": {
    "href": "api/Riptide.InvalidHandlerSignatureException.html",
    "title": "InvalidHandlerSignatureException Class | Riptide Docs",
    "keywords": "InvalidHandlerSignatureException Class Namespace : Riptide Assembly : RiptideNetworking.dll The exception that is thrown when a method with a MessageHandlerAttribute does not have an acceptable message handler method signature (either Server.MessageHandler or Client.MessageHandler ). public class InvalidHandlerSignatureException : Exception Inheritance Object InvalidHandlerSignatureException Constructors InvalidHandlerSignatureException() Initializes a new InvalidHandlerSignatureException instance. InvalidHandlerSignatureException(String) Initializes a new InvalidHandlerSignatureException instance with a specified error message. InvalidHandlerSignatureException(String, Exception) Initializes a new InvalidHandlerSignatureException instance with a specified error message and a reference to the inner exception that is the cause of this exception. InvalidHandlerSignatureException(Type, String) Initializes a new InvalidHandlerSignatureException instance and constructs an error message from the given information. Fields DeclaringType The type containing the handler method. HandlerMethodName The name of the handler method."
  },
  "api/Riptide.Message.Add.html": {
    "href": "api/Riptide.Message.Add.html",
    "title": "Add Method | Riptide Docs",
    "keywords": "Add Method Namespace : Riptide Assembly : RiptideNetworking.dll Overloads Add(Byte) Adds a single to the message. Add(SByte) Adds a single to the message. Add(Boolean) Adds a to the message. Add(Int16) Adds a to the message. Add(UInt16) Adds a to the message. Add(Int32) Adds an to the message. Add(UInt32) Adds a to the message. Add(Int64) Adds a to the message. Add(UInt64) Adds a to the message. Add(Single) Adds a to the message. Add(Double) Adds a to the message. Add(String) Adds a to the message. Add<T>(T) Adds a serializable to the message. Add(Byte[], Boolean) Adds a array to the message. Add(SByte[], Boolean) Adds an array to the message. Add(Boolean[], Boolean) Adds a array to the message. Add(Int16[], Boolean) Adds a array to the message. Add(UInt16[], Boolean) Adds a array to the message. Add(Int32[], Boolean) Adds an array message. Add(UInt32[], Boolean) Adds a array to the message. Add(Int64[], Boolean) Adds a array to the message. Add(UInt64[], Boolean) Adds a array to the message. Add(Single[], Boolean) Adds a array to the message. Add(Double[], Boolean) Adds a array to the message. Add(String[], Boolean) Adds a array to the message. Add<T>(T[], Boolean) Adds an array of serializables to the message. Add(Byte) Adds a single to the message. public Message Add(byte value) Parameters Byte value The to add. Returns Message The message that the was added to. Remarks This method is simply an alternative way of calling AddByte(Byte) . Add(SByte) Adds a single to the message. public Message Add(sbyte value) Parameters SByte value The to add. Returns Message The message that the was added to. Remarks This method is simply an alternative way of calling AddSByte(SByte) . Add(Boolean) Adds a to the message. public Message Add(bool value) Parameters Boolean value The to add. Returns Message The message that the was added to. Remarks This method is simply an alternative way of calling AddBool(Boolean) . Add(Int16) Adds a to the message. public Message Add(short value) Parameters Int16 value The to add. Returns Message The message that the was added to. Remarks This method is simply an alternative way of calling AddShort(Int16) . Add(UInt16) Adds a to the message. public Message Add(ushort value) Parameters UInt16 value The to add. Returns Message The message that the was added to. Remarks This method is simply an alternative way of calling AddUShort(UInt16) . Add(Int32) Adds an to the message. public Message Add(int value) Parameters Int32 value The to add. Returns Message The message that the was added to. Remarks This method is simply an alternative way of calling AddInt(Int32) . Add(UInt32) Adds a to the message. public Message Add(uint value) Parameters UInt32 value The to add. Returns Message The message that the was added to. Remarks This method is simply an alternative way of calling AddUInt(UInt32) . Add(Int64) Adds a to the message. public Message Add(long value) Parameters Int64 value The to add. Returns Message The message that the was added to. Remarks This method is simply an alternative way of calling AddLong(Int64) . Add(UInt64) Adds a to the message. public Message Add(ulong value) Parameters UInt64 value The to add. Returns Message The message that the was added to. Remarks This method is simply an alternative way of calling AddULong(UInt64) . Add(Single) Adds a to the message. public Message Add(float value) Parameters Single value The to add. Returns Message The message that the was added to. Remarks This method is simply an alternative way of calling AddFloat(Single) . Add(Double) Adds a to the message. public Message Add(double value) Parameters Double value The to add. Returns Message The message that the was added to. Remarks This method is simply an alternative way of calling AddDouble(Double) . Add(String) Adds a to the message. public Message Add(string value) Parameters String value The to add. Returns Message The message that the was added to. Remarks This method is simply an alternative way of calling AddString(String) . Add<T>(T) Adds a serializable to the message. public Message Add<T>(T value) where T : IMessageSerializable Parameters T value The serializable to add. Returns Message The message that the serializable was added to. Type Parameters T Remarks This method is simply an alternative way of calling AddSerializable<T>(T) . Add(Byte[], Boolean) Adds a array to the message. public Message Add(byte[] array, bool includeLength = true) Parameters Byte [] array The array to add. Boolean includeLength Whether or not to include the length of the array in the message. Returns Message The message that the array was added to. Remarks This method is simply an alternative way of calling AddBytes(Byte[], Boolean) . Add(SByte[], Boolean) Adds an array to the message. public Message Add(sbyte[] array, bool includeLength = true) Parameters SByte [] array The array to add. Boolean includeLength Whether or not to include the length of the array in the message. Returns Message The message that the array was added to. Remarks This method is simply an alternative way of calling AddSBytes(SByte[], Boolean) . Add(Boolean[], Boolean) Adds a array to the message. public Message Add(bool[] array, bool includeLength = true) Parameters Boolean [] array The array to add. Boolean includeLength Whether or not to include the length of the array in the message. Returns Message The message that the array was added to. Remarks This method is simply an alternative way of calling AddBools(Boolean[], Boolean) . Add(Int16[], Boolean) Adds a array to the message. public Message Add(short[] array, bool includeLength = true) Parameters Int16 [] array The array to add. Boolean includeLength Whether or not to include the length of the array in the message. Returns Message The message that the array was added to. Remarks This method is simply an alternative way of calling AddShorts(Int16[], Boolean) . Add(UInt16[], Boolean) Adds a array to the message. public Message Add(ushort[] array, bool includeLength = true) Parameters UInt16 [] array The array to add. Boolean includeLength Whether or not to include the length of the array in the message. Returns Message The message that the array was added to. Remarks This method is simply an alternative way of calling AddUShorts(UInt16[], Boolean) . Add(Int32[], Boolean) Adds an array message. public Message Add(int[] array, bool includeLength = true) Parameters Int32 [] array The array to add. Boolean includeLength Whether or not to include the length of the array in the message. Returns Message The message that the array was added to. Remarks This method is simply an alternative way of calling AddInts(Int32[], Boolean) . Add(UInt32[], Boolean) Adds a array to the message. public Message Add(uint[] array, bool includeLength = true) Parameters UInt32 [] array The array to add. Boolean includeLength Whether or not to include the length of the array in the message. Returns Message The message that the array was added to. Remarks This method is simply an alternative way of calling AddUInts(UInt32[], Boolean) . Add(Int64[], Boolean) Adds a array to the message. public Message Add(long[] array, bool includeLength = true) Parameters Int64 [] array The array to add. Boolean includeLength Whether or not to include the length of the array in the message. Returns Message The message that the array was added to. Remarks This method is simply an alternative way of calling AddLongs(Int64[], Boolean) . Add(UInt64[], Boolean) Adds a array to the message. public Message Add(ulong[] array, bool includeLength = true) Parameters UInt64 [] array The array to add. Boolean includeLength Whether or not to include the length of the array in the message. Returns Message The message that the array was added to. Remarks This method is simply an alternative way of calling AddULongs(UInt64[], Boolean) . Add(Single[], Boolean) Adds a array to the message. public Message Add(float[] array, bool includeLength = true) Parameters Single [] array The array to add. Boolean includeLength Whether or not to include the length of the array in the message. Returns Message The message that the array was added to. Remarks This method is simply an alternative way of calling AddFloats(Single[], Boolean) . Add(Double[], Boolean) Adds a array to the message. public Message Add(double[] array, bool includeLength = true) Parameters Double [] array The array to add. Boolean includeLength Whether or not to include the length of the array in the message. Returns Message The message that the array was added to. Remarks This method is simply an alternative way of calling AddDoubles(Double[], Boolean) . Add(String[], Boolean) Adds a array to the message. public Message Add(string[] array, bool includeLength = true) Parameters String [] array The array to add. Boolean includeLength Whether or not to include the length of the array in the message. Returns Message The message that the array was added to. Remarks This method is simply an alternative way of calling AddStrings(String[], Boolean) . Add<T>(T[], Boolean) Adds an array of serializables to the message. public Message Add<T>(T[] array, bool includeLength = true) where T : IMessageSerializable, new() Parameters T[] array The array to add. Boolean includeLength Whether or not to include the length of the array in the message. Returns Message The message that the array was added to. Type Parameters T Remarks This method is simply an alternative way of calling AddSerializables<T>(T[], Boolean) ."
  },
  "api/Riptide.Message.AddBool.html": {
    "href": "api/Riptide.Message.AddBool.html",
    "title": "AddBool Method | Riptide Docs",
    "keywords": "AddBool Method Namespace : Riptide Assembly : RiptideNetworking.dll AddBool(Boolean) Adds a to the message. public Message AddBool(bool value) Parameters Boolean value The to add. Returns Message The message that the was added to."
  },
  "api/Riptide.Message.AddBools.html": {
    "href": "api/Riptide.Message.AddBools.html",
    "title": "AddBools Method | Riptide Docs",
    "keywords": "AddBools Method Namespace : Riptide Assembly : RiptideNetworking.dll AddBools(Boolean[], Boolean) Adds a array to the message. public Message AddBools(bool[] array, bool includeLength = true) Parameters Boolean [] array The array to add. Boolean includeLength Whether or not to include the length of the array in the message. Returns Message The message that the array was added to."
  },
  "api/Riptide.Message.AddByte.html": {
    "href": "api/Riptide.Message.AddByte.html",
    "title": "AddByte Method | Riptide Docs",
    "keywords": "AddByte Method Namespace : Riptide Assembly : RiptideNetworking.dll AddByte(Byte) Adds a single to the message. public Message AddByte(byte value) Parameters Byte value The to add. Returns Message The message that the was added to."
  },
  "api/Riptide.Message.AddBytes.html": {
    "href": "api/Riptide.Message.AddBytes.html",
    "title": "AddBytes Method | Riptide Docs",
    "keywords": "AddBytes Method Namespace : Riptide Assembly : RiptideNetworking.dll AddBytes(Byte[], Boolean) Adds a array to the message. public Message AddBytes(byte[] array, bool includeLength = true) Parameters Byte [] array The array to add. Boolean includeLength Whether or not to include the length of the array in the message. Returns Message The message that the array was added to."
  },
  "api/Riptide.Message.AddDouble.html": {
    "href": "api/Riptide.Message.AddDouble.html",
    "title": "AddDouble Method | Riptide Docs",
    "keywords": "AddDouble Method Namespace : Riptide Assembly : RiptideNetworking.dll AddDouble(Double) Adds a to the message. public Message AddDouble(double value) Parameters Double value The to add. Returns Message The message that the was added to."
  },
  "api/Riptide.Message.AddDoubles.html": {
    "href": "api/Riptide.Message.AddDoubles.html",
    "title": "AddDoubles Method | Riptide Docs",
    "keywords": "AddDoubles Method Namespace : Riptide Assembly : RiptideNetworking.dll AddDoubles(Double[], Boolean) Adds a array to the message. public Message AddDoubles(double[] array, bool includeLength = true) Parameters Double [] array The array to add. Boolean includeLength Whether or not to include the length of the array in the message. Returns Message The message that the array was added to."
  },
  "api/Riptide.Message.AddFloat.html": {
    "href": "api/Riptide.Message.AddFloat.html",
    "title": "AddFloat Method | Riptide Docs",
    "keywords": "AddFloat Method Namespace : Riptide Assembly : RiptideNetworking.dll AddFloat(Single) Adds a to the message. public Message AddFloat(float value) Parameters Single value The to add. Returns Message The message that the was added to."
  },
  "api/Riptide.Message.AddFloats.html": {
    "href": "api/Riptide.Message.AddFloats.html",
    "title": "AddFloats Method | Riptide Docs",
    "keywords": "AddFloats Method Namespace : Riptide Assembly : RiptideNetworking.dll AddFloats(Single[], Boolean) Adds a array to the message. public Message AddFloats(float[] array, bool includeLength = true) Parameters Single [] array The array to add. Boolean includeLength Whether or not to include the length of the array in the message. Returns Message The message that the array was added to."
  },
  "api/Riptide.Message.AddInt.html": {
    "href": "api/Riptide.Message.AddInt.html",
    "title": "AddInt Method | Riptide Docs",
    "keywords": "AddInt Method Namespace : Riptide Assembly : RiptideNetworking.dll AddInt(Int32) Adds an to the message. public Message AddInt(int value) Parameters Int32 value The to add. Returns Message The message that the was added to."
  },
  "api/Riptide.Message.AddInts.html": {
    "href": "api/Riptide.Message.AddInts.html",
    "title": "AddInts Method | Riptide Docs",
    "keywords": "AddInts Method Namespace : Riptide Assembly : RiptideNetworking.dll AddInts(Int32[], Boolean) Adds an array message. public Message AddInts(int[] array, bool includeLength = true) Parameters Int32 [] array The array to add. Boolean includeLength Whether or not to include the length of the array in the message. Returns Message The message that the array was added to."
  },
  "api/Riptide.Message.AddLong.html": {
    "href": "api/Riptide.Message.AddLong.html",
    "title": "AddLong Method | Riptide Docs",
    "keywords": "AddLong Method Namespace : Riptide Assembly : RiptideNetworking.dll AddLong(Int64) Adds a to the message. public Message AddLong(long value) Parameters Int64 value The to add. Returns Message The message that the was added to."
  },
  "api/Riptide.Message.AddLongs.html": {
    "href": "api/Riptide.Message.AddLongs.html",
    "title": "AddLongs Method | Riptide Docs",
    "keywords": "AddLongs Method Namespace : Riptide Assembly : RiptideNetworking.dll AddLongs(Int64[], Boolean) Adds a array to the message. public Message AddLongs(long[] array, bool includeLength = true) Parameters Int64 [] array The array to add. Boolean includeLength Whether or not to include the length of the array in the message. Returns Message The message that the array was added to."
  },
  "api/Riptide.Message.AddSByte.html": {
    "href": "api/Riptide.Message.AddSByte.html",
    "title": "AddSByte Method | Riptide Docs",
    "keywords": "AddSByte Method Namespace : Riptide Assembly : RiptideNetworking.dll AddSByte(SByte) Adds a single to the message. public Message AddSByte(sbyte value) Parameters SByte value The to add. Returns Message The message that the was added to."
  },
  "api/Riptide.Message.AddSBytes.html": {
    "href": "api/Riptide.Message.AddSBytes.html",
    "title": "AddSBytes Method | Riptide Docs",
    "keywords": "AddSBytes Method Namespace : Riptide Assembly : RiptideNetworking.dll AddSBytes(SByte[], Boolean) Adds an array to the message. public Message AddSBytes(sbyte[] array, bool includeLength = true) Parameters SByte [] array The array to add. Boolean includeLength Whether or not to include the length of the array in the message. Returns Message The message that the array was added to."
  },
  "api/Riptide.Message.AddSerializable.html": {
    "href": "api/Riptide.Message.AddSerializable.html",
    "title": "AddSerializable Method | Riptide Docs",
    "keywords": "AddSerializable Method Namespace : Riptide Assembly : RiptideNetworking.dll AddSerializable<T>(T) Adds a serializable to the message. public Message AddSerializable<T>(T value) where T : IMessageSerializable Parameters T value The serializable to add. Returns Message The message that the serializable was added to. Type Parameters T"
  },
  "api/Riptide.Message.AddSerializables.html": {
    "href": "api/Riptide.Message.AddSerializables.html",
    "title": "AddSerializables Method | Riptide Docs",
    "keywords": "AddSerializables Method Namespace : Riptide Assembly : RiptideNetworking.dll AddSerializables<T>(T[], Boolean) Adds an array of serializables to the message. public Message AddSerializables<T>(T[] array, bool includeLength = true) where T : IMessageSerializable Parameters T[] array The array to add. Boolean includeLength Whether or not to include the length of the array in the message. Returns Message The message that the array was added to. Type Parameters T"
  },
  "api/Riptide.Message.AddShort.html": {
    "href": "api/Riptide.Message.AddShort.html",
    "title": "AddShort Method | Riptide Docs",
    "keywords": "AddShort Method Namespace : Riptide Assembly : RiptideNetworking.dll AddShort(Int16) Adds a to the message. public Message AddShort(short value) Parameters Int16 value The to add. Returns Message The message that the was added to."
  },
  "api/Riptide.Message.AddShorts.html": {
    "href": "api/Riptide.Message.AddShorts.html",
    "title": "AddShorts Method | Riptide Docs",
    "keywords": "AddShorts Method Namespace : Riptide Assembly : RiptideNetworking.dll AddShorts(Int16[], Boolean) Adds a array to the message. public Message AddShorts(short[] array, bool includeLength = true) Parameters Int16 [] array The array to add. Boolean includeLength Whether or not to include the length of the array in the message. Returns Message The message that the array was added to."
  },
  "api/Riptide.Message.AddString.html": {
    "href": "api/Riptide.Message.AddString.html",
    "title": "AddString Method | Riptide Docs",
    "keywords": "AddString Method Namespace : Riptide Assembly : RiptideNetworking.dll AddString(String) Adds a to the message. public Message AddString(string value) Parameters String value The to add. Returns Message The message that the was added to."
  },
  "api/Riptide.Message.AddStrings.html": {
    "href": "api/Riptide.Message.AddStrings.html",
    "title": "AddStrings Method | Riptide Docs",
    "keywords": "AddStrings Method Namespace : Riptide Assembly : RiptideNetworking.dll AddStrings(String[], Boolean) Adds a array to the message. public Message AddStrings(string[] array, bool includeLength = true) Parameters String [] array The array to add. Boolean includeLength Whether or not to include the length of the array in the message. Returns Message The message that the array was added to."
  },
  "api/Riptide.Message.AddUInt.html": {
    "href": "api/Riptide.Message.AddUInt.html",
    "title": "AddUInt Method | Riptide Docs",
    "keywords": "AddUInt Method Namespace : Riptide Assembly : RiptideNetworking.dll AddUInt(UInt32) Adds a to the message. public Message AddUInt(uint value) Parameters UInt32 value The to add. Returns Message The message that the was added to."
  },
  "api/Riptide.Message.AddUInts.html": {
    "href": "api/Riptide.Message.AddUInts.html",
    "title": "AddUInts Method | Riptide Docs",
    "keywords": "AddUInts Method Namespace : Riptide Assembly : RiptideNetworking.dll AddUInts(UInt32[], Boolean) Adds a array to the message. public Message AddUInts(uint[] array, bool includeLength = true) Parameters UInt32 [] array The array to add. Boolean includeLength Whether or not to include the length of the array in the message. Returns Message The message that the array was added to."
  },
  "api/Riptide.Message.AddULong.html": {
    "href": "api/Riptide.Message.AddULong.html",
    "title": "AddULong Method | Riptide Docs",
    "keywords": "AddULong Method Namespace : Riptide Assembly : RiptideNetworking.dll AddULong(UInt64) Adds a to the message. public Message AddULong(ulong value) Parameters UInt64 value The to add. Returns Message The message that the was added to."
  },
  "api/Riptide.Message.AddULongs.html": {
    "href": "api/Riptide.Message.AddULongs.html",
    "title": "AddULongs Method | Riptide Docs",
    "keywords": "AddULongs Method Namespace : Riptide Assembly : RiptideNetworking.dll AddULongs(UInt64[], Boolean) Adds a array to the message. public Message AddULongs(ulong[] array, bool includeLength = true) Parameters UInt64 [] array The array to add. Boolean includeLength Whether or not to include the length of the array in the message. Returns Message The message that the array was added to."
  },
  "api/Riptide.Message.AddUShort.html": {
    "href": "api/Riptide.Message.AddUShort.html",
    "title": "AddUShort Method | Riptide Docs",
    "keywords": "AddUShort Method Namespace : Riptide Assembly : RiptideNetworking.dll AddUShort(UInt16) Adds a to the message. public Message AddUShort(ushort value) Parameters UInt16 value The to add. Returns Message The message that the was added to."
  },
  "api/Riptide.Message.AddUShorts.html": {
    "href": "api/Riptide.Message.AddUShorts.html",
    "title": "AddUShorts Method | Riptide Docs",
    "keywords": "AddUShorts Method Namespace : Riptide Assembly : RiptideNetworking.dll AddUShorts(UInt16[], Boolean) Adds a array to the message. public Message AddUShorts(ushort[] array, bool includeLength = true) Parameters UInt16 [] array The array to add. Boolean includeLength Whether or not to include the length of the array in the message. Returns Message The message that the array was added to."
  },
  "api/Riptide.Message.Create.html": {
    "href": "api/Riptide.Message.Create.html",
    "title": "Create Method | Riptide Docs",
    "keywords": "Create Method Namespace : Riptide Assembly : RiptideNetworking.dll Overloads Create() Gets a usable message instance. Create(MessageSendMode, UInt16) Gets a message instance that can be used for sending. Create(MessageSendMode, Enum) Gets a message instance that can be used for sending. Create() Gets a usable message instance. public static Message Create() Returns Message A message instance ready to be used. Create(MessageSendMode, UInt16) Gets a message instance that can be used for sending. public static Message Create(MessageSendMode sendMode, ushort id) Parameters MessageSendMode sendMode The mode in which the message should be sent. UInt16 id The message ID. Returns Message A message instance ready to be used for sending. Create(MessageSendMode, Enum) Gets a message instance that can be used for sending. public static Message Create(MessageSendMode sendMode, Enum id) Parameters MessageSendMode sendMode The mode in which the message should be sent. Enum id Returns Message A message instance ready to be used for sending. Remarks NOTE: id will be cast to a . You should ensure that its value never exceeds that of , otherwise you'll encounter unexpected behaviour when handling messages."
  },
  "api/Riptide.Message.GetBool.html": {
    "href": "api/Riptide.Message.GetBool.html",
    "title": "GetBool Method | Riptide Docs",
    "keywords": "GetBool Method Namespace : Riptide Assembly : RiptideNetworking.dll GetBool() Retrieves a from the message. public bool GetBool() Returns Boolean The that was retrieved."
  },
  "api/Riptide.Message.GetBools.html": {
    "href": "api/Riptide.Message.GetBools.html",
    "title": "GetBools Method | Riptide Docs",
    "keywords": "GetBools Method Namespace : Riptide Assembly : RiptideNetworking.dll Overloads GetBools() Retrieves a array from the message. GetBools(Int32) Retrieves a array from the message. GetBools(Int32, Boolean[], Int32) Populates a array with bools retrieved from the message. GetBools() Retrieves a array from the message. public bool[] GetBools() Returns Boolean [] The array that was retrieved. GetBools(Int32) Retrieves a array from the message. public bool[] GetBools(int amount) Parameters Int32 amount The amount of bools to retrieve. Returns Boolean [] The array that was retrieved. GetBools(Int32, Boolean[], Int32) Populates a array with bools retrieved from the message. public void GetBools(int amount, bool[] intoArray, int startIndex = 0) Parameters Int32 amount The amount of bools to retrieve. Boolean [] intoArray The array to populate. Int32 startIndex The position at which to start populating the array."
  },
  "api/Riptide.Message.GetByte.html": {
    "href": "api/Riptide.Message.GetByte.html",
    "title": "GetByte Method | Riptide Docs",
    "keywords": "GetByte Method Namespace : Riptide Assembly : RiptideNetworking.dll GetByte() Retrieves a single from the message. public byte GetByte() Returns Byte The that was retrieved."
  },
  "api/Riptide.Message.GetBytes.html": {
    "href": "api/Riptide.Message.GetBytes.html",
    "title": "GetBytes Method | Riptide Docs",
    "keywords": "GetBytes Method Namespace : Riptide Assembly : RiptideNetworking.dll Overloads GetBytes() Retrieves a array from the message. GetBytes(Int32) Retrieves a array from the message. GetBytes(Int32, Byte[], Int32) Populates a array with bytes retrieved from the message. GetBytes() Retrieves a array from the message. public byte[] GetBytes() Returns Byte [] The array that was retrieved. GetBytes(Int32) Retrieves a array from the message. public byte[] GetBytes(int amount) Parameters Int32 amount The amount of bytes to retrieve. Returns Byte [] The array that was retrieved. GetBytes(Int32, Byte[], Int32) Populates a array with bytes retrieved from the message. public void GetBytes(int amount, byte[] intoArray, int startIndex = 0) Parameters Int32 amount The amount of bytes to retrieve. Byte [] intoArray The array to populate. Int32 startIndex The position at which to start populating the array."
  },
  "api/Riptide.Message.GetDouble.html": {
    "href": "api/Riptide.Message.GetDouble.html",
    "title": "GetDouble Method | Riptide Docs",
    "keywords": "GetDouble Method Namespace : Riptide Assembly : RiptideNetworking.dll GetDouble() Retrieves a from the message. public double GetDouble() Returns Double The that was retrieved."
  },
  "api/Riptide.Message.GetDoubles.html": {
    "href": "api/Riptide.Message.GetDoubles.html",
    "title": "GetDoubles Method | Riptide Docs",
    "keywords": "GetDoubles Method Namespace : Riptide Assembly : RiptideNetworking.dll Overloads GetDoubles() Retrieves a array from the message. GetDoubles(Int32) Retrieves a array from the message. GetDoubles(Int32, Double[], Int32) Populates a array with doubles retrieved from the message. GetDoubles() Retrieves a array from the message. public double[] GetDoubles() Returns Double [] The array that was retrieved. GetDoubles(Int32) Retrieves a array from the message. public double[] GetDoubles(int amount) Parameters Int32 amount The amount of doubles to retrieve. Returns Double [] The array that was retrieved. GetDoubles(Int32, Double[], Int32) Populates a array with doubles retrieved from the message. public void GetDoubles(int amount, double[] intoArray, int startIndex = 0) Parameters Int32 amount The amount of doubles to retrieve. Double [] intoArray The array to populate. Int32 startIndex The position at which to start populating the array."
  },
  "api/Riptide.Message.GetFloat.html": {
    "href": "api/Riptide.Message.GetFloat.html",
    "title": "GetFloat Method | Riptide Docs",
    "keywords": "GetFloat Method Namespace : Riptide Assembly : RiptideNetworking.dll GetFloat() Retrieves a from the message. public float GetFloat() Returns Single The that was retrieved."
  },
  "api/Riptide.Message.GetFloats.html": {
    "href": "api/Riptide.Message.GetFloats.html",
    "title": "GetFloats Method | Riptide Docs",
    "keywords": "GetFloats Method Namespace : Riptide Assembly : RiptideNetworking.dll Overloads GetFloats() Retrieves a array from the message. GetFloats(Int32) Retrieves a array from the message. GetFloats(Int32, Single[], Int32) Populates a array with floats retrieved from the message. GetFloats() Retrieves a array from the message. public float[] GetFloats() Returns Single [] The array that was retrieved. GetFloats(Int32) Retrieves a array from the message. public float[] GetFloats(int amount) Parameters Int32 amount The amount of floats to retrieve. Returns Single [] The array that was retrieved. GetFloats(Int32, Single[], Int32) Populates a array with floats retrieved from the message. public void GetFloats(int amount, float[] intoArray, int startIndex = 0) Parameters Int32 amount The amount of floats to retrieve. Single [] intoArray The array to populate. Int32 startIndex The position at which to start populating the array."
  },
  "api/Riptide.Message.GetInt.html": {
    "href": "api/Riptide.Message.GetInt.html",
    "title": "GetInt Method | Riptide Docs",
    "keywords": "GetInt Method Namespace : Riptide Assembly : RiptideNetworking.dll GetInt() Retrieves an from the message. public int GetInt() Returns Int32 The that was retrieved."
  },
  "api/Riptide.Message.GetInts.html": {
    "href": "api/Riptide.Message.GetInts.html",
    "title": "GetInts Method | Riptide Docs",
    "keywords": "GetInts Method Namespace : Riptide Assembly : RiptideNetworking.dll Overloads GetInts() Retrieves an array from the message. GetInts(Int32) Retrieves an array from the message. GetInts(Int32, Int32[], Int32) Populates an array with ints retrieved from the message. GetInts() Retrieves an array from the message. public int[] GetInts() Returns Int32 [] The array that was retrieved. GetInts(Int32) Retrieves an array from the message. public int[] GetInts(int amount) Parameters Int32 amount The amount of ints to retrieve. Returns Int32 [] The array that was retrieved. GetInts(Int32, Int32[], Int32) Populates an array with ints retrieved from the message. public void GetInts(int amount, int[] intoArray, int startIndex = 0) Parameters Int32 amount The amount of ints to retrieve. Int32 [] intoArray The array to populate. Int32 startIndex The position at which to start populating the array."
  },
  "api/Riptide.Message.GetLong.html": {
    "href": "api/Riptide.Message.GetLong.html",
    "title": "GetLong Method | Riptide Docs",
    "keywords": "GetLong Method Namespace : Riptide Assembly : RiptideNetworking.dll GetLong() Retrieves a from the message. public long GetLong() Returns Int64 The that was retrieved."
  },
  "api/Riptide.Message.GetLongs.html": {
    "href": "api/Riptide.Message.GetLongs.html",
    "title": "GetLongs Method | Riptide Docs",
    "keywords": "GetLongs Method Namespace : Riptide Assembly : RiptideNetworking.dll Overloads GetLongs() Retrieves a array from the message. GetLongs(Int32) Retrieves a array from the message. GetLongs(Int32, Int64[], Int32) Populates a array with longs retrieved from the message. GetLongs() Retrieves a array from the message. public long[] GetLongs() Returns Int64 [] The array that was retrieved. GetLongs(Int32) Retrieves a array from the message. public long[] GetLongs(int amount) Parameters Int32 amount The amount of longs to retrieve. Returns Int64 [] The array that was retrieved. GetLongs(Int32, Int64[], Int32) Populates a array with longs retrieved from the message. public void GetLongs(int amount, long[] intoArray, int startIndex = 0) Parameters Int32 amount The amount of longs to retrieve. Int64 [] intoArray The array to populate. Int32 startIndex The position at which to start populating the array."
  },
  "api/Riptide.Message.GetSByte.html": {
    "href": "api/Riptide.Message.GetSByte.html",
    "title": "GetSByte Method | Riptide Docs",
    "keywords": "GetSByte Method Namespace : Riptide Assembly : RiptideNetworking.dll GetSByte() Retrieves a single from the message. public sbyte GetSByte() Returns SByte The that was retrieved."
  },
  "api/Riptide.Message.GetSBytes.html": {
    "href": "api/Riptide.Message.GetSBytes.html",
    "title": "GetSBytes Method | Riptide Docs",
    "keywords": "GetSBytes Method Namespace : Riptide Assembly : RiptideNetworking.dll Overloads GetSBytes() Retrieves an array from the message. GetSBytes(Int32) Retrieves an array from the message. GetSBytes(Int32, SByte[], Int32) Populates a array with bytes retrieved from the message. GetSBytes() Retrieves an array from the message. public sbyte[] GetSBytes() Returns SByte [] The array that was retrieved. GetSBytes(Int32) Retrieves an array from the message. public sbyte[] GetSBytes(int amount) Parameters Int32 amount The amount of sbytes to retrieve. Returns SByte [] The array that was retrieved. GetSBytes(Int32, SByte[], Int32) Populates a array with bytes retrieved from the message. public void GetSBytes(int amount, sbyte[] intArray, int startIndex = 0) Parameters Int32 amount The amount of sbytes to retrieve. SByte [] intArray The array to populate. Int32 startIndex The position at which to start populating intArray ."
  },
  "api/Riptide.Message.GetSerializable.html": {
    "href": "api/Riptide.Message.GetSerializable.html",
    "title": "GetSerializable Method | Riptide Docs",
    "keywords": "GetSerializable Method Namespace : Riptide Assembly : RiptideNetworking.dll GetSerializable<T>() Retrieves a serializable from the message. public T GetSerializable<T>() where T : IMessageSerializable, new() Returns T The serializable that was retrieved. Type Parameters T"
  },
  "api/Riptide.Message.GetSerializables.html": {
    "href": "api/Riptide.Message.GetSerializables.html",
    "title": "GetSerializables Method | Riptide Docs",
    "keywords": "GetSerializables Method Namespace : Riptide Assembly : RiptideNetworking.dll Overloads GetSerializables<T>() Retrieves an array of serializables from the message. GetSerializables<T>(Int32) Retrieves an array of serializables from the message. GetSerializables<T>(Int32, T[], Int32) Populates an array of serializables retrieved from the message. GetSerializables<T>() Retrieves an array of serializables from the message. public T[] GetSerializables<T>() where T : IMessageSerializable, new() Returns T[] The array that was retrieved. Type Parameters T GetSerializables<T>(Int32) Retrieves an array of serializables from the message. public T[] GetSerializables<T>(int amount) where T : IMessageSerializable, new() Parameters Int32 amount The amount of serializables to retrieve. Returns T[] The array that was retrieved. Type Parameters T GetSerializables<T>(Int32, T[], Int32) Populates an array of serializables retrieved from the message. public void GetSerializables<T>(int amount, T[] intoArray, int startIndex = 0) where T : IMessageSerializable, new() Parameters Int32 amount The amount of serializables to retrieve. T[] intoArray The array to populate. Int32 startIndex The position at which to start populating the array. Type Parameters T"
  },
  "api/Riptide.Message.GetShort.html": {
    "href": "api/Riptide.Message.GetShort.html",
    "title": "GetShort Method | Riptide Docs",
    "keywords": "GetShort Method Namespace : Riptide Assembly : RiptideNetworking.dll GetShort() Retrieves a from the message. public short GetShort() Returns Int16 The that was retrieved."
  },
  "api/Riptide.Message.GetShorts.html": {
    "href": "api/Riptide.Message.GetShorts.html",
    "title": "GetShorts Method | Riptide Docs",
    "keywords": "GetShorts Method Namespace : Riptide Assembly : RiptideNetworking.dll Overloads GetShorts() Retrieves a array from the message. GetShorts(Int32) Retrieves a array from the message. GetShorts(Int32, Int16[], Int32) Populates a array with shorts retrieved from the message. GetShorts() Retrieves a array from the message. public short[] GetShorts() Returns Int16 [] The array that was retrieved. GetShorts(Int32) Retrieves a array from the message. public short[] GetShorts(int amount) Parameters Int32 amount The amount of shorts to retrieve. Returns Int16 [] The array that was retrieved. GetShorts(Int32, Int16[], Int32) Populates a array with shorts retrieved from the message. public void GetShorts(int amount, short[] intoArray, int startIndex = 0) Parameters Int32 amount The amount of shorts to retrieve. Int16 [] intoArray The array to populate. Int32 startIndex The position at which to start populating the array."
  },
  "api/Riptide.Message.GetString.html": {
    "href": "api/Riptide.Message.GetString.html",
    "title": "GetString Method | Riptide Docs",
    "keywords": "GetString Method Namespace : Riptide Assembly : RiptideNetworking.dll GetString() Retrieves a from the message. public string GetString() Returns String The that was retrieved."
  },
  "api/Riptide.Message.GetStrings.html": {
    "href": "api/Riptide.Message.GetStrings.html",
    "title": "GetStrings Method | Riptide Docs",
    "keywords": "GetStrings Method Namespace : Riptide Assembly : RiptideNetworking.dll Overloads GetStrings() Retrieves a array from the message. GetStrings(Int32) Retrieves a array from the message. GetStrings(Int32, String[], Int32) Populates a array with strings retrieved from the message. GetStrings() Retrieves a array from the message. public string[] GetStrings() Returns String [] The array that was retrieved. GetStrings(Int32) Retrieves a array from the message. public string[] GetStrings(int amount) Parameters Int32 amount The amount of strings to retrieve. Returns String [] The array that was retrieved. GetStrings(Int32, String[], Int32) Populates a array with strings retrieved from the message. public void GetStrings(int amount, string[] intoArray, int startIndex = 0) Parameters Int32 amount The amount of strings to retrieve. String [] intoArray The array to populate. Int32 startIndex The position at which to start populating the array."
  },
  "api/Riptide.Message.GetUInt.html": {
    "href": "api/Riptide.Message.GetUInt.html",
    "title": "GetUInt Method | Riptide Docs",
    "keywords": "GetUInt Method Namespace : Riptide Assembly : RiptideNetworking.dll GetUInt() Retrieves a from the message. public uint GetUInt() Returns UInt32 The that was retrieved."
  },
  "api/Riptide.Message.GetUInts.html": {
    "href": "api/Riptide.Message.GetUInts.html",
    "title": "GetUInts Method | Riptide Docs",
    "keywords": "GetUInts Method Namespace : Riptide Assembly : RiptideNetworking.dll Overloads GetUInts() Retrieves a array from the message. GetUInts(Int32) Retrieves a array from the message. GetUInts(Int32, UInt32[], Int32) Populates a array with uints retrieved from the message. GetUInts() Retrieves a array from the message. public uint[] GetUInts() Returns UInt32 [] The array that was retrieved. GetUInts(Int32) Retrieves a array from the message. public uint[] GetUInts(int amount) Parameters Int32 amount The amount of uints to retrieve. Returns UInt32 [] The array that was retrieved. GetUInts(Int32, UInt32[], Int32) Populates a array with uints retrieved from the message. public void GetUInts(int amount, uint[] intoArray, int startIndex = 0) Parameters Int32 amount The amount of uints to retrieve. UInt32 [] intoArray The array to populate. Int32 startIndex The position at which to start populating the array."
  },
  "api/Riptide.Message.GetULong.html": {
    "href": "api/Riptide.Message.GetULong.html",
    "title": "GetULong Method | Riptide Docs",
    "keywords": "GetULong Method Namespace : Riptide Assembly : RiptideNetworking.dll GetULong() Retrieves a from the message. public ulong GetULong() Returns UInt64 The that was retrieved."
  },
  "api/Riptide.Message.GetULongs.html": {
    "href": "api/Riptide.Message.GetULongs.html",
    "title": "GetULongs Method | Riptide Docs",
    "keywords": "GetULongs Method Namespace : Riptide Assembly : RiptideNetworking.dll Overloads GetULongs() Retrieves a array from the message. GetULongs(Int32) Retrieves a array from the message. GetULongs(Int32, UInt64[], Int32) Populates a array with ulongs retrieved from the message. GetULongs() Retrieves a array from the message. public ulong[] GetULongs() Returns UInt64 [] The array that was retrieved. GetULongs(Int32) Retrieves a array from the message. public ulong[] GetULongs(int amount) Parameters Int32 amount The amount of ulongs to retrieve. Returns UInt64 [] The array that was retrieved. GetULongs(Int32, UInt64[], Int32) Populates a array with ulongs retrieved from the message. public void GetULongs(int amount, ulong[] intoArray, int startIndex = 0) Parameters Int32 amount The amount of ulongs to retrieve. UInt64 [] intoArray The array to populate. Int32 startIndex The position at which to start populating the array."
  },
  "api/Riptide.Message.GetUShort.html": {
    "href": "api/Riptide.Message.GetUShort.html",
    "title": "GetUShort Method | Riptide Docs",
    "keywords": "GetUShort Method Namespace : Riptide Assembly : RiptideNetworking.dll GetUShort() Retrieves a from the message. public ushort GetUShort() Returns UInt16 The that was retrieved."
  },
  "api/Riptide.Message.GetUShorts.html": {
    "href": "api/Riptide.Message.GetUShorts.html",
    "title": "GetUShorts Method | Riptide Docs",
    "keywords": "GetUShorts Method Namespace : Riptide Assembly : RiptideNetworking.dll Overloads GetUShorts() Retrieves a array from the message. GetUShorts(Int32) Retrieves a array from the message. GetUShorts(Int32, UInt16[], Int32) Populates a array with ushorts retrieved from the message. GetUShorts() Retrieves a array from the message. public ushort[] GetUShorts() Returns UInt16 [] The array that was retrieved. GetUShorts(Int32) Retrieves a array from the message. public ushort[] GetUShorts(int amount) Parameters Int32 amount The amount of ushorts to retrieve. Returns UInt16 [] The array that was retrieved. GetUShorts(Int32, UInt16[], Int32) Populates a array with ushorts retrieved from the message. public void GetUShorts(int amount, ushort[] intoArray, int startIndex = 0) Parameters Int32 amount The amount of ushorts to retrieve. UInt16 [] intoArray The array to populate. Int32 startIndex The position at which to start populating the array."
  },
  "api/Riptide.Message.html": {
    "href": "api/Riptide.Message.html",
    "title": "Message Class | Riptide Docs",
    "keywords": "Message Class Namespace : Riptide Assembly : RiptideNetworking.dll Provides functionality for converting data to bytes and vice versa. public class Message : object Inheritance Object Message Fields MaxHeaderSize The maximum number of bytes required for a message's header. Properties InstancesPerPeer How many messages to add to the pool for each Server or Client instance that is started. MaxPayloadSize The maximum number of bytes of payload data that a message can contain. This value represents how many bytes can be added to a message on top of the MaxHeaderSize . MaxSize The maximum number of bytes that a message can contain, including the MaxHeaderSize . SendMode The message's send mode. UnreadLength The length in bytes of the unread data contained in the message. WrittenLength The length in bytes of the data that has been written to the message. Methods Add(Boolean) Adds a to the message. Add(Boolean[], Boolean) Adds a array to the message. Add(Byte) Adds a single to the message. Add(Byte[], Boolean) Adds a array to the message. Add(Double) Adds a to the message. Add(Double[], Boolean) Adds a array to the message. Add(Int16) Adds a to the message. Add(Int16[], Boolean) Adds a array to the message. Add(Int32) Adds an to the message. Add(Int32[], Boolean) Adds an array message. Add(Int64) Adds a to the message. Add(Int64[], Boolean) Adds a array to the message. Add(SByte) Adds a single to the message. Add(SByte[], Boolean) Adds an array to the message. Add(Single) Adds a to the message. Add(Single[], Boolean) Adds a array to the message. Add(String) Adds a to the message. Add(String[], Boolean) Adds a array to the message. Add(UInt16) Adds a to the message. Add(UInt16[], Boolean) Adds a array to the message. Add(UInt32) Adds a to the message. Add(UInt32[], Boolean) Adds a array to the message. Add(UInt64) Adds a to the message. Add(UInt64[], Boolean) Adds a array to the message. Add<T>(T) Adds a serializable to the message. Add<T>(T[], Boolean) Adds an array of serializables to the message. AddBool(Boolean) Adds a to the message. AddBools(Boolean[], Boolean) Adds a array to the message. AddByte(Byte) Adds a single to the message. AddBytes(Byte[], Boolean) Adds a array to the message. AddDouble(Double) Adds a to the message. AddDoubles(Double[], Boolean) Adds a array to the message. AddFloat(Single) Adds a to the message. AddFloats(Single[], Boolean) Adds a array to the message. AddInt(Int32) Adds an to the message. AddInts(Int32[], Boolean) Adds an array message. AddLong(Int64) Adds a to the message. AddLongs(Int64[], Boolean) Adds a array to the message. AddSByte(SByte) Adds a single to the message. AddSBytes(SByte[], Boolean) Adds an array to the message. AddSerializable<T>(T) Adds a serializable to the message. AddSerializables<T>(T[], Boolean) Adds an array of serializables to the message. AddShort(Int16) Adds a to the message. AddShorts(Int16[], Boolean) Adds a array to the message. AddString(String) Adds a to the message. AddStrings(String[], Boolean) Adds a array to the message. AddUInt(UInt32) Adds a to the message. AddUInts(UInt32[], Boolean) Adds a array to the message. AddULong(UInt64) Adds a to the message. AddULongs(UInt64[], Boolean) Adds a array to the message. AddUShort(UInt16) Adds a to the message. AddUShorts(UInt16[], Boolean) Adds a array to the message. Create() Gets a usable message instance. Create(MessageSendMode, Enum) Gets a message instance that can be used for sending. Create(MessageSendMode, UInt16) Gets a message instance that can be used for sending. GetBool() Retrieves a from the message. GetBools() Retrieves a array from the message. GetBools(Int32) Retrieves a array from the message. GetBools(Int32, Boolean[], Int32) Populates a array with bools retrieved from the message. GetByte() Retrieves a single from the message. GetBytes() Retrieves a array from the message. GetBytes(Int32) Retrieves a array from the message. GetBytes(Int32, Byte[], Int32) Populates a array with bytes retrieved from the message. GetDouble() Retrieves a from the message. GetDoubles() Retrieves a array from the message. GetDoubles(Int32) Retrieves a array from the message. GetDoubles(Int32, Double[], Int32) Populates a array with doubles retrieved from the message. GetFloat() Retrieves a from the message. GetFloats() Retrieves a array from the message. GetFloats(Int32) Retrieves a array from the message. GetFloats(Int32, Single[], Int32) Populates a array with floats retrieved from the message. GetInt() Retrieves an from the message. GetInts() Retrieves an array from the message. GetInts(Int32) Retrieves an array from the message. GetInts(Int32, Int32[], Int32) Populates an array with ints retrieved from the message. GetLong() Retrieves a from the message. GetLongs() Retrieves a array from the message. GetLongs(Int32) Retrieves a array from the message. GetLongs(Int32, Int64[], Int32) Populates a array with longs retrieved from the message. GetSByte() Retrieves a single from the message. GetSBytes() Retrieves an array from the message. GetSBytes(Int32) Retrieves an array from the message. GetSBytes(Int32, SByte[], Int32) Populates a array with bytes retrieved from the message. GetSerializable<T>() Retrieves a serializable from the message. GetSerializables<T>() Retrieves an array of serializables from the message. GetSerializables<T>(Int32) Retrieves an array of serializables from the message. GetSerializables<T>(Int32, T[], Int32) Populates an array of serializables retrieved from the message. GetShort() Retrieves a from the message. GetShorts() Retrieves a array from the message. GetShorts(Int32) Retrieves a array from the message. GetShorts(Int32, Int16[], Int32) Populates a array with shorts retrieved from the message. GetString() Retrieves a from the message. GetStrings() Retrieves a array from the message. GetStrings(Int32) Retrieves a array from the message. GetStrings(Int32, String[], Int32) Populates a array with strings retrieved from the message. GetUInt() Retrieves a from the message. GetUInts() Retrieves a array from the message. GetUInts(Int32) Retrieves a array from the message. GetUInts(Int32, UInt32[], Int32) Populates a array with uints retrieved from the message. GetULong() Retrieves a from the message. GetULongs() Retrieves a array from the message. GetULongs(Int32) Retrieves a array from the message. GetULongs(Int32, UInt64[], Int32) Populates a array with ulongs retrieved from the message. GetUShort() Retrieves a from the message. GetUShorts() Retrieves a array from the message. GetUShorts(Int32) Retrieves a array from the message. GetUShorts(Int32, UInt16[], Int32) Populates a array with ushorts retrieved from the message. Release() Returns the message instance to the internal pool so it can be reused. TrimPool() Trims the message pool to a more appropriate size for how many Server and/or Client instances are currently running."
  },
  "api/Riptide.Message.InstancesPerPeer.html": {
    "href": "api/Riptide.Message.InstancesPerPeer.html",
    "title": "InstancesPerPeer Property | Riptide Docs",
    "keywords": "InstancesPerPeer Property Namespace : Riptide Assembly : RiptideNetworking.dll InstancesPerPeer How many messages to add to the pool for each Server or Client instance that is started. public static byte InstancesPerPeer { get; set; } Property Value Byte Remarks Changes will not affect Server and Client instances which are already running until they are restarted."
  },
  "api/Riptide.Message.MaxHeaderSize.html": {
    "href": "api/Riptide.Message.MaxHeaderSize.html",
    "title": "MaxHeaderSize Field | Riptide Docs",
    "keywords": "MaxHeaderSize Field Namespace : Riptide Assembly : RiptideNetworking.dll The maximum number of bytes required for a message's header. public const int MaxHeaderSize = null Returns Int32 Remarks 1 byte for the actual header, 2 bytes for the sequence ID (only for reliable messages), 2 bytes for the message ID. Messages sent unreliably will use 2 bytes less than this value for the header."
  },
  "api/Riptide.Message.MaxPayloadSize.html": {
    "href": "api/Riptide.Message.MaxPayloadSize.html",
    "title": "MaxPayloadSize Property | Riptide Docs",
    "keywords": "MaxPayloadSize Property Namespace : Riptide Assembly : RiptideNetworking.dll MaxPayloadSize The maximum number of bytes of payload data that a message can contain. This value represents how many bytes can be added to a message on top of the MaxHeaderSize . public static int MaxPayloadSize { get; set; } Property Value Int32"
  },
  "api/Riptide.Message.MaxSize.html": {
    "href": "api/Riptide.Message.MaxSize.html",
    "title": "MaxSize Property | Riptide Docs",
    "keywords": "MaxSize Property Namespace : Riptide Assembly : RiptideNetworking.dll MaxSize The maximum number of bytes that a message can contain, including the MaxHeaderSize . public static int MaxSize { get; } Property Value Int32"
  },
  "api/Riptide.Message.Release.html": {
    "href": "api/Riptide.Message.Release.html",
    "title": "Release Method | Riptide Docs",
    "keywords": "Release Method Namespace : Riptide Assembly : RiptideNetworking.dll Release() Returns the message instance to the internal pool so it can be reused. public void Release()"
  },
  "api/Riptide.Message.SendMode.html": {
    "href": "api/Riptide.Message.SendMode.html",
    "title": "SendMode Property | Riptide Docs",
    "keywords": "SendMode Property Namespace : Riptide Assembly : RiptideNetworking.dll SendMode The message's send mode. public MessageSendMode SendMode { get; } Property Value MessageSendMode"
  },
  "api/Riptide.Message.TrimPool.html": {
    "href": "api/Riptide.Message.TrimPool.html",
    "title": "TrimPool Method | Riptide Docs",
    "keywords": "TrimPool Method Namespace : Riptide Assembly : RiptideNetworking.dll TrimPool() Trims the message pool to a more appropriate size for how many Server and/or Client instances are currently running. public static void TrimPool()"
  },
  "api/Riptide.Message.UnreadLength.html": {
    "href": "api/Riptide.Message.UnreadLength.html",
    "title": "UnreadLength Property | Riptide Docs",
    "keywords": "UnreadLength Property Namespace : Riptide Assembly : RiptideNetworking.dll UnreadLength The length in bytes of the unread data contained in the message. public int UnreadLength { get; } Property Value Int32"
  },
  "api/Riptide.Message.WrittenLength.html": {
    "href": "api/Riptide.Message.WrittenLength.html",
    "title": "WrittenLength Property | Riptide Docs",
    "keywords": "WrittenLength Property Namespace : Riptide Assembly : RiptideNetworking.dll WrittenLength The length in bytes of the data that has been written to the message. public int WrittenLength { get; } Property Value Int32"
  },
  "api/Riptide.MessageHandlerAttribute.-ctor.html": {
    "href": "api/Riptide.MessageHandlerAttribute.-ctor.html",
    "title": "MessageHandlerAttribute Constructor | Riptide Docs",
    "keywords": "MessageHandlerAttribute Constructor Namespace : Riptide Assembly : RiptideNetworking.dll MessageHandlerAttribute(UInt16, Byte) Initializes a new instance of the MessageHandlerAttribute class with the messageId and groupId values. public MessageHandlerAttribute(ushort messageId, byte groupId = null) Parameters UInt16 messageId The ID of the message type which this method is meant to handle. Byte groupId The ID of the group of message handlers which this method belongs to. Remarks Server s will only use this method if its signature matches the Server.MessageHandler signature. Client s will only use this method if its signature matches the Client.MessageHandler signature. This method will be ignored if its signature matches neither of the valid message handler signatures."
  },
  "api/Riptide.MessageHandlerAttribute.GroupId.html": {
    "href": "api/Riptide.MessageHandlerAttribute.GroupId.html",
    "title": "GroupId Field | Riptide Docs",
    "keywords": "GroupId Field Namespace : Riptide Assembly : RiptideNetworking.dll The ID of the group of message handlers which this method belongs to. public readonly byte GroupId Returns Byte"
  },
  "api/Riptide.MessageHandlerAttribute.html": {
    "href": "api/Riptide.MessageHandlerAttribute.html",
    "title": "MessageHandlerAttribute Class | Riptide Docs",
    "keywords": "MessageHandlerAttribute Class Namespace : Riptide Assembly : RiptideNetworking.dll Specifies a method as the message handler for messages with the given ID. public sealed class MessageHandlerAttribute : Attribute Inheritance Object MessageHandlerAttribute Remarks In order for a method to qualify as a message handler, it must match a valid message handler method signature. Server s will only use methods marked with this attribute if they match the Server.MessageHandler signature, and Client s will only use methods marked with this attribute if they match the Client.MessageHandler signature. Methods marked with this attribute which match neither of the valid message handler signatures will not be used by Server s or Client s and will cause warnings at runtime. If you want a Server or Client to only use a subset of all message handler methods, you can do so by setting up custom message handler groups. Simply set the group ID in the MessageHandlerAttribute(UInt16, Byte) constructor and pass the same value to the Start(UInt16, UInt16, Byte) or Connect(String, Int32, Byte, Message) method. This will make that Server or Client only use message handlers which have the same group ID. Constructors MessageHandlerAttribute(UInt16, Byte) Initializes a new instance of the MessageHandlerAttribute class with the messageId and groupId values. Fields GroupId The ID of the group of message handlers which this method belongs to. MessageId The ID of the message type which this method is meant to handle."
  },
  "api/Riptide.MessageHandlerAttribute.MessageId.html": {
    "href": "api/Riptide.MessageHandlerAttribute.MessageId.html",
    "title": "MessageId Field | Riptide Docs",
    "keywords": "MessageId Field Namespace : Riptide Assembly : RiptideNetworking.dll The ID of the message type which this method is meant to handle. public readonly ushort MessageId Returns UInt16"
  },
  "api/Riptide.MessageReceivedEventArgs.-ctor.html": {
    "href": "api/Riptide.MessageReceivedEventArgs.-ctor.html",
    "title": "MessageReceivedEventArgs Constructor | Riptide Docs",
    "keywords": "MessageReceivedEventArgs Constructor Namespace : Riptide Assembly : RiptideNetworking.dll MessageReceivedEventArgs(Connection, UInt16, Message) Initializes event data. public MessageReceivedEventArgs(Connection fromConnection, ushort messageId, Message message) Parameters Connection fromConnection The connection from which the message was received. UInt16 messageId The ID of the message. Message message The received message."
  },
  "api/Riptide.MessageReceivedEventArgs.FromConnection.html": {
    "href": "api/Riptide.MessageReceivedEventArgs.FromConnection.html",
    "title": "FromConnection Field | Riptide Docs",
    "keywords": "FromConnection Field Namespace : Riptide Assembly : RiptideNetworking.dll The connection from which the message was received. public readonly Connection FromConnection Returns Connection"
  },
  "api/Riptide.MessageReceivedEventArgs.html": {
    "href": "api/Riptide.MessageReceivedEventArgs.html",
    "title": "MessageReceivedEventArgs Class | Riptide Docs",
    "keywords": "MessageReceivedEventArgs Class Namespace : Riptide Assembly : RiptideNetworking.dll Contains event data for when a message is received. public class MessageReceivedEventArgs : EventArgs Inheritance Object MessageReceivedEventArgs Constructors MessageReceivedEventArgs(Connection, UInt16, Message) Initializes event data. Fields FromConnection The connection from which the message was received. Message The received message. MessageId The ID of the message."
  },
  "api/Riptide.MessageReceivedEventArgs.Message.html": {
    "href": "api/Riptide.MessageReceivedEventArgs.Message.html",
    "title": "Message Field | Riptide Docs",
    "keywords": "Message Field Namespace : Riptide Assembly : RiptideNetworking.dll The received message. public readonly Message Message Returns Message"
  },
  "api/Riptide.MessageReceivedEventArgs.MessageId.html": {
    "href": "api/Riptide.MessageReceivedEventArgs.MessageId.html",
    "title": "MessageId Field | Riptide Docs",
    "keywords": "MessageId Field Namespace : Riptide Assembly : RiptideNetworking.dll The ID of the message. public readonly ushort MessageId Returns UInt16"
  },
  "api/Riptide.MessageRelayFilter.-ctor.html": {
    "href": "api/Riptide.MessageRelayFilter.-ctor.html",
    "title": "MessageRelayFilter Constructor | Riptide Docs",
    "keywords": "MessageRelayFilter Constructor Namespace : Riptide Assembly : RiptideNetworking.dll Overloads MessageRelayFilter(Int32) Creates a filter of a given size. MessageRelayFilter(Type) Creates a filter based on an enum of message IDs. MessageRelayFilter(Int32, UInt16[]) Creates a filter of a given size and enables relaying for the given message IDs. MessageRelayFilter(Type, Enum[]) Creates a filter based on an enum of message IDs and enables relaying for the given message IDs. MessageRelayFilter(Int32) Creates a filter of a given size. public MessageRelayFilter(int size) Parameters Int32 size How big to make the filter. Remarks size should be set to the value of the largest message ID, plus 1. For example, if a server will handle messages with IDs 1, 2, 3, 7, and 8, size should be set to 9 (8 is the largest possible value, and 8 + 1 = 9) despite the fact that there are only 5 unique message IDs the server will ever handle. MessageRelayFilter(Type) Creates a filter based on an enum of message IDs. public MessageRelayFilter(Type idEnum) Parameters Type idEnum The enum type. MessageRelayFilter(Int32, UInt16[]) Creates a filter of a given size and enables relaying for the given message IDs. public MessageRelayFilter(int size, params ushort[] idsToEnable) Parameters Int32 size How big to make the filter. UInt16 [] idsToEnable Message IDs to enable auto relaying for. Remarks size should be set to the value of the largest message ID, plus 1. For example, if a server will handle messages with IDs 1, 2, 3, 7, and 8, size should be set to 9 (8 is the largest possible value, and 8 + 1 = 9) despite the fact that there are only 5 unique message IDs the server will ever handle. MessageRelayFilter(Type, Enum[]) Creates a filter based on an enum of message IDs and enables relaying for the given message IDs. public MessageRelayFilter(Type idEnum, params Enum[] idsToEnable) Parameters Type idEnum The enum type. Enum [] idsToEnable Message IDs to enable relaying for."
  },
  "api/Riptide.MessageRelayFilter.DisableRelay.html": {
    "href": "api/Riptide.MessageRelayFilter.DisableRelay.html",
    "title": "DisableRelay Method | Riptide Docs",
    "keywords": "DisableRelay Method Namespace : Riptide Assembly : RiptideNetworking.dll Overloads DisableRelay(UInt16) Disables auto relaying for the given message ID. DisableRelay(Enum) Disables auto relaying for the given message ID. DisableRelay(UInt16) Disables auto relaying for the given message ID. public void DisableRelay(ushort forMessageId) Parameters UInt16 forMessageId The message ID to enable relaying for. DisableRelay(Enum) Disables auto relaying for the given message ID. public void DisableRelay(Enum forMessageId) Parameters Enum forMessageId"
  },
  "api/Riptide.MessageRelayFilter.EnableRelay.html": {
    "href": "api/Riptide.MessageRelayFilter.EnableRelay.html",
    "title": "EnableRelay Method | Riptide Docs",
    "keywords": "EnableRelay Method Namespace : Riptide Assembly : RiptideNetworking.dll Overloads EnableRelay(UInt16) Enables auto relaying for the given message ID. EnableRelay(Enum) Enables auto relaying for the given message ID. EnableRelay(UInt16) Enables auto relaying for the given message ID. public void EnableRelay(ushort forMessageId) Parameters UInt16 forMessageId The message ID to enable relaying for. EnableRelay(Enum) Enables auto relaying for the given message ID. public void EnableRelay(Enum forMessageId) Parameters Enum forMessageId"
  },
  "api/Riptide.MessageRelayFilter.html": {
    "href": "api/Riptide.MessageRelayFilter.html",
    "title": "MessageRelayFilter Class | Riptide Docs",
    "keywords": "MessageRelayFilter Class Namespace : Riptide Assembly : RiptideNetworking.dll Provides functionality for enabling/disabling automatic message relaying by message type. public class MessageRelayFilter : object Inheritance Object MessageRelayFilter Constructors MessageRelayFilter(Int32) Creates a filter of a given size. MessageRelayFilter(Int32, UInt16[]) Creates a filter of a given size and enables relaying for the given message IDs. MessageRelayFilter(Type) Creates a filter based on an enum of message IDs. MessageRelayFilter(Type, Enum[]) Creates a filter based on an enum of message IDs and enables relaying for the given message IDs. Methods DisableRelay(Enum) Disables auto relaying for the given message ID. DisableRelay(UInt16) Disables auto relaying for the given message ID. EnableRelay(Enum) Enables auto relaying for the given message ID. EnableRelay(UInt16) Enables auto relaying for the given message ID."
  },
  "api/Riptide.MessageSendMode.html": {
    "href": "api/Riptide.MessageSendMode.html",
    "title": "MessageSendMode Enum | Riptide Docs",
    "keywords": "MessageSendMode Enum Namespace : Riptide Assembly : RiptideNetworking.dll The send mode of a Message . public enum MessageSendMode : byte Fields Reliable Reliable send mode. Unreliable Unreliable send mode."
  },
  "api/Riptide.NonStaticHandlerException.-ctor.html": {
    "href": "api/Riptide.NonStaticHandlerException.-ctor.html",
    "title": "NonStaticHandlerException Constructor | Riptide Docs",
    "keywords": "NonStaticHandlerException Constructor Namespace : Riptide Assembly : RiptideNetworking.dll Overloads NonStaticHandlerException() Initializes a new NonStaticHandlerException instance. NonStaticHandlerException(String) Initializes a new NonStaticHandlerException instance with a specified error message. NonStaticHandlerException(String, Exception) Initializes a new NonStaticHandlerException instance with a specified error message and a reference to the inner exception that is the cause of this exception. NonStaticHandlerException(Type, String) Initializes a new NonStaticHandlerException instance and constructs an error message from the given information. NonStaticHandlerException() Initializes a new NonStaticHandlerException instance. public NonStaticHandlerException() NonStaticHandlerException(String) Initializes a new NonStaticHandlerException instance with a specified error message. public NonStaticHandlerException(string message) Parameters String message The error message that explains the reason for the exception. NonStaticHandlerException(String, Exception) Initializes a new NonStaticHandlerException instance with a specified error message and a reference to the inner exception that is the cause of this exception. public NonStaticHandlerException(string message, Exception inner) Parameters String message The error message that explains the reason for the exception. Exception inner The exception that is the cause of the current exception. If inner is not a null reference, the current exception is raised in a catch block that handles the inner exception. NonStaticHandlerException(Type, String) Initializes a new NonStaticHandlerException instance and constructs an error message from the given information. public NonStaticHandlerException(Type declaringType, string handlerMethodName) Parameters Type declaringType The type containing the handler method. String handlerMethodName The name of the handler method."
  },
  "api/Riptide.NonStaticHandlerException.DeclaringType.html": {
    "href": "api/Riptide.NonStaticHandlerException.DeclaringType.html",
    "title": "DeclaringType Field | Riptide Docs",
    "keywords": "DeclaringType Field Namespace : Riptide Assembly : RiptideNetworking.dll The type containing the handler method. public readonly Type DeclaringType Returns Type"
  },
  "api/Riptide.NonStaticHandlerException.HandlerMethodName.html": {
    "href": "api/Riptide.NonStaticHandlerException.HandlerMethodName.html",
    "title": "HandlerMethodName Field | Riptide Docs",
    "keywords": "HandlerMethodName Field Namespace : Riptide Assembly : RiptideNetworking.dll The name of the handler method. public readonly string HandlerMethodName Returns String"
  },
  "api/Riptide.NonStaticHandlerException.html": {
    "href": "api/Riptide.NonStaticHandlerException.html",
    "title": "NonStaticHandlerException Class | Riptide Docs",
    "keywords": "NonStaticHandlerException Class Namespace : Riptide Assembly : RiptideNetworking.dll The exception that is thrown when a method with a MessageHandlerAttribute is not marked as static . public class NonStaticHandlerException : Exception Inheritance Object NonStaticHandlerException Constructors NonStaticHandlerException() Initializes a new NonStaticHandlerException instance. NonStaticHandlerException(String) Initializes a new NonStaticHandlerException instance with a specified error message. NonStaticHandlerException(String, Exception) Initializes a new NonStaticHandlerException instance with a specified error message and a reference to the inner exception that is the cause of this exception. NonStaticHandlerException(Type, String) Initializes a new NonStaticHandlerException instance and constructs an error message from the given information. Fields DeclaringType The type containing the handler method. HandlerMethodName The name of the handler method."
  },
  "api/Riptide.Peer.CRCustom.html": {
    "href": "api/Riptide.Peer.CRCustom.html",
    "title": "CRCustom Field | Riptide Docs",
    "keywords": "CRCustom Field Namespace : Riptide Assembly : RiptideNetworking.dll The text to log when the connection failed due to Custom . protected const string CRCustom = null Returns String"
  },
  "api/Riptide.Peer.CreateMessageHandlersDictionary.html": {
    "href": "api/Riptide.Peer.CreateMessageHandlersDictionary.html",
    "title": "CreateMessageHandlersDictionary Method | Riptide Docs",
    "keywords": "CreateMessageHandlersDictionary Method Namespace : Riptide Assembly : RiptideNetworking.dll CreateMessageHandlersDictionary(Byte) Builds a dictionary of message IDs and their corresponding message handler methods. protected abstract void CreateMessageHandlersDictionary(byte messageHandlerGroupId) Parameters Byte messageHandlerGroupId The ID of the group of message handler methods to include in the dictionary."
  },
  "api/Riptide.Peer.CRNoConnection.html": {
    "href": "api/Riptide.Peer.CRNoConnection.html",
    "title": "CRNoConnection Field | Riptide Docs",
    "keywords": "CRNoConnection Field Namespace : Riptide Assembly : RiptideNetworking.dll The text to log when the connection failed due to NoConnection . protected const string CRNoConnection = null Returns String"
  },
  "api/Riptide.Peer.CRRejected.html": {
    "href": "api/Riptide.Peer.CRRejected.html",
    "title": "CRRejected Field | Riptide Docs",
    "keywords": "CRRejected Field Namespace : Riptide Assembly : RiptideNetworking.dll The text to log when the connection failed due to Rejected . protected const string CRRejected = null Returns String"
  },
  "api/Riptide.Peer.CRServerFull.html": {
    "href": "api/Riptide.Peer.CRServerFull.html",
    "title": "CRServerFull Field | Riptide Docs",
    "keywords": "CRServerFull Field Namespace : Riptide Assembly : RiptideNetworking.dll The text to log when the connection failed due to ServerFull . protected const string CRServerFull = null Returns String"
  },
  "api/Riptide.Peer.-ctor.html": {
    "href": "api/Riptide.Peer.-ctor.html",
    "title": "Peer Constructor | Riptide Docs",
    "keywords": "Peer Constructor Namespace : Riptide Assembly : RiptideNetworking.dll Peer(String) Initializes the peer. public Peer(string logName) Parameters String logName The name to use when logging messages via RiptideLogger ."
  },
  "api/Riptide.Peer.DCDisconnected.html": {
    "href": "api/Riptide.Peer.DCDisconnected.html",
    "title": "DCDisconnected Field | Riptide Docs",
    "keywords": "DCDisconnected Field Namespace : Riptide Assembly : RiptideNetworking.dll The text to log when disconnected due to Disconnected . protected const string DCDisconnected = null Returns String"
  },
  "api/Riptide.Peer.DCKicked.html": {
    "href": "api/Riptide.Peer.DCKicked.html",
    "title": "DCKicked Field | Riptide Docs",
    "keywords": "DCKicked Field Namespace : Riptide Assembly : RiptideNetworking.dll The text to log when disconnected due to Kicked . protected const string DCKicked = null Returns String"
  },
  "api/Riptide.Peer.DCNeverConnected.html": {
    "href": "api/Riptide.Peer.DCNeverConnected.html",
    "title": "DCNeverConnected Field | Riptide Docs",
    "keywords": "DCNeverConnected Field Namespace : Riptide Assembly : RiptideNetworking.dll The text to log when disconnected due to NeverConnected . protected const string DCNeverConnected = null Returns String"
  },
  "api/Riptide.Peer.DCServerStopped.html": {
    "href": "api/Riptide.Peer.DCServerStopped.html",
    "title": "DCServerStopped Field | Riptide Docs",
    "keywords": "DCServerStopped Field Namespace : Riptide Assembly : RiptideNetworking.dll The text to log when disconnected due to ServerStopped . protected const string DCServerStopped = null Returns String"
  },
  "api/Riptide.Peer.DCTimedOut.html": {
    "href": "api/Riptide.Peer.DCTimedOut.html",
    "title": "DCTimedOut Field | Riptide Docs",
    "keywords": "DCTimedOut Field Namespace : Riptide Assembly : RiptideNetworking.dll The text to log when disconnected due to TimedOut . protected const string DCTimedOut = null Returns String"
  },
  "api/Riptide.Peer.DCTransportError.html": {
    "href": "api/Riptide.Peer.DCTransportError.html",
    "title": "DCTransportError Field | Riptide Docs",
    "keywords": "DCTransportError Field Namespace : Riptide Assembly : RiptideNetworking.dll The text to log when disconnected due to TransportError . protected const string DCTransportError = null Returns String"
  },
  "api/Riptide.Peer.DecreaseActiveCount.html": {
    "href": "api/Riptide.Peer.DecreaseActiveCount.html",
    "title": "DecreaseActiveCount Method | Riptide Docs",
    "keywords": "DecreaseActiveCount Method Namespace : Riptide Assembly : RiptideNetworking.dll DecreaseActiveCount() Decreases Riptide.Peer.ActiveCount . For use when a Server or Client is stopped. protected static void DecreaseActiveCount()"
  },
  "api/Riptide.Peer.FindMessageHandlers.html": {
    "href": "api/Riptide.Peer.FindMessageHandlers.html",
    "title": "FindMessageHandlers Method | Riptide Docs",
    "keywords": "FindMessageHandlers Method Namespace : Riptide Assembly : RiptideNetworking.dll FindMessageHandlers() Retrieves methods marked with MessageHandlerAttribute . protected MethodInfo[] FindMessageHandlers() Returns MethodInfo [] An array containing message handler methods."
  },
  "api/Riptide.Peer.Handle.html": {
    "href": "api/Riptide.Peer.Handle.html",
    "title": "Handle Method | Riptide Docs",
    "keywords": "Handle Method Namespace : Riptide Assembly : RiptideNetworking.dll Handle(Message, MessageHeader, Connection) Handles a message. protected abstract void Handle(Message message, MessageHeader header, Connection connection) Parameters Message message The message to handle. MessageHeader header The message's header type. Connection connection The connection which the message was received on."
  },
  "api/Riptide.Peer.HandleData.html": {
    "href": "api/Riptide.Peer.HandleData.html",
    "title": "HandleData Method | Riptide Docs",
    "keywords": "HandleData Method Namespace : Riptide Assembly : RiptideNetworking.dll HandleData(Object, DataReceivedEventArgs) Handles data received by the transport. protected void HandleData(object _, DataReceivedEventArgs e) Parameters Object _ DataReceivedEventArgs e"
  },
  "api/Riptide.Peer.HandleMessages.html": {
    "href": "api/Riptide.Peer.HandleMessages.html",
    "title": "HandleMessages Method | Riptide Docs",
    "keywords": "HandleMessages Method Namespace : Riptide Assembly : RiptideNetworking.dll HandleMessages() Handles all queued messages. protected void HandleMessages()"
  },
  "api/Riptide.Peer.HeartbeatInterval.html": {
    "href": "api/Riptide.Peer.HeartbeatInterval.html",
    "title": "HeartbeatInterval Property | Riptide Docs",
    "keywords": "HeartbeatInterval Property Namespace : Riptide Assembly : RiptideNetworking.dll HeartbeatInterval The interval (in milliseconds) at which to send and expect heartbeats to be received. public ushort HeartbeatInterval { get; set; } Property Value UInt16 Remarks Changes to this value will only take effect after the next heartbeat is executed."
  },
  "api/Riptide.Peer.html": {
    "href": "api/Riptide.Peer.html",
    "title": "Peer Class | Riptide Docs",
    "keywords": "Peer Class Namespace : Riptide Assembly : RiptideNetworking.dll Provides base functionality for Server and Client . public abstract class Peer : object Inheritance Object Peer Client Server Constructors Peer(String) Initializes the peer. Fields CRCustom The text to log when the connection failed due to Custom . CRNoConnection The text to log when the connection failed due to NoConnection . CRRejected The text to log when the connection failed due to Rejected . CRServerFull The text to log when the connection failed due to ServerFull . DCDisconnected The text to log when disconnected due to Disconnected . DCKicked The text to log when disconnected due to Kicked . DCNeverConnected The text to log when disconnected due to NeverConnected . DCServerStopped The text to log when disconnected due to ServerStopped . DCTimedOut The text to log when disconnected due to TimedOut . DCTransportError The text to log when disconnected due to TransportError . LogName The name to use when logging messages via RiptideLogger . UnknownReason The text to log when disconnected or rejected due to an unknown reason. Properties HeartbeatInterval The interval (in milliseconds) at which to send and expect heartbeats to be received. TimeoutTime The time (in milliseconds) after which to disconnect if no heartbeats are received. Methods CreateMessageHandlersDictionary(Byte) Builds a dictionary of message IDs and their corresponding message handler methods. DecreaseActiveCount() Decreases Riptide.Peer.ActiveCount . For use when a Server or Client is stopped. FindMessageHandlers() Retrieves methods marked with MessageHandlerAttribute . Handle(Message, MessageHeader, Connection) Handles a message. HandleData(Object, DataReceivedEventArgs) Handles data received by the transport. HandleMessages() Handles all queued messages. IncreaseActiveCount() Increases Riptide.Peer.ActiveCount . For use when a new Server or Client is started. StartTime() Starts tracking how much time has passed. StopTime() Stops tracking how much time has passed. Update() Handles any received messages and invokes any delayed events which need to be invoked."
  },
  "api/Riptide.Peer.IncreaseActiveCount.html": {
    "href": "api/Riptide.Peer.IncreaseActiveCount.html",
    "title": "IncreaseActiveCount Method | Riptide Docs",
    "keywords": "IncreaseActiveCount Method Namespace : Riptide Assembly : RiptideNetworking.dll IncreaseActiveCount() Increases Riptide.Peer.ActiveCount . For use when a new Server or Client is started. protected static void IncreaseActiveCount()"
  },
  "api/Riptide.Peer.LogName.html": {
    "href": "api/Riptide.Peer.LogName.html",
    "title": "LogName Field | Riptide Docs",
    "keywords": "LogName Field Namespace : Riptide Assembly : RiptideNetworking.dll The name to use when logging messages via RiptideLogger . public readonly string LogName Returns String"
  },
  "api/Riptide.Peer.StartTime.html": {
    "href": "api/Riptide.Peer.StartTime.html",
    "title": "StartTime Method | Riptide Docs",
    "keywords": "StartTime Method Namespace : Riptide Assembly : RiptideNetworking.dll StartTime() Starts tracking how much time has passed. protected void StartTime()"
  },
  "api/Riptide.Peer.StopTime.html": {
    "href": "api/Riptide.Peer.StopTime.html",
    "title": "StopTime Method | Riptide Docs",
    "keywords": "StopTime Method Namespace : Riptide Assembly : RiptideNetworking.dll StopTime() Stops tracking how much time has passed. protected void StopTime()"
  },
  "api/Riptide.Peer.TimeoutTime.html": {
    "href": "api/Riptide.Peer.TimeoutTime.html",
    "title": "TimeoutTime Property | Riptide Docs",
    "keywords": "TimeoutTime Property Namespace : Riptide Assembly : RiptideNetworking.dll TimeoutTime The time (in milliseconds) after which to disconnect if no heartbeats are received. public ushort TimeoutTime { get; set; } Property Value UInt16"
  },
  "api/Riptide.Peer.UnknownReason.html": {
    "href": "api/Riptide.Peer.UnknownReason.html",
    "title": "UnknownReason Field | Riptide Docs",
    "keywords": "UnknownReason Field Namespace : Riptide Assembly : RiptideNetworking.dll The text to log when disconnected or rejected due to an unknown reason. protected const string UnknownReason = null Returns String"
  },
  "api/Riptide.Peer.Update.html": {
    "href": "api/Riptide.Peer.Update.html",
    "title": "Update Method | Riptide Docs",
    "keywords": "Update Method Namespace : Riptide Assembly : RiptideNetworking.dll Update() Handles any received messages and invokes any delayed events which need to be invoked. public virtual void Update()"
  },
  "api/Riptide.RejectReason.html": {
    "href": "api/Riptide.RejectReason.html",
    "title": "RejectReason Enum | Riptide Docs",
    "keywords": "RejectReason Enum Namespace : Riptide Assembly : RiptideNetworking.dll The reason the connection attempt was rejected. public enum RejectReason : byte Fields AlreadyConnected The client is already connected. Custom The connection attempt was rejected and custom data may have been included with the rejection message. NoConnection No response was received from the server (because the client has no internet connection, the server is offline, no server is listening on the target endpoint, etc.). Pending A connection attempt is already pending. Rejected The connection attempt was rejected. ServerFull The server is full."
  },
  "api/Riptide.Server.Accept.html": {
    "href": "api/Riptide.Server.Accept.html",
    "title": "Accept Method | Riptide Docs",
    "keywords": "Accept Method Namespace : Riptide Assembly : RiptideNetworking.dll Accept(Connection) Accepts the given pending connection. public void Accept(Connection connection) Parameters Connection connection The connection to accept."
  },
  "api/Riptide.Server.ChangeTransport.html": {
    "href": "api/Riptide.Server.ChangeTransport.html",
    "title": "ChangeTransport Method | Riptide Docs",
    "keywords": "ChangeTransport Method Namespace : Riptide Assembly : RiptideNetworking.dll ChangeTransport(IServer) Stops the server if it's running and swaps out the transport it's using. public void ChangeTransport(IServer newTransport) Parameters IServer newTransport The new underlying transport server to use for sending and receiving data. Remarks This method does not automatically restart the server. To continue accepting connections, Start(UInt16, UInt16, Byte) must be called again."
  },
  "api/Riptide.Server.ClientConnected.html": {
    "href": "api/Riptide.Server.ClientConnected.html",
    "title": "ClientConnected Event | Riptide Docs",
    "keywords": "ClientConnected Event Namespace : Riptide Assembly : RiptideNetworking.dll Invoked when a client connects. public event EventHandler<ServerConnectedEventArgs> ClientConnected Returns EventHandler < ServerConnectedEventArgs >"
  },
  "api/Riptide.Server.ClientCount.html": {
    "href": "api/Riptide.Server.ClientCount.html",
    "title": "ClientCount Property | Riptide Docs",
    "keywords": "ClientCount Property Namespace : Riptide Assembly : RiptideNetworking.dll ClientCount The number of currently connected clients. public int ClientCount { get; } Property Value Int32"
  },
  "api/Riptide.Server.ClientDisconnected.html": {
    "href": "api/Riptide.Server.ClientDisconnected.html",
    "title": "ClientDisconnected Event | Riptide Docs",
    "keywords": "ClientDisconnected Event Namespace : Riptide Assembly : RiptideNetworking.dll Invoked when a client disconnects. public event EventHandler<ServerDisconnectedEventArgs> ClientDisconnected Returns EventHandler < ServerDisconnectedEventArgs >"
  },
  "api/Riptide.Server.Clients.html": {
    "href": "api/Riptide.Server.Clients.html",
    "title": "Clients Property | Riptide Docs",
    "keywords": "Clients Property Namespace : Riptide Assembly : RiptideNetworking.dll Clients An array of all the currently connected clients. public Connection[] Clients { get; } Property Value Connection [] Remarks The position of each Connection instance in the array does not correspond to that client's numeric ID (except by coincidence)."
  },
  "api/Riptide.Server.ConnectionAttemptHandler.html": {
    "href": "api/Riptide.Server.ConnectionAttemptHandler.html",
    "title": "Server.ConnectionAttemptHandler Delegate | Riptide Docs",
    "keywords": "Server.ConnectionAttemptHandler Delegate Namespace : Riptide Assembly : RiptideNetworking.dll Encapsulates a method that determines whether or not to accept a client's connection attempt. public delegate void ConnectionAttemptHandler(Connection pendingConnection, Message connectMessage); Parameters Connection pendingConnection Message connectMessage"
  },
  "api/Riptide.Server.CreateMessageHandlersDictionary.html": {
    "href": "api/Riptide.Server.CreateMessageHandlersDictionary.html",
    "title": "CreateMessageHandlersDictionary Method | Riptide Docs",
    "keywords": "CreateMessageHandlersDictionary Method Namespace : Riptide Assembly : RiptideNetworking.dll CreateMessageHandlersDictionary(Byte) Builds a dictionary of message IDs and their corresponding message handler methods. protected override void CreateMessageHandlersDictionary(byte messageHandlerGroupId) Parameters Byte messageHandlerGroupId The ID of the group of message handler methods to include in the dictionary. Overrides Peer.CreateMessageHandlersDictionary(Byte)"
  },
  "api/Riptide.Server.-ctor.html": {
    "href": "api/Riptide.Server.-ctor.html",
    "title": "Server Constructor | Riptide Docs",
    "keywords": "Server Constructor Namespace : Riptide Assembly : RiptideNetworking.dll Overloads Server(IServer, String) Handles initial setup. Server(String) Handles initial setup using the built-in UDP transport. Server(IServer, String) Handles initial setup. public Server(IServer transport, string logName = \"SERVER\") Parameters IServer transport The transport to use for sending and receiving data. String logName The name to use when logging messages via RiptideLogger . Server(String) Handles initial setup using the built-in UDP transport. public Server(string logName = \"SERVER\") Parameters String logName The name to use when logging messages via RiptideLogger ."
  },
  "api/Riptide.Server.DisconnectClient.html": {
    "href": "api/Riptide.Server.DisconnectClient.html",
    "title": "DisconnectClient Method | Riptide Docs",
    "keywords": "DisconnectClient Method Namespace : Riptide Assembly : RiptideNetworking.dll Overloads DisconnectClient(UInt16, Message) Disconnects a specific client. DisconnectClient(Connection, Message) Disconnects the given client. DisconnectClient(UInt16, Message) Disconnects a specific client. public void DisconnectClient(ushort id, Message message = null) Parameters UInt16 id The numeric ID of the client to disconnect. Message message Data that should be sent to the client being disconnected. Use Create() to get an empty message instance. DisconnectClient(Connection, Message) Disconnects the given client. public void DisconnectClient(Connection client, Message message = null) Parameters Connection client The client to disconnect. Message message Data that should be sent to the client being disconnected. Use Create() to get an empty message instance."
  },
  "api/Riptide.Server.Handle.html": {
    "href": "api/Riptide.Server.Handle.html",
    "title": "Handle Method | Riptide Docs",
    "keywords": "Handle Method Namespace : Riptide Assembly : RiptideNetworking.dll Handle(Message, MessageHeader, Connection) Handles a message. protected override void Handle(Message message, MessageHeader header, Connection connection) Parameters Message message The message to handle. MessageHeader header The message's header type. Connection connection The connection which the message was received on. Overrides Peer.Handle(Message, MessageHeader, Connection)"
  },
  "api/Riptide.Server.HandleConnection.html": {
    "href": "api/Riptide.Server.HandleConnection.html",
    "title": "HandleConnection Field | Riptide Docs",
    "keywords": "HandleConnection Field Namespace : Riptide Assembly : RiptideNetworking.dll An optional method which determines whether or not to accept a client's connection attempt. public Server.ConnectionAttemptHandler HandleConnection Returns Server.ConnectionAttemptHandler Remarks The Connection parameter is the pending connection and the Message parameter is a message containing any additional data the client included with the connection attempt."
  },
  "api/Riptide.Server.html": {
    "href": "api/Riptide.Server.html",
    "title": "Server Class | Riptide Docs",
    "keywords": "Server Class Namespace : Riptide Assembly : RiptideNetworking.dll A server that can accept connections from Client s. public class Server : Peer Inheritance Object Peer Server Inherited Members Peer.LogName Peer.TimeoutTime Peer.HeartbeatInterval Peer.DCNeverConnected Peer.DCTransportError Peer.DCTimedOut Peer.DCKicked Peer.DCServerStopped Peer.DCDisconnected Peer.UnknownReason Peer.CRNoConnection Peer.CRServerFull Peer.CRRejected Peer.CRCustom Peer.FindMessageHandlers() Peer.StartTime() Peer.StopTime() Peer.HandleMessages() Peer.HandleData(Object, DataReceivedEventArgs) Peer.IncreaseActiveCount() Peer.DecreaseActiveCount() Constructors Server(IServer, String) Handles initial setup. Server(String) Handles initial setup using the built-in UDP transport. Fields HandleConnection An optional method which determines whether or not to accept a client's connection attempt. RelayFilter Stores which message IDs have auto relaying enabled. Relaying is disabled entirely when this is null . Properties ClientCount The number of currently connected clients. Clients An array of all the currently connected clients. IsRunning Whether or not the server is currently running. MaxClientCount The maximum number of concurrent connections. Port The local port that the server is running on. Methods Accept(Connection) Accepts the given pending connection. ChangeTransport(IServer) Stops the server if it's running and swaps out the transport it's using. CreateMessageHandlersDictionary(Byte) Builds a dictionary of message IDs and their corresponding message handler methods. DisconnectClient(Connection, Message) Disconnects the given client. DisconnectClient(UInt16, Message) Disconnects a specific client. Handle(Message, MessageHeader, Connection) Handles a message. OnClientConnected(Connection) Invokes the ClientConnected event. OnClientDisconnected(Connection, DisconnectReason) Invokes the ClientDisconnected event. OnMessageReceived(Message, Connection) Invokes the MessageReceived event and initiates handling of the received message. Reject(Connection, Message) Rejects the given pending connection. Send(Message, Connection, Boolean) Sends a message to a given client. Send(Message, UInt16, Boolean) Sends a message to a given client. SendToAll(Message, Boolean) Sends a message to all connected clients. SendToAll(Message, UInt16, Boolean) Sends a message to all connected clients except the given one. Start(UInt16, UInt16, Byte) Starts the server. Stop() Stops the server. TryGetClient(UInt16, out Connection) Retrieves the client with the given ID, if a client with that ID is currently connected. Update() Handles any received messages and invokes any delayed events which need to be invoked. Events ClientConnected Invoked when a client connects. ClientDisconnected Invoked when a client disconnects. MessageReceived Invoked when a message is received."
  },
  "api/Riptide.Server.IsRunning.html": {
    "href": "api/Riptide.Server.IsRunning.html",
    "title": "IsRunning Property | Riptide Docs",
    "keywords": "IsRunning Property Namespace : Riptide Assembly : RiptideNetworking.dll IsRunning Whether or not the server is currently running. public bool IsRunning { get; } Property Value Boolean"
  },
  "api/Riptide.Server.MaxClientCount.html": {
    "href": "api/Riptide.Server.MaxClientCount.html",
    "title": "MaxClientCount Property | Riptide Docs",
    "keywords": "MaxClientCount Property Namespace : Riptide Assembly : RiptideNetworking.dll MaxClientCount The maximum number of concurrent connections. public ushort MaxClientCount { get; } Property Value UInt16"
  },
  "api/Riptide.Server.MessageHandler.html": {
    "href": "api/Riptide.Server.MessageHandler.html",
    "title": "Server.MessageHandler Delegate | Riptide Docs",
    "keywords": "Server.MessageHandler Delegate Namespace : Riptide Assembly : RiptideNetworking.dll Encapsulates a method that handles a message from a client. public delegate void MessageHandler(ushort fromClientId, Message message); Parameters UInt16 fromClientId The numeric ID of the client from whom the message was received. Message message The message that was received."
  },
  "api/Riptide.Server.MessageReceived.html": {
    "href": "api/Riptide.Server.MessageReceived.html",
    "title": "MessageReceived Event | Riptide Docs",
    "keywords": "MessageReceived Event Namespace : Riptide Assembly : RiptideNetworking.dll Invoked when a message is received. public event EventHandler<MessageReceivedEventArgs> MessageReceived Returns EventHandler < MessageReceivedEventArgs >"
  },
  "api/Riptide.Server.OnClientConnected.html": {
    "href": "api/Riptide.Server.OnClientConnected.html",
    "title": "OnClientConnected Method | Riptide Docs",
    "keywords": "OnClientConnected Method Namespace : Riptide Assembly : RiptideNetworking.dll OnClientConnected(Connection) Invokes the ClientConnected event. protected virtual void OnClientConnected(Connection client) Parameters Connection client The newly connected client."
  },
  "api/Riptide.Server.OnClientDisconnected.html": {
    "href": "api/Riptide.Server.OnClientDisconnected.html",
    "title": "OnClientDisconnected Method | Riptide Docs",
    "keywords": "OnClientDisconnected Method Namespace : Riptide Assembly : RiptideNetworking.dll OnClientDisconnected(Connection, DisconnectReason) Invokes the ClientDisconnected event. protected virtual void OnClientDisconnected(Connection connection, DisconnectReason reason) Parameters Connection connection The client that disconnected. DisconnectReason reason The reason for the disconnection."
  },
  "api/Riptide.Server.OnMessageReceived.html": {
    "href": "api/Riptide.Server.OnMessageReceived.html",
    "title": "OnMessageReceived Method | Riptide Docs",
    "keywords": "OnMessageReceived Method Namespace : Riptide Assembly : RiptideNetworking.dll OnMessageReceived(Message, Connection) Invokes the MessageReceived event and initiates handling of the received message. protected virtual void OnMessageReceived(Message message, Connection fromConnection) Parameters Message message The received message. Connection fromConnection The client from which the message was received."
  },
  "api/Riptide.Server.Port.html": {
    "href": "api/Riptide.Server.Port.html",
    "title": "Port Property | Riptide Docs",
    "keywords": "Port Property Namespace : Riptide Assembly : RiptideNetworking.dll Port The local port that the server is running on. public ushort Port { get; } Property Value UInt16"
  },
  "api/Riptide.Server.Reject.html": {
    "href": "api/Riptide.Server.Reject.html",
    "title": "Reject Method | Riptide Docs",
    "keywords": "Reject Method Namespace : Riptide Assembly : RiptideNetworking.dll Reject(Connection, Message) Rejects the given pending connection. public void Reject(Connection connection, Message message = null) Parameters Connection connection The connection to reject. Message message Data that should be sent to the client being rejected. Use Create() to get an empty message instance."
  },
  "api/Riptide.Server.RelayFilter.html": {
    "href": "api/Riptide.Server.RelayFilter.html",
    "title": "RelayFilter Field | Riptide Docs",
    "keywords": "RelayFilter Field Namespace : Riptide Assembly : RiptideNetworking.dll Stores which message IDs have auto relaying enabled. Relaying is disabled entirely when this is null . public MessageRelayFilter RelayFilter Returns MessageRelayFilter"
  },
  "api/Riptide.Server.Send.html": {
    "href": "api/Riptide.Server.Send.html",
    "title": "Send Method | Riptide Docs",
    "keywords": "Send Method Namespace : Riptide Assembly : RiptideNetworking.dll Overloads Send(Message, UInt16, Boolean) Sends a message to a given client. Send(Message, Connection, Boolean) Sends a message to a given client. Send(Message, UInt16, Boolean) Sends a message to a given client. public void Send(Message message, ushort toClient, bool shouldRelease = true) Parameters Message message The message to send. UInt16 toClient The numeric ID of the client to send the message to. Boolean shouldRelease Whether or not to return the message to the pool after it is sent. Remarks If you intend to continue using the message instance after calling this method, you must set shouldRelease to false . Release() can be used to manually return the message to the pool at a later time. Send(Message, Connection, Boolean) Sends a message to a given client. public void Send(Message message, Connection toClient, bool shouldRelease = true) Parameters Message message The message to send. Connection toClient The client to send the message to. Boolean shouldRelease Whether or not to return the message to the pool after it is sent. Remarks If you intend to continue using the message instance after calling this method, you must set shouldRelease to false . Release() can be used to manually return the message to the pool at a later time."
  },
  "api/Riptide.Server.SendToAll.html": {
    "href": "api/Riptide.Server.SendToAll.html",
    "title": "SendToAll Method | Riptide Docs",
    "keywords": "SendToAll Method Namespace : Riptide Assembly : RiptideNetworking.dll Overloads SendToAll(Message, Boolean) Sends a message to all connected clients. SendToAll(Message, UInt16, Boolean) Sends a message to all connected clients except the given one. SendToAll(Message, Boolean) Sends a message to all connected clients. public void SendToAll(Message message, bool shouldRelease = true) Parameters Message message The message to send. Boolean shouldRelease Whether or not to return the message to the pool after it is sent. Remarks If you intend to continue using the message instance after calling this method, you must set shouldRelease to false . Release() can be used to manually return the message to the pool at a later time. SendToAll(Message, UInt16, Boolean) Sends a message to all connected clients except the given one. public void SendToAll(Message message, ushort exceptToClientId, bool shouldRelease = true) Parameters Message message The message to send. UInt16 exceptToClientId The numeric ID of the client to not send the message to. Boolean shouldRelease Whether or not to return the message to the pool after it is sent. Remarks If you intend to continue using the message instance after calling this method, you must set shouldRelease to false . Release() can be used to manually return the message to the pool at a later time."
  },
  "api/Riptide.Server.Start.html": {
    "href": "api/Riptide.Server.Start.html",
    "title": "Start Method | Riptide Docs",
    "keywords": "Start Method Namespace : Riptide Assembly : RiptideNetworking.dll Start(UInt16, UInt16, Byte) Starts the server. public void Start(ushort port, ushort maxClientCount, byte messageHandlerGroupId = null) Parameters UInt16 port The local port on which to start the server. UInt16 maxClientCount The maximum number of concurrent connections to allow. Byte messageHandlerGroupId The ID of the group of message handler methods to use when building Riptide.Server.messageHandlers ."
  },
  "api/Riptide.Server.Stop.html": {
    "href": "api/Riptide.Server.Stop.html",
    "title": "Stop Method | Riptide Docs",
    "keywords": "Stop Method Namespace : Riptide Assembly : RiptideNetworking.dll Stop() Stops the server. public void Stop()"
  },
  "api/Riptide.Server.TryGetClient.html": {
    "href": "api/Riptide.Server.TryGetClient.html",
    "title": "TryGetClient Method | Riptide Docs",
    "keywords": "TryGetClient Method Namespace : Riptide Assembly : RiptideNetworking.dll TryGetClient(UInt16, out Connection) Retrieves the client with the given ID, if a client with that ID is currently connected. public bool TryGetClient(ushort id, out Connection client) Parameters UInt16 id The ID of the client to retrieve. Connection client The retrieved client. Returns Boolean true if a client with the given ID was connected; otherwise false ."
  },
  "api/Riptide.Server.Update.html": {
    "href": "api/Riptide.Server.Update.html",
    "title": "Update Method | Riptide Docs",
    "keywords": "Update Method Namespace : Riptide Assembly : RiptideNetworking.dll Update() Handles any received messages and invokes any delayed events which need to be invoked. public override void Update() Overrides Peer.Update()"
  },
  "api/Riptide.ServerConnectedEventArgs.Client.html": {
    "href": "api/Riptide.ServerConnectedEventArgs.Client.html",
    "title": "Client Field | Riptide Docs",
    "keywords": "Client Field Namespace : Riptide Assembly : RiptideNetworking.dll The newly connected client. public readonly Connection Client Returns Connection"
  },
  "api/Riptide.ServerConnectedEventArgs.-ctor.html": {
    "href": "api/Riptide.ServerConnectedEventArgs.-ctor.html",
    "title": "ServerConnectedEventArgs Constructor | Riptide Docs",
    "keywords": "ServerConnectedEventArgs Constructor Namespace : Riptide Assembly : RiptideNetworking.dll ServerConnectedEventArgs(Connection) Initializes event data. public ServerConnectedEventArgs(Connection client) Parameters Connection client The newly connected client."
  },
  "api/Riptide.ServerConnectedEventArgs.html": {
    "href": "api/Riptide.ServerConnectedEventArgs.html",
    "title": "ServerConnectedEventArgs Class | Riptide Docs",
    "keywords": "ServerConnectedEventArgs Class Namespace : Riptide Assembly : RiptideNetworking.dll Contains event data for when a client connects to the server. public class ServerConnectedEventArgs : EventArgs Inheritance Object ServerConnectedEventArgs Constructors ServerConnectedEventArgs(Connection) Initializes event data. Fields Client The newly connected client."
  },
  "api/Riptide.ServerDisconnectedEventArgs.Client.html": {
    "href": "api/Riptide.ServerDisconnectedEventArgs.Client.html",
    "title": "Client Field | Riptide Docs",
    "keywords": "Client Field Namespace : Riptide Assembly : RiptideNetworking.dll The client that disconnected. public readonly Connection Client Returns Connection"
  },
  "api/Riptide.ServerDisconnectedEventArgs.-ctor.html": {
    "href": "api/Riptide.ServerDisconnectedEventArgs.-ctor.html",
    "title": "ServerDisconnectedEventArgs Constructor | Riptide Docs",
    "keywords": "ServerDisconnectedEventArgs Constructor Namespace : Riptide Assembly : RiptideNetworking.dll ServerDisconnectedEventArgs(Connection, DisconnectReason) Initializes event data. public ServerDisconnectedEventArgs(Connection client, DisconnectReason reason) Parameters Connection client The client that disconnected. DisconnectReason reason The reason for the disconnection."
  },
  "api/Riptide.ServerDisconnectedEventArgs.html": {
    "href": "api/Riptide.ServerDisconnectedEventArgs.html",
    "title": "ServerDisconnectedEventArgs Class | Riptide Docs",
    "keywords": "ServerDisconnectedEventArgs Class Namespace : Riptide Assembly : RiptideNetworking.dll Contains event data for when a client disconnects from the server. public class ServerDisconnectedEventArgs : EventArgs Inheritance Object ServerDisconnectedEventArgs Constructors ServerDisconnectedEventArgs(Connection, DisconnectReason) Initializes event data. Fields Client The client that disconnected. Reason The reason for the disconnection."
  },
  "api/Riptide.ServerDisconnectedEventArgs.Reason.html": {
    "href": "api/Riptide.ServerDisconnectedEventArgs.Reason.html",
    "title": "Reason Field | Riptide Docs",
    "keywords": "Reason Field Namespace : Riptide Assembly : RiptideNetworking.dll The reason for the disconnection. public readonly DisconnectReason Reason Returns DisconnectReason"
  },
  "api/Riptide.Transports.ConnectedEventArgs.Connection.html": {
    "href": "api/Riptide.Transports.ConnectedEventArgs.Connection.html",
    "title": "Connection Field | Riptide Docs",
    "keywords": "Connection Field Namespace : Riptide.Transports Assembly : RiptideNetworking.dll The newly established connection. public readonly Connection Connection Returns Connection"
  },
  "api/Riptide.Transports.ConnectedEventArgs.-ctor.html": {
    "href": "api/Riptide.Transports.ConnectedEventArgs.-ctor.html",
    "title": "ConnectedEventArgs Constructor | Riptide Docs",
    "keywords": "ConnectedEventArgs Constructor Namespace : Riptide.Transports Assembly : RiptideNetworking.dll ConnectedEventArgs(Connection) Initializes event data. public ConnectedEventArgs(Connection connection) Parameters Connection connection The newly established connection."
  },
  "api/Riptide.Transports.ConnectedEventArgs.html": {
    "href": "api/Riptide.Transports.ConnectedEventArgs.html",
    "title": "ConnectedEventArgs Class | Riptide Docs",
    "keywords": "ConnectedEventArgs Class Namespace : Riptide.Transports Assembly : RiptideNetworking.dll Contains event data for when a server's transport successfully establishes a connection to a client. public class ConnectedEventArgs : object Inheritance Object ConnectedEventArgs Constructors ConnectedEventArgs(Connection) Initializes event data. Fields Connection The newly established connection."
  },
  "api/Riptide.Transports.DataReceivedEventArgs.Amount.html": {
    "href": "api/Riptide.Transports.DataReceivedEventArgs.Amount.html",
    "title": "Amount Field | Riptide Docs",
    "keywords": "Amount Field Namespace : Riptide.Transports Assembly : RiptideNetworking.dll The number of bytes that were received. public readonly int Amount Returns Int32"
  },
  "api/Riptide.Transports.DataReceivedEventArgs.-ctor.html": {
    "href": "api/Riptide.Transports.DataReceivedEventArgs.-ctor.html",
    "title": "DataReceivedEventArgs Constructor | Riptide Docs",
    "keywords": "DataReceivedEventArgs Constructor Namespace : Riptide.Transports Assembly : RiptideNetworking.dll DataReceivedEventArgs(Byte[], Int32, Connection) Initializes event data. public DataReceivedEventArgs(byte[] dataBuffer, int amount, Connection fromConnection) Parameters Byte [] dataBuffer An array containing the received data. Int32 amount The number of bytes that were received. Connection fromConnection The connection which the data was received from."
  },
  "api/Riptide.Transports.DataReceivedEventArgs.DataBuffer.html": {
    "href": "api/Riptide.Transports.DataReceivedEventArgs.DataBuffer.html",
    "title": "DataBuffer Field | Riptide Docs",
    "keywords": "DataBuffer Field Namespace : Riptide.Transports Assembly : RiptideNetworking.dll An array containing the received data. public readonly byte[] DataBuffer Returns Byte []"
  },
  "api/Riptide.Transports.DataReceivedEventArgs.FromConnection.html": {
    "href": "api/Riptide.Transports.DataReceivedEventArgs.FromConnection.html",
    "title": "FromConnection Field | Riptide Docs",
    "keywords": "FromConnection Field Namespace : Riptide.Transports Assembly : RiptideNetworking.dll The connection which the data was received from. public readonly Connection FromConnection Returns Connection"
  },
  "api/Riptide.Transports.DataReceivedEventArgs.html": {
    "href": "api/Riptide.Transports.DataReceivedEventArgs.html",
    "title": "DataReceivedEventArgs Class | Riptide Docs",
    "keywords": "DataReceivedEventArgs Class Namespace : Riptide.Transports Assembly : RiptideNetworking.dll Contains event data for when a server's or client's transport receives data. public class DataReceivedEventArgs : object Inheritance Object DataReceivedEventArgs Constructors DataReceivedEventArgs(Byte[], Int32, Connection) Initializes event data. Fields Amount The number of bytes that were received. DataBuffer An array containing the received data. FromConnection The connection which the data was received from."
  },
  "api/Riptide.Transports.DisconnectedEventArgs.Connection.html": {
    "href": "api/Riptide.Transports.DisconnectedEventArgs.Connection.html",
    "title": "Connection Field | Riptide Docs",
    "keywords": "Connection Field Namespace : Riptide.Transports Assembly : RiptideNetworking.dll The closed connection. public readonly Connection Connection Returns Connection"
  },
  "api/Riptide.Transports.DisconnectedEventArgs.-ctor.html": {
    "href": "api/Riptide.Transports.DisconnectedEventArgs.-ctor.html",
    "title": "DisconnectedEventArgs Constructor | Riptide Docs",
    "keywords": "DisconnectedEventArgs Constructor Namespace : Riptide.Transports Assembly : RiptideNetworking.dll DisconnectedEventArgs(Connection, DisconnectReason) Initializes event data. public DisconnectedEventArgs(Connection connection, DisconnectReason reason) Parameters Connection connection The closed connection. DisconnectReason reason The reason for the disconnection."
  },
  "api/Riptide.Transports.DisconnectedEventArgs.html": {
    "href": "api/Riptide.Transports.DisconnectedEventArgs.html",
    "title": "DisconnectedEventArgs Class | Riptide Docs",
    "keywords": "DisconnectedEventArgs Class Namespace : Riptide.Transports Assembly : RiptideNetworking.dll Contains event data for when a server's or client's transport initiates or detects a disconnection. public class DisconnectedEventArgs : object Inheritance Object DisconnectedEventArgs Constructors DisconnectedEventArgs(Connection, DisconnectReason) Initializes event data. Fields Connection The closed connection. Reason The reason for the disconnection."
  },
  "api/Riptide.Transports.DisconnectedEventArgs.Reason.html": {
    "href": "api/Riptide.Transports.DisconnectedEventArgs.Reason.html",
    "title": "Reason Field | Riptide Docs",
    "keywords": "Reason Field Namespace : Riptide.Transports Assembly : RiptideNetworking.dll The reason for the disconnection. public readonly DisconnectReason Reason Returns DisconnectReason"
  },
  "api/Riptide.Transports.html": {
    "href": "api/Riptide.Transports.html",
    "title": "Riptide.Transports Namespace | Riptide Docs",
    "keywords": "Riptide.Transports Namespace Classes ConnectedEventArgs Contains event data for when a server's transport successfully establishes a connection to a client. DataReceivedEventArgs Contains event data for when a server's or client's transport receives data. DisconnectedEventArgs Contains event data for when a server's or client's transport initiates or detects a disconnection. Interfaces IClient Defines methods, properties, and events which every transport's client must implement. IPeer Defines methods, properties, and events which every transport's server and client must implement. IServer Defines methods, properties, and events which every transport's server must implement. Enums MessageHeader The header type of a Message ."
  },
  "api/Riptide.Transports.IClient.Connect.html": {
    "href": "api/Riptide.Transports.IClient.Connect.html",
    "title": "Connect Method | Riptide Docs",
    "keywords": "Connect Method Namespace : Riptide.Transports Assembly : RiptideNetworking.dll Connect(String, out Connection, out String) Starts the transport and attempts to connect to the given host address. bool Connect(string hostAddress, out Connection connection, out string connectError) Parameters String hostAddress The host address to connect to. Connection connection The pending connection. null if an issue occurred. String connectError The error message associated with the issue that occurred, if any. Returns Boolean true if a connection attempt will be made. false if an issue occurred (such as hostAddress being in an invalid format) and a connection attempt will not be made."
  },
  "api/Riptide.Transports.IClient.Connected.html": {
    "href": "api/Riptide.Transports.IClient.Connected.html",
    "title": "Connected Event | Riptide Docs",
    "keywords": "Connected Event Namespace : Riptide.Transports Assembly : RiptideNetworking.dll Invoked when a connection is established at the transport level. event EventHandler Connected Returns EventHandler"
  },
  "api/Riptide.Transports.IClient.ConnectionFailed.html": {
    "href": "api/Riptide.Transports.IClient.ConnectionFailed.html",
    "title": "ConnectionFailed Event | Riptide Docs",
    "keywords": "ConnectionFailed Event Namespace : Riptide.Transports Assembly : RiptideNetworking.dll Invoked when a connection attempt fails at the transport level. event EventHandler ConnectionFailed Returns EventHandler"
  },
  "api/Riptide.Transports.IClient.Disconnect.html": {
    "href": "api/Riptide.Transports.IClient.Disconnect.html",
    "title": "Disconnect Method | Riptide Docs",
    "keywords": "Disconnect Method Namespace : Riptide.Transports Assembly : RiptideNetworking.dll Disconnect() Closes the connection to the server. void Disconnect()"
  },
  "api/Riptide.Transports.IClient.html": {
    "href": "api/Riptide.Transports.IClient.html",
    "title": "IClient Interface | Riptide Docs",
    "keywords": "IClient Interface Namespace : Riptide.Transports Assembly : RiptideNetworking.dll Defines methods, properties, and events which every transport's client must implement. public interface IClient : IPeer Inherited Members IPeer.DataReceived IPeer.Disconnected IPeer.Poll() Methods Connect(String, out Connection, out String) Starts the transport and attempts to connect to the given host address. Disconnect() Closes the connection to the server. Events Connected Invoked when a connection is established at the transport level. ConnectionFailed Invoked when a connection attempt fails at the transport level."
  },
  "api/Riptide.Transports.IPeer.DataReceived.html": {
    "href": "api/Riptide.Transports.IPeer.DataReceived.html",
    "title": "DataReceived Event | Riptide Docs",
    "keywords": "DataReceived Event Namespace : Riptide.Transports Assembly : RiptideNetworking.dll Invoked when data is received by the transport. event EventHandler<DataReceivedEventArgs> DataReceived Returns EventHandler < DataReceivedEventArgs >"
  },
  "api/Riptide.Transports.IPeer.Disconnected.html": {
    "href": "api/Riptide.Transports.IPeer.Disconnected.html",
    "title": "Disconnected Event | Riptide Docs",
    "keywords": "Disconnected Event Namespace : Riptide.Transports Assembly : RiptideNetworking.dll Invoked when a disconnection is initiated or detected by the transport. event EventHandler<DisconnectedEventArgs> Disconnected Returns EventHandler < DisconnectedEventArgs >"
  },
  "api/Riptide.Transports.IPeer.html": {
    "href": "api/Riptide.Transports.IPeer.html",
    "title": "IPeer Interface | Riptide Docs",
    "keywords": "IPeer Interface Namespace : Riptide.Transports Assembly : RiptideNetworking.dll Defines methods, properties, and events which every transport's server and client must implement. public interface IPeer Methods Poll() Initiates handling of any received messages. Events DataReceived Invoked when data is received by the transport. Disconnected Invoked when a disconnection is initiated or detected by the transport."
  },
  "api/Riptide.Transports.IPeer.Poll.html": {
    "href": "api/Riptide.Transports.IPeer.Poll.html",
    "title": "Poll Method | Riptide Docs",
    "keywords": "Poll Method Namespace : Riptide.Transports Assembly : RiptideNetworking.dll Poll() Initiates handling of any received messages. void Poll()"
  },
  "api/Riptide.Transports.IServer.Close.html": {
    "href": "api/Riptide.Transports.IServer.Close.html",
    "title": "Close Method | Riptide Docs",
    "keywords": "Close Method Namespace : Riptide.Transports Assembly : RiptideNetworking.dll Close(Connection) Closes an active connection. void Close(Connection connection) Parameters Connection connection The connection to close."
  },
  "api/Riptide.Transports.IServer.Connected.html": {
    "href": "api/Riptide.Transports.IServer.Connected.html",
    "title": "Connected Event | Riptide Docs",
    "keywords": "Connected Event Namespace : Riptide.Transports Assembly : RiptideNetworking.dll Invoked when a connection is established at the transport level. event EventHandler<ConnectedEventArgs> Connected Returns EventHandler < ConnectedEventArgs >"
  },
  "api/Riptide.Transports.IServer.html": {
    "href": "api/Riptide.Transports.IServer.html",
    "title": "IServer Interface | Riptide Docs",
    "keywords": "IServer Interface Namespace : Riptide.Transports Assembly : RiptideNetworking.dll Defines methods, properties, and events which every transport's server must implement. public interface IServer : IPeer Inherited Members IPeer.DataReceived IPeer.Disconnected IPeer.Poll() Properties Port The local port that the server is running on. Methods Close(Connection) Closes an active connection. Shutdown() Closes all existing connections and stops listening for new connections. Start(UInt16) Starts the transport and begins listening for incoming connections. Events Connected Invoked when a connection is established at the transport level."
  },
  "api/Riptide.Transports.IServer.Port.html": {
    "href": "api/Riptide.Transports.IServer.Port.html",
    "title": "Port Property | Riptide Docs",
    "keywords": "Port Property Namespace : Riptide.Transports Assembly : RiptideNetworking.dll Port The local port that the server is running on. ushort Port { get; } Property Value UInt16"
  },
  "api/Riptide.Transports.IServer.Shutdown.html": {
    "href": "api/Riptide.Transports.IServer.Shutdown.html",
    "title": "Shutdown Method | Riptide Docs",
    "keywords": "Shutdown Method Namespace : Riptide.Transports Assembly : RiptideNetworking.dll Shutdown() Closes all existing connections and stops listening for new connections. void Shutdown()"
  },
  "api/Riptide.Transports.IServer.Start.html": {
    "href": "api/Riptide.Transports.IServer.Start.html",
    "title": "Start Method | Riptide Docs",
    "keywords": "Start Method Namespace : Riptide.Transports Assembly : RiptideNetworking.dll Start(UInt16) Starts the transport and begins listening for incoming connections. void Start(ushort port) Parameters UInt16 port The local port on which to listen for connections."
  },
  "api/Riptide.Transports.MessageHeader.html": {
    "href": "api/Riptide.Transports.MessageHeader.html",
    "title": "MessageHeader Enum | Riptide Docs",
    "keywords": "MessageHeader Enum Namespace : Riptide.Transports Assembly : RiptideNetworking.dll The header type of a Message . public enum MessageHeader : byte Fields Ack An internal unreliable ack message. AckExtra An internal unreliable ack message, used when acknowledging a sequence ID other than the last received one. ClientConnected An internal reliable client connected message. ClientDisconnected An internal reliable client disconnected message. Connect An internal unreliable connect message. Disconnect An internal unreliable disconnect message. Heartbeat An internal unreliable heartbeat message. Reject An internal unreliable connection rejection message. Reliable A reliable user message. Unreliable An unreliable user message. Welcome An internal reliable welcome message."
  },
  "api/Riptide.Transports.Tcp.html": {
    "href": "api/Riptide.Transports.Tcp.html",
    "title": "Riptide.Transports.Tcp Namespace | Riptide Docs",
    "keywords": "Riptide.Transports.Tcp Namespace Provides a low level transport which communicates via TCP sockets. This transport is intended to act as a fallback for situations where Riptide's default UDP transport can't establish a connection. It primarily exists because Apple's app review center appears to have issues handling UDP traffic , with UDP-only applications frequently being rejected due to connection issues. Apple's devices do support UDP traffic—it's only their app review center that apparently doesn't allow UDP. To work around this, you can start by trying to connect with the UDP transport, and then automatically try again with the TCP transport if that connection fails. This way your end users should end up connecting via UDP, and TCP will only be used in cases where UDP doesn't work. Important Due to its very niche purpose, the TCP transport has undergone limited testing and may have more unresolved issues than usual. Classes TcpClient A client which can connect to a TcpServer . TcpConnection Represents a connection to a TcpServer or TcpClient . TcpPeer Provides base send & receive functionality for TcpServer and TcpClient . TcpServer A server which can accept connections from TcpClient s."
  },
  "api/Riptide.Transports.Tcp.TcpClient.Connect.html": {
    "href": "api/Riptide.Transports.Tcp.TcpClient.Connect.html",
    "title": "Connect Method | Riptide Docs",
    "keywords": "Connect Method Namespace : Riptide.Transports.Tcp Assembly : RiptideNetworking.dll Connect(String, out Connection, out String) Starts the transport and attempts to connect to the given host address. public bool Connect(string hostAddress, out Connection connection, out string connectError) Parameters String hostAddress The host address to connect to. Connection connection The pending connection. null if an issue occurred. String connectError The error message associated with the issue that occurred, if any. Returns Boolean true if a connection attempt will be made. false if an issue occurred (such as hostAddress being in an invalid format) and a connection attempt will not be made. Implements IClient.Connect(String, out Connection, out String) Remarks Expects the host address to consist of an IP and port, separated by a colon. For example: 127.0.0.1:7777 ."
  },
  "api/Riptide.Transports.Tcp.TcpClient.Connected.html": {
    "href": "api/Riptide.Transports.Tcp.TcpClient.Connected.html",
    "title": "Connected Event | Riptide Docs",
    "keywords": "Connected Event Namespace : Riptide.Transports.Tcp Assembly : RiptideNetworking.dll Invoked when a connection is established at the transport level. public event EventHandler Connected Implements Connected Returns EventHandler"
  },
  "api/Riptide.Transports.Tcp.TcpClient.ConnectionFailed.html": {
    "href": "api/Riptide.Transports.Tcp.TcpClient.ConnectionFailed.html",
    "title": "ConnectionFailed Event | Riptide Docs",
    "keywords": "ConnectionFailed Event Namespace : Riptide.Transports.Tcp Assembly : RiptideNetworking.dll Invoked when a connection attempt fails at the transport level. public event EventHandler ConnectionFailed Implements ConnectionFailed Returns EventHandler"
  },
  "api/Riptide.Transports.Tcp.TcpClient.DataReceived.html": {
    "href": "api/Riptide.Transports.Tcp.TcpClient.DataReceived.html",
    "title": "DataReceived Event | Riptide Docs",
    "keywords": "DataReceived Event Namespace : Riptide.Transports.Tcp Assembly : RiptideNetworking.dll Invoked when data is received by the transport. public event EventHandler<DataReceivedEventArgs> DataReceived Implements DataReceived Returns EventHandler < DataReceivedEventArgs >"
  },
  "api/Riptide.Transports.Tcp.TcpClient.Disconnect.html": {
    "href": "api/Riptide.Transports.Tcp.TcpClient.Disconnect.html",
    "title": "Disconnect Method | Riptide Docs",
    "keywords": "Disconnect Method Namespace : Riptide.Transports.Tcp Assembly : RiptideNetworking.dll Disconnect() Closes the connection to the server. public void Disconnect() Implements IClient.Disconnect()"
  },
  "api/Riptide.Transports.Tcp.TcpClient.html": {
    "href": "api/Riptide.Transports.Tcp.TcpClient.html",
    "title": "TcpClient Class | Riptide Docs",
    "keywords": "TcpClient Class Namespace : Riptide.Transports.Tcp Assembly : RiptideNetworking.dll A client which can connect to a TcpServer . public class TcpClient : TcpPeer, IClient, IPeer Inheritance Object TcpPeer TcpClient Implements IClient IPeer Inherited Members TcpPeer.Disconnected TcpPeer.DefaultSocketBufferSize TcpPeer.socketBufferSize TcpPeer.socket TcpPeer.OnDisconnected(Connection, DisconnectReason) Methods Connect(String, out Connection, out String) Starts the transport and attempts to connect to the given host address. Disconnect() Closes the connection to the server. OnConnected() Invokes the Connected event. OnConnectionFailed() Invokes the ConnectionFailed event. OnDataReceived(Int32, TcpConnection) Handles received data. Poll() Initiates handling of any received messages. Events Connected Invoked when a connection is established at the transport level. ConnectionFailed Invoked when a connection attempt fails at the transport level. DataReceived Invoked when data is received by the transport."
  },
  "api/Riptide.Transports.Tcp.TcpClient.OnConnected.html": {
    "href": "api/Riptide.Transports.Tcp.TcpClient.OnConnected.html",
    "title": "OnConnected Method | Riptide Docs",
    "keywords": "OnConnected Method Namespace : Riptide.Transports.Tcp Assembly : RiptideNetworking.dll OnConnected() Invokes the Connected event. protected virtual void OnConnected()"
  },
  "api/Riptide.Transports.Tcp.TcpClient.OnConnectionFailed.html": {
    "href": "api/Riptide.Transports.Tcp.TcpClient.OnConnectionFailed.html",
    "title": "OnConnectionFailed Method | Riptide Docs",
    "keywords": "OnConnectionFailed Method Namespace : Riptide.Transports.Tcp Assembly : RiptideNetworking.dll OnConnectionFailed() Invokes the ConnectionFailed event. protected virtual void OnConnectionFailed()"
  },
  "api/Riptide.Transports.Tcp.TcpClient.OnDataReceived.html": {
    "href": "api/Riptide.Transports.Tcp.TcpClient.OnDataReceived.html",
    "title": "OnDataReceived Method | Riptide Docs",
    "keywords": "OnDataReceived Method Namespace : Riptide.Transports.Tcp Assembly : RiptideNetworking.dll OnDataReceived(Int32, TcpConnection) Handles received data. protected override void OnDataReceived(int amount, TcpConnection fromConnection) Parameters Int32 amount The number of bytes that were received. TcpConnection fromConnection The connection from which the data was received. Overrides TcpPeer.OnDataReceived(Int32, TcpConnection)"
  },
  "api/Riptide.Transports.Tcp.TcpClient.Poll.html": {
    "href": "api/Riptide.Transports.Tcp.TcpClient.Poll.html",
    "title": "Poll Method | Riptide Docs",
    "keywords": "Poll Method Namespace : Riptide.Transports.Tcp Assembly : RiptideNetworking.dll Poll() Initiates handling of any received messages. public void Poll() Implements IPeer.Poll()"
  },
  "api/Riptide.Transports.Tcp.TcpConnection.Equals.html": {
    "href": "api/Riptide.Transports.Tcp.TcpConnection.Equals.html",
    "title": "Equals Method | Riptide Docs",
    "keywords": "Equals Method Namespace : Riptide.Transports.Tcp Assembly : RiptideNetworking.dll Overloads Equals(Object) Equals(TcpConnection) Equals(Object) public override bool Equals(object obj) Parameters Object obj Returns Boolean Equals(TcpConnection) public bool Equals(TcpConnection other) Parameters TcpConnection other Returns Boolean"
  },
  "api/Riptide.Transports.Tcp.TcpConnection.GetHashCode.html": {
    "href": "api/Riptide.Transports.Tcp.TcpConnection.GetHashCode.html",
    "title": "GetHashCode Method | Riptide Docs",
    "keywords": "GetHashCode Method Namespace : Riptide.Transports.Tcp Assembly : RiptideNetworking.dll GetHashCode() public override int GetHashCode() Returns Int32"
  },
  "api/Riptide.Transports.Tcp.TcpConnection.html": {
    "href": "api/Riptide.Transports.Tcp.TcpConnection.html",
    "title": "TcpConnection Class | Riptide Docs",
    "keywords": "TcpConnection Class Namespace : Riptide.Transports.Tcp Assembly : RiptideNetworking.dll Represents a connection to a TcpServer or TcpClient . public class TcpConnection : Connection Inheritance Object Connection TcpConnection Implements IEquatable < TcpConnection > Inherited Members Connection.Id Connection.IsNotConnected Connection.IsConnecting Connection.IsPending Connection.IsConnected Connection.RTT Connection.SmoothRTT Connection.CanTimeout Connection.ResetTimeout() Fields RemoteEndPoint The endpoint representing the other end of the connection. Methods Equals(TcpConnection) Equals(Object) GetHashCode() Send(Byte[], Int32) Sends data. ToString() Operators Equality(TcpConnection, TcpConnection) Inequality(TcpConnection, TcpConnection)"
  },
  "api/Riptide.Transports.Tcp.TcpConnection.op_Equality.html": {
    "href": "api/Riptide.Transports.Tcp.TcpConnection.op_Equality.html",
    "title": "Equality Operator | Riptide Docs",
    "keywords": "Equality Operator Namespace : Riptide.Transports.Tcp Assembly : RiptideNetworking.dll Equality(TcpConnection, TcpConnection) public static bool operator ==(TcpConnection left, TcpConnection right) Parameters TcpConnection left TcpConnection right Returns Boolean"
  },
  "api/Riptide.Transports.Tcp.TcpConnection.op_Inequality.html": {
    "href": "api/Riptide.Transports.Tcp.TcpConnection.op_Inequality.html",
    "title": "Inequality Operator | Riptide Docs",
    "keywords": "Inequality Operator Namespace : Riptide.Transports.Tcp Assembly : RiptideNetworking.dll Inequality(TcpConnection, TcpConnection) public static bool operator !=(TcpConnection left, TcpConnection right) Parameters TcpConnection left TcpConnection right Returns Boolean"
  },
  "api/Riptide.Transports.Tcp.TcpConnection.RemoteEndPoint.html": {
    "href": "api/Riptide.Transports.Tcp.TcpConnection.RemoteEndPoint.html",
    "title": "RemoteEndPoint Field | Riptide Docs",
    "keywords": "RemoteEndPoint Field Namespace : Riptide.Transports.Tcp Assembly : RiptideNetworking.dll The endpoint representing the other end of the connection. public readonly IPEndPoint RemoteEndPoint Returns IPEndPoint"
  },
  "api/Riptide.Transports.Tcp.TcpConnection.Send.html": {
    "href": "api/Riptide.Transports.Tcp.TcpConnection.Send.html",
    "title": "Send Method | Riptide Docs",
    "keywords": "Send Method Namespace : Riptide.Transports.Tcp Assembly : RiptideNetworking.dll Send(Byte[], Int32) Sends data. protected override void Send(byte[] dataBuffer, int amount) Parameters Byte [] dataBuffer The array containing the data. Int32 amount The number of bytes in the array which should be sent. Overrides Connection.Send(Byte[], Int32)"
  },
  "api/Riptide.Transports.Tcp.TcpConnection.ToString.html": {
    "href": "api/Riptide.Transports.Tcp.TcpConnection.ToString.html",
    "title": "ToString Method | Riptide Docs",
    "keywords": "ToString Method Namespace : Riptide.Transports.Tcp Assembly : RiptideNetworking.dll ToString() public override string ToString() Returns String"
  },
  "api/Riptide.Transports.Tcp.TcpPeer.-ctor.html": {
    "href": "api/Riptide.Transports.Tcp.TcpPeer.-ctor.html",
    "title": "TcpPeer Constructor | Riptide Docs",
    "keywords": "TcpPeer Constructor Namespace : Riptide.Transports.Tcp Assembly : RiptideNetworking.dll TcpPeer(Int32) Initializes the transport. protected TcpPeer(int socketBufferSize = null) Parameters Int32 socketBufferSize How big the socket's send and receive buffers should be."
  },
  "api/Riptide.Transports.Tcp.TcpPeer.DefaultSocketBufferSize.html": {
    "href": "api/Riptide.Transports.Tcp.TcpPeer.DefaultSocketBufferSize.html",
    "title": "DefaultSocketBufferSize Field | Riptide Docs",
    "keywords": "DefaultSocketBufferSize Field Namespace : Riptide.Transports.Tcp Assembly : RiptideNetworking.dll The default size used for the socket's send and receive buffers. protected const int DefaultSocketBufferSize = null Returns Int32"
  },
  "api/Riptide.Transports.Tcp.TcpPeer.Disconnected.html": {
    "href": "api/Riptide.Transports.Tcp.TcpPeer.Disconnected.html",
    "title": "Disconnected Event | Riptide Docs",
    "keywords": "Disconnected Event Namespace : Riptide.Transports.Tcp Assembly : RiptideNetworking.dll Invoked when a disconnection is initiated or detected by the transport. public event EventHandler<DisconnectedEventArgs> Disconnected Returns EventHandler < DisconnectedEventArgs >"
  },
  "api/Riptide.Transports.Tcp.TcpPeer.html": {
    "href": "api/Riptide.Transports.Tcp.TcpPeer.html",
    "title": "TcpPeer Class | Riptide Docs",
    "keywords": "TcpPeer Class Namespace : Riptide.Transports.Tcp Assembly : RiptideNetworking.dll Provides base send & receive functionality for TcpServer and TcpClient . public abstract class TcpPeer : object Inheritance Object TcpPeer TcpClient TcpServer Constructors TcpPeer(Int32) Initializes the transport. Fields DefaultSocketBufferSize The default size used for the socket's send and receive buffers. socket The main socket, either used for listening for connections or for sending and receiving data. socketBufferSize The size to use for the socket's send and receive buffers. Methods OnDataReceived(Int32, TcpConnection) Handles received data. OnDisconnected(Connection, DisconnectReason) Invokes the Disconnected event. Events Disconnected Invoked when a disconnection is initiated or detected by the transport."
  },
  "api/Riptide.Transports.Tcp.TcpPeer.OnDataReceived.html": {
    "href": "api/Riptide.Transports.Tcp.TcpPeer.OnDataReceived.html",
    "title": "OnDataReceived Method | Riptide Docs",
    "keywords": "OnDataReceived Method Namespace : Riptide.Transports.Tcp Assembly : RiptideNetworking.dll OnDataReceived(Int32, TcpConnection) Handles received data. protected abstract void OnDataReceived(int amount, TcpConnection fromConnection) Parameters Int32 amount The number of bytes that were received. TcpConnection fromConnection The connection from which the data was received."
  },
  "api/Riptide.Transports.Tcp.TcpPeer.OnDisconnected.html": {
    "href": "api/Riptide.Transports.Tcp.TcpPeer.OnDisconnected.html",
    "title": "OnDisconnected Method | Riptide Docs",
    "keywords": "OnDisconnected Method Namespace : Riptide.Transports.Tcp Assembly : RiptideNetworking.dll OnDisconnected(Connection, DisconnectReason) Invokes the Disconnected event. protected virtual void OnDisconnected(Connection connection, DisconnectReason reason) Parameters Connection connection The closed connection. DisconnectReason reason The reason for the disconnection."
  },
  "api/Riptide.Transports.Tcp.TcpPeer.socket.html": {
    "href": "api/Riptide.Transports.Tcp.TcpPeer.socket.html",
    "title": "socket Field | Riptide Docs",
    "keywords": "socket Field Namespace : Riptide.Transports.Tcp Assembly : RiptideNetworking.dll The main socket, either used for listening for connections or for sending and receiving data. protected Socket socket Returns Socket"
  },
  "api/Riptide.Transports.Tcp.TcpPeer.socketBufferSize.html": {
    "href": "api/Riptide.Transports.Tcp.TcpPeer.socketBufferSize.html",
    "title": "socketBufferSize Field | Riptide Docs",
    "keywords": "socketBufferSize Field Namespace : Riptide.Transports.Tcp Assembly : RiptideNetworking.dll The size to use for the socket's send and receive buffers. protected readonly int socketBufferSize Returns Int32"
  },
  "api/Riptide.Transports.Tcp.TcpServer.Close.html": {
    "href": "api/Riptide.Transports.Tcp.TcpServer.Close.html",
    "title": "Close Method | Riptide Docs",
    "keywords": "Close Method Namespace : Riptide.Transports.Tcp Assembly : RiptideNetworking.dll Close(Connection) Closes an active connection. public void Close(Connection connection) Parameters Connection connection The connection to close. Implements IServer.Close(Connection)"
  },
  "api/Riptide.Transports.Tcp.TcpServer.Connected.html": {
    "href": "api/Riptide.Transports.Tcp.TcpServer.Connected.html",
    "title": "Connected Event | Riptide Docs",
    "keywords": "Connected Event Namespace : Riptide.Transports.Tcp Assembly : RiptideNetworking.dll Invoked when a connection is established at the transport level. public event EventHandler<ConnectedEventArgs> Connected Implements Connected Returns EventHandler < ConnectedEventArgs >"
  },
  "api/Riptide.Transports.Tcp.TcpServer.-ctor.html": {
    "href": "api/Riptide.Transports.Tcp.TcpServer.-ctor.html",
    "title": "TcpServer Constructor | Riptide Docs",
    "keywords": "TcpServer Constructor Namespace : Riptide.Transports.Tcp Assembly : RiptideNetworking.dll TcpServer(Int32) Initializes the transport. public TcpServer(int socketBufferSize = null) Parameters Int32 socketBufferSize How big the socket's send and receive buffers should be."
  },
  "api/Riptide.Transports.Tcp.TcpServer.DataReceived.html": {
    "href": "api/Riptide.Transports.Tcp.TcpServer.DataReceived.html",
    "title": "DataReceived Event | Riptide Docs",
    "keywords": "DataReceived Event Namespace : Riptide.Transports.Tcp Assembly : RiptideNetworking.dll Invoked when data is received by the transport. public event EventHandler<DataReceivedEventArgs> DataReceived Implements DataReceived Returns EventHandler < DataReceivedEventArgs >"
  },
  "api/Riptide.Transports.Tcp.TcpServer.html": {
    "href": "api/Riptide.Transports.Tcp.TcpServer.html",
    "title": "TcpServer Class | Riptide Docs",
    "keywords": "TcpServer Class Namespace : Riptide.Transports.Tcp Assembly : RiptideNetworking.dll A server which can accept connections from TcpClient s. public class TcpServer : TcpPeer, IServer, IPeer Inheritance Object TcpPeer TcpServer Implements IServer IPeer Inherited Members TcpPeer.Disconnected TcpPeer.DefaultSocketBufferSize TcpPeer.socketBufferSize TcpPeer.socket TcpPeer.OnDisconnected(Connection, DisconnectReason) Constructors TcpServer(Int32) Initializes the transport. Properties MaxPendingConnections The maximum number of pending connections to allow at any given time. Port The local port that the server is running on. Methods Close(Connection) Closes an active connection. OnConnected(Connection) Invokes the Connected event. OnDataReceived(Int32, TcpConnection) Handles received data. Poll() Initiates handling of any received messages. Shutdown() Closes all existing connections and stops listening for new connections. Start(UInt16) Starts the transport and begins listening for incoming connections. Events Connected Invoked when a connection is established at the transport level. DataReceived Invoked when data is received by the transport."
  },
  "api/Riptide.Transports.Tcp.TcpServer.MaxPendingConnections.html": {
    "href": "api/Riptide.Transports.Tcp.TcpServer.MaxPendingConnections.html",
    "title": "MaxPendingConnections Property | Riptide Docs",
    "keywords": "MaxPendingConnections Property Namespace : Riptide.Transports.Tcp Assembly : RiptideNetworking.dll MaxPendingConnections The maximum number of pending connections to allow at any given time. public int MaxPendingConnections { get; } Property Value Int32"
  },
  "api/Riptide.Transports.Tcp.TcpServer.OnConnected.html": {
    "href": "api/Riptide.Transports.Tcp.TcpServer.OnConnected.html",
    "title": "OnConnected Method | Riptide Docs",
    "keywords": "OnConnected Method Namespace : Riptide.Transports.Tcp Assembly : RiptideNetworking.dll OnConnected(Connection) Invokes the Connected event. protected virtual void OnConnected(Connection connection) Parameters Connection connection The successfully established connection."
  },
  "api/Riptide.Transports.Tcp.TcpServer.OnDataReceived.html": {
    "href": "api/Riptide.Transports.Tcp.TcpServer.OnDataReceived.html",
    "title": "OnDataReceived Method | Riptide Docs",
    "keywords": "OnDataReceived Method Namespace : Riptide.Transports.Tcp Assembly : RiptideNetworking.dll OnDataReceived(Int32, TcpConnection) Handles received data. protected override void OnDataReceived(int amount, TcpConnection fromConnection) Parameters Int32 amount The number of bytes that were received. TcpConnection fromConnection The connection from which the data was received. Overrides TcpPeer.OnDataReceived(Int32, TcpConnection)"
  },
  "api/Riptide.Transports.Tcp.TcpServer.Poll.html": {
    "href": "api/Riptide.Transports.Tcp.TcpServer.Poll.html",
    "title": "Poll Method | Riptide Docs",
    "keywords": "Poll Method Namespace : Riptide.Transports.Tcp Assembly : RiptideNetworking.dll Poll() Initiates handling of any received messages. public void Poll() Implements IPeer.Poll()"
  },
  "api/Riptide.Transports.Tcp.TcpServer.Port.html": {
    "href": "api/Riptide.Transports.Tcp.TcpServer.Port.html",
    "title": "Port Property | Riptide Docs",
    "keywords": "Port Property Namespace : Riptide.Transports.Tcp Assembly : RiptideNetworking.dll Port The local port that the server is running on. public ushort Port { get; } Property Value UInt16 Implements IServer.Port"
  },
  "api/Riptide.Transports.Tcp.TcpServer.Shutdown.html": {
    "href": "api/Riptide.Transports.Tcp.TcpServer.Shutdown.html",
    "title": "Shutdown Method | Riptide Docs",
    "keywords": "Shutdown Method Namespace : Riptide.Transports.Tcp Assembly : RiptideNetworking.dll Shutdown() Closes all existing connections and stops listening for new connections. public void Shutdown() Implements IServer.Shutdown()"
  },
  "api/Riptide.Transports.Tcp.TcpServer.Start.html": {
    "href": "api/Riptide.Transports.Tcp.TcpServer.Start.html",
    "title": "Start Method | Riptide Docs",
    "keywords": "Start Method Namespace : Riptide.Transports.Tcp Assembly : RiptideNetworking.dll Start(UInt16) Starts the transport and begins listening for incoming connections. public void Start(ushort port) Parameters UInt16 port The local port on which to listen for connections. Implements IServer.Start(UInt16)"
  },
  "api/Riptide.Transports.Udp.html": {
    "href": "api/Riptide.Transports.Udp.html",
    "title": "Riptide.Transports.Udp Namespace | Riptide Docs",
    "keywords": "Riptide.Transports.Udp Namespace Classes UdpClient A client which can connect to a UdpServer . UdpConnection Represents a connection to a UdpServer or UdpClient . UdpPeer Provides base send & receive functionality for UdpServer and UdpClient . UdpServer A server which can accept connections from UdpClient s. Enums SocketMode The kind of socket to create."
  },
  "api/Riptide.Transports.Udp.SocketMode.html": {
    "href": "api/Riptide.Transports.Udp.SocketMode.html",
    "title": "SocketMode Enum | Riptide Docs",
    "keywords": "SocketMode Enum Namespace : Riptide.Transports.Udp Assembly : RiptideNetworking.dll The kind of socket to create. public enum SocketMode : int Fields Both Dual-mode. Works with both IPv4 and IPv6. IPv4Only IPv4 only mode. IPv6Only IPv6 only mode."
  },
  "api/Riptide.Transports.Udp.UdpClient.Connect.html": {
    "href": "api/Riptide.Transports.Udp.UdpClient.Connect.html",
    "title": "Connect Method | Riptide Docs",
    "keywords": "Connect Method Namespace : Riptide.Transports.Udp Assembly : RiptideNetworking.dll Connect(String, out Connection, out String) Starts the transport and attempts to connect to the given host address. public bool Connect(string hostAddress, out Connection connection, out string connectError) Parameters String hostAddress The host address to connect to. Connection connection The pending connection. null if an issue occurred. String connectError The error message associated with the issue that occurred, if any. Returns Boolean true if a connection attempt will be made. false if an issue occurred (such as hostAddress being in an invalid format) and a connection attempt will not be made. Implements IClient.Connect(String, out Connection, out String) Remarks Expects the host address to consist of an IP and port, separated by a colon. For example: 127.0.0.1:7777 ."
  },
  "api/Riptide.Transports.Udp.UdpClient.Connected.html": {
    "href": "api/Riptide.Transports.Udp.UdpClient.Connected.html",
    "title": "Connected Event | Riptide Docs",
    "keywords": "Connected Event Namespace : Riptide.Transports.Udp Assembly : RiptideNetworking.dll Invoked when a connection is established at the transport level. public event EventHandler Connected Implements Connected Returns EventHandler"
  },
  "api/Riptide.Transports.Udp.UdpClient.ConnectionFailed.html": {
    "href": "api/Riptide.Transports.Udp.UdpClient.ConnectionFailed.html",
    "title": "ConnectionFailed Event | Riptide Docs",
    "keywords": "ConnectionFailed Event Namespace : Riptide.Transports.Udp Assembly : RiptideNetworking.dll Invoked when a connection attempt fails at the transport level. public event EventHandler ConnectionFailed Implements ConnectionFailed Returns EventHandler"
  },
  "api/Riptide.Transports.Udp.UdpClient.-ctor.html": {
    "href": "api/Riptide.Transports.Udp.UdpClient.-ctor.html",
    "title": "UdpClient Constructor | Riptide Docs",
    "keywords": "UdpClient Constructor Namespace : Riptide.Transports.Udp Assembly : RiptideNetworking.dll UdpClient(SocketMode, Int32) Initializes the transport. public UdpClient(SocketMode mode = SocketMode.Both, int socketBufferSize = null) Parameters SocketMode mode Whether to create an IPv4 only, IPv6 only, or dual-mode socket. Int32 socketBufferSize How big the socket's send and receive buffers should be."
  },
  "api/Riptide.Transports.Udp.UdpClient.DataReceived.html": {
    "href": "api/Riptide.Transports.Udp.UdpClient.DataReceived.html",
    "title": "DataReceived Event | Riptide Docs",
    "keywords": "DataReceived Event Namespace : Riptide.Transports.Udp Assembly : RiptideNetworking.dll Invoked when data is received by the transport. public event EventHandler<DataReceivedEventArgs> DataReceived Implements DataReceived Returns EventHandler < DataReceivedEventArgs >"
  },
  "api/Riptide.Transports.Udp.UdpClient.Disconnect.html": {
    "href": "api/Riptide.Transports.Udp.UdpClient.Disconnect.html",
    "title": "Disconnect Method | Riptide Docs",
    "keywords": "Disconnect Method Namespace : Riptide.Transports.Udp Assembly : RiptideNetworking.dll Disconnect() Closes the connection to the server. public void Disconnect() Implements IClient.Disconnect()"
  },
  "api/Riptide.Transports.Udp.UdpClient.html": {
    "href": "api/Riptide.Transports.Udp.UdpClient.html",
    "title": "UdpClient Class | Riptide Docs",
    "keywords": "UdpClient Class Namespace : Riptide.Transports.Udp Assembly : RiptideNetworking.dll A client which can connect to a UdpServer . public class UdpClient : UdpPeer, IClient, IPeer Inheritance Object UdpPeer UdpClient Implements IClient IPeer Inherited Members UdpPeer.Disconnected UdpPeer.DefaultSocketBufferSize UdpPeer.mode UdpPeer.Poll() UdpPeer.OpenSocket(UInt16) UdpPeer.CloseSocket() UdpPeer.OnDisconnected(Connection, DisconnectReason) Constructors UdpClient(SocketMode, Int32) Initializes the transport. Methods Connect(String, out Connection, out String) Starts the transport and attempts to connect to the given host address. Disconnect() Closes the connection to the server. OnConnected() Invokes the Connected event. OnConnectionFailed() Invokes the ConnectionFailed event. OnDataReceived(Byte[], Int32, IPEndPoint) Handles received data. Events Connected Invoked when a connection is established at the transport level. ConnectionFailed Invoked when a connection attempt fails at the transport level. DataReceived Invoked when data is received by the transport."
  },
  "api/Riptide.Transports.Udp.UdpClient.OnConnected.html": {
    "href": "api/Riptide.Transports.Udp.UdpClient.OnConnected.html",
    "title": "OnConnected Method | Riptide Docs",
    "keywords": "OnConnected Method Namespace : Riptide.Transports.Udp Assembly : RiptideNetworking.dll OnConnected() Invokes the Connected event. protected virtual void OnConnected()"
  },
  "api/Riptide.Transports.Udp.UdpClient.OnConnectionFailed.html": {
    "href": "api/Riptide.Transports.Udp.UdpClient.OnConnectionFailed.html",
    "title": "OnConnectionFailed Method | Riptide Docs",
    "keywords": "OnConnectionFailed Method Namespace : Riptide.Transports.Udp Assembly : RiptideNetworking.dll OnConnectionFailed() Invokes the ConnectionFailed event. protected virtual void OnConnectionFailed()"
  },
  "api/Riptide.Transports.Udp.UdpClient.OnDataReceived.html": {
    "href": "api/Riptide.Transports.Udp.UdpClient.OnDataReceived.html",
    "title": "OnDataReceived Method | Riptide Docs",
    "keywords": "OnDataReceived Method Namespace : Riptide.Transports.Udp Assembly : RiptideNetworking.dll OnDataReceived(Byte[], Int32, IPEndPoint) Handles received data. protected override void OnDataReceived(byte[] dataBuffer, int amount, IPEndPoint fromEndPoint) Parameters Byte [] dataBuffer A byte array containing the received data. Int32 amount The number of bytes in dataBuffer used by the received data. IPEndPoint fromEndPoint The endpoint from which the data was received. Overrides UdpPeer.OnDataReceived(Byte[], Int32, IPEndPoint)"
  },
  "api/Riptide.Transports.Udp.UdpConnection.Equals.html": {
    "href": "api/Riptide.Transports.Udp.UdpConnection.Equals.html",
    "title": "Equals Method | Riptide Docs",
    "keywords": "Equals Method Namespace : Riptide.Transports.Udp Assembly : RiptideNetworking.dll Overloads Equals(Object) Equals(UdpConnection) Equals(Object) public override bool Equals(object obj) Parameters Object obj Returns Boolean Equals(UdpConnection) public bool Equals(UdpConnection other) Parameters UdpConnection other Returns Boolean"
  },
  "api/Riptide.Transports.Udp.UdpConnection.GetHashCode.html": {
    "href": "api/Riptide.Transports.Udp.UdpConnection.GetHashCode.html",
    "title": "GetHashCode Method | Riptide Docs",
    "keywords": "GetHashCode Method Namespace : Riptide.Transports.Udp Assembly : RiptideNetworking.dll GetHashCode() public override int GetHashCode() Returns Int32"
  },
  "api/Riptide.Transports.Udp.UdpConnection.html": {
    "href": "api/Riptide.Transports.Udp.UdpConnection.html",
    "title": "UdpConnection Class | Riptide Docs",
    "keywords": "UdpConnection Class Namespace : Riptide.Transports.Udp Assembly : RiptideNetworking.dll Represents a connection to a UdpServer or UdpClient . public class UdpConnection : Connection Inheritance Object Connection UdpConnection Implements IEquatable < UdpConnection > Inherited Members Connection.Id Connection.IsNotConnected Connection.IsConnecting Connection.IsPending Connection.IsConnected Connection.RTT Connection.SmoothRTT Connection.CanTimeout Connection.ResetTimeout() Fields RemoteEndPoint The endpoint representing the other end of the connection. Methods Equals(UdpConnection) Equals(Object) GetHashCode() Send(Byte[], Int32) Sends data. ToString() Operators Equality(UdpConnection, UdpConnection) Inequality(UdpConnection, UdpConnection)"
  },
  "api/Riptide.Transports.Udp.UdpConnection.op_Equality.html": {
    "href": "api/Riptide.Transports.Udp.UdpConnection.op_Equality.html",
    "title": "Equality Operator | Riptide Docs",
    "keywords": "Equality Operator Namespace : Riptide.Transports.Udp Assembly : RiptideNetworking.dll Equality(UdpConnection, UdpConnection) public static bool operator ==(UdpConnection left, UdpConnection right) Parameters UdpConnection left UdpConnection right Returns Boolean"
  },
  "api/Riptide.Transports.Udp.UdpConnection.op_Inequality.html": {
    "href": "api/Riptide.Transports.Udp.UdpConnection.op_Inequality.html",
    "title": "Inequality Operator | Riptide Docs",
    "keywords": "Inequality Operator Namespace : Riptide.Transports.Udp Assembly : RiptideNetworking.dll Inequality(UdpConnection, UdpConnection) public static bool operator !=(UdpConnection left, UdpConnection right) Parameters UdpConnection left UdpConnection right Returns Boolean"
  },
  "api/Riptide.Transports.Udp.UdpConnection.RemoteEndPoint.html": {
    "href": "api/Riptide.Transports.Udp.UdpConnection.RemoteEndPoint.html",
    "title": "RemoteEndPoint Field | Riptide Docs",
    "keywords": "RemoteEndPoint Field Namespace : Riptide.Transports.Udp Assembly : RiptideNetworking.dll The endpoint representing the other end of the connection. public readonly IPEndPoint RemoteEndPoint Returns IPEndPoint"
  },
  "api/Riptide.Transports.Udp.UdpConnection.Send.html": {
    "href": "api/Riptide.Transports.Udp.UdpConnection.Send.html",
    "title": "Send Method | Riptide Docs",
    "keywords": "Send Method Namespace : Riptide.Transports.Udp Assembly : RiptideNetworking.dll Send(Byte[], Int32) Sends data. protected override void Send(byte[] dataBuffer, int amount) Parameters Byte [] dataBuffer The array containing the data. Int32 amount The number of bytes in the array which should be sent. Overrides Connection.Send(Byte[], Int32)"
  },
  "api/Riptide.Transports.Udp.UdpConnection.ToString.html": {
    "href": "api/Riptide.Transports.Udp.UdpConnection.ToString.html",
    "title": "ToString Method | Riptide Docs",
    "keywords": "ToString Method Namespace : Riptide.Transports.Udp Assembly : RiptideNetworking.dll ToString() public override string ToString() Returns String"
  },
  "api/Riptide.Transports.Udp.UdpPeer.CloseSocket.html": {
    "href": "api/Riptide.Transports.Udp.UdpPeer.CloseSocket.html",
    "title": "CloseSocket Method | Riptide Docs",
    "keywords": "CloseSocket Method Namespace : Riptide.Transports.Udp Assembly : RiptideNetworking.dll CloseSocket() Closes the socket and stops the transport. protected void CloseSocket()"
  },
  "api/Riptide.Transports.Udp.UdpPeer.-ctor.html": {
    "href": "api/Riptide.Transports.Udp.UdpPeer.-ctor.html",
    "title": "UdpPeer Constructor | Riptide Docs",
    "keywords": "UdpPeer Constructor Namespace : Riptide.Transports.Udp Assembly : RiptideNetworking.dll UdpPeer(SocketMode, Int32) Initializes the transport. protected UdpPeer(SocketMode mode, int socketBufferSize) Parameters SocketMode mode Whether to create an IPv4 only, IPv6 only, or dual-mode socket. Int32 socketBufferSize How big the socket's send and receive buffers should be."
  },
  "api/Riptide.Transports.Udp.UdpPeer.DefaultSocketBufferSize.html": {
    "href": "api/Riptide.Transports.Udp.UdpPeer.DefaultSocketBufferSize.html",
    "title": "DefaultSocketBufferSize Field | Riptide Docs",
    "keywords": "DefaultSocketBufferSize Field Namespace : Riptide.Transports.Udp Assembly : RiptideNetworking.dll The default size used for the socket's send and receive buffers. protected const int DefaultSocketBufferSize = null Returns Int32"
  },
  "api/Riptide.Transports.Udp.UdpPeer.Disconnected.html": {
    "href": "api/Riptide.Transports.Udp.UdpPeer.Disconnected.html",
    "title": "Disconnected Event | Riptide Docs",
    "keywords": "Disconnected Event Namespace : Riptide.Transports.Udp Assembly : RiptideNetworking.dll Invoked when a disconnection is initiated or detected by the transport. public event EventHandler<DisconnectedEventArgs> Disconnected Returns EventHandler < DisconnectedEventArgs >"
  },
  "api/Riptide.Transports.Udp.UdpPeer.html": {
    "href": "api/Riptide.Transports.Udp.UdpPeer.html",
    "title": "UdpPeer Class | Riptide Docs",
    "keywords": "UdpPeer Class Namespace : Riptide.Transports.Udp Assembly : RiptideNetworking.dll Provides base send & receive functionality for UdpServer and UdpClient . public abstract class UdpPeer : object Inheritance Object UdpPeer UdpClient UdpServer Constructors UdpPeer(SocketMode, Int32) Initializes the transport. Fields DefaultSocketBufferSize The default size used for the socket's send and receive buffers. mode Whether to create an IPv4 only, IPv6 only, or dual-mode socket. Methods CloseSocket() Closes the socket and stops the transport. OnDataReceived(Byte[], Int32, IPEndPoint) Handles received data. OnDisconnected(Connection, DisconnectReason) Invokes the Disconnected event. OpenSocket(UInt16) Opens the socket and starts the transport. Poll() Initiates handling of any received messages. Events Disconnected Invoked when a disconnection is initiated or detected by the transport."
  },
  "api/Riptide.Transports.Udp.UdpPeer.mode.html": {
    "href": "api/Riptide.Transports.Udp.UdpPeer.mode.html",
    "title": "mode Field | Riptide Docs",
    "keywords": "mode Field Namespace : Riptide.Transports.Udp Assembly : RiptideNetworking.dll Whether to create an IPv4 only, IPv6 only, or dual-mode socket. protected readonly SocketMode mode Returns SocketMode"
  },
  "api/Riptide.Transports.Udp.UdpPeer.OnDataReceived.html": {
    "href": "api/Riptide.Transports.Udp.UdpPeer.OnDataReceived.html",
    "title": "OnDataReceived Method | Riptide Docs",
    "keywords": "OnDataReceived Method Namespace : Riptide.Transports.Udp Assembly : RiptideNetworking.dll OnDataReceived(Byte[], Int32, IPEndPoint) Handles received data. protected abstract void OnDataReceived(byte[] dataBuffer, int amount, IPEndPoint fromEndPoint) Parameters Byte [] dataBuffer A byte array containing the received data. Int32 amount The number of bytes in dataBuffer used by the received data. IPEndPoint fromEndPoint The endpoint from which the data was received."
  },
  "api/Riptide.Transports.Udp.UdpPeer.OnDisconnected.html": {
    "href": "api/Riptide.Transports.Udp.UdpPeer.OnDisconnected.html",
    "title": "OnDisconnected Method | Riptide Docs",
    "keywords": "OnDisconnected Method Namespace : Riptide.Transports.Udp Assembly : RiptideNetworking.dll OnDisconnected(Connection, DisconnectReason) Invokes the Disconnected event. protected virtual void OnDisconnected(Connection connection, DisconnectReason reason) Parameters Connection connection The closed connection. DisconnectReason reason The reason for the disconnection."
  },
  "api/Riptide.Transports.Udp.UdpPeer.OpenSocket.html": {
    "href": "api/Riptide.Transports.Udp.UdpPeer.OpenSocket.html",
    "title": "OpenSocket Method | Riptide Docs",
    "keywords": "OpenSocket Method Namespace : Riptide.Transports.Udp Assembly : RiptideNetworking.dll OpenSocket(UInt16) Opens the socket and starts the transport. protected void OpenSocket(ushort port = null) Parameters UInt16 port The port to bind the socket to."
  },
  "api/Riptide.Transports.Udp.UdpPeer.Poll.html": {
    "href": "api/Riptide.Transports.Udp.UdpPeer.Poll.html",
    "title": "Poll Method | Riptide Docs",
    "keywords": "Poll Method Namespace : Riptide.Transports.Udp Assembly : RiptideNetworking.dll Poll() Initiates handling of any received messages. public void Poll()"
  },
  "api/Riptide.Transports.Udp.UdpServer.Close.html": {
    "href": "api/Riptide.Transports.Udp.UdpServer.Close.html",
    "title": "Close Method | Riptide Docs",
    "keywords": "Close Method Namespace : Riptide.Transports.Udp Assembly : RiptideNetworking.dll Close(Connection) Closes an active connection. public void Close(Connection connection) Parameters Connection connection The connection to close. Implements IServer.Close(Connection)"
  },
  "api/Riptide.Transports.Udp.UdpServer.Connected.html": {
    "href": "api/Riptide.Transports.Udp.UdpServer.Connected.html",
    "title": "Connected Event | Riptide Docs",
    "keywords": "Connected Event Namespace : Riptide.Transports.Udp Assembly : RiptideNetworking.dll Invoked when a connection is established at the transport level. public event EventHandler<ConnectedEventArgs> Connected Implements Connected Returns EventHandler < ConnectedEventArgs >"
  },
  "api/Riptide.Transports.Udp.UdpServer.-ctor.html": {
    "href": "api/Riptide.Transports.Udp.UdpServer.-ctor.html",
    "title": "UdpServer Constructor | Riptide Docs",
    "keywords": "UdpServer Constructor Namespace : Riptide.Transports.Udp Assembly : RiptideNetworking.dll UdpServer(SocketMode, Int32) Initializes the transport. public UdpServer(SocketMode mode = SocketMode.Both, int socketBufferSize = null) Parameters SocketMode mode Whether to create an IPv4 only, IPv6 only, or dual-mode socket. Int32 socketBufferSize How big the socket's send and receive buffers should be."
  },
  "api/Riptide.Transports.Udp.UdpServer.DataReceived.html": {
    "href": "api/Riptide.Transports.Udp.UdpServer.DataReceived.html",
    "title": "DataReceived Event | Riptide Docs",
    "keywords": "DataReceived Event Namespace : Riptide.Transports.Udp Assembly : RiptideNetworking.dll Invoked when data is received by the transport. public event EventHandler<DataReceivedEventArgs> DataReceived Implements DataReceived Returns EventHandler < DataReceivedEventArgs >"
  },
  "api/Riptide.Transports.Udp.UdpServer.html": {
    "href": "api/Riptide.Transports.Udp.UdpServer.html",
    "title": "UdpServer Class | Riptide Docs",
    "keywords": "UdpServer Class Namespace : Riptide.Transports.Udp Assembly : RiptideNetworking.dll A server which can accept connections from UdpClient s. public class UdpServer : UdpPeer, IServer, IPeer Inheritance Object UdpPeer UdpServer Implements IServer IPeer Inherited Members UdpPeer.Disconnected UdpPeer.DefaultSocketBufferSize UdpPeer.mode UdpPeer.Poll() UdpPeer.OpenSocket(UInt16) UdpPeer.CloseSocket() UdpPeer.OnDisconnected(Connection, DisconnectReason) Constructors UdpServer(SocketMode, Int32) Initializes the transport. Properties Port The local port that the server is running on. Methods Close(Connection) Closes an active connection. OnConnected(Connection) Invokes the Connected event. OnDataReceived(Byte[], Int32, IPEndPoint) Handles received data. Shutdown() Closes all existing connections and stops listening for new connections. Start(UInt16) Starts the transport and begins listening for incoming connections. Events Connected Invoked when a connection is established at the transport level. DataReceived Invoked when data is received by the transport."
  },
  "api/Riptide.Transports.Udp.UdpServer.OnConnected.html": {
    "href": "api/Riptide.Transports.Udp.UdpServer.OnConnected.html",
    "title": "OnConnected Method | Riptide Docs",
    "keywords": "OnConnected Method Namespace : Riptide.Transports.Udp Assembly : RiptideNetworking.dll OnConnected(Connection) Invokes the Connected event. protected virtual void OnConnected(Connection connection) Parameters Connection connection The successfully established connection."
  },
  "api/Riptide.Transports.Udp.UdpServer.OnDataReceived.html": {
    "href": "api/Riptide.Transports.Udp.UdpServer.OnDataReceived.html",
    "title": "OnDataReceived Method | Riptide Docs",
    "keywords": "OnDataReceived Method Namespace : Riptide.Transports.Udp Assembly : RiptideNetworking.dll OnDataReceived(Byte[], Int32, IPEndPoint) Handles received data. protected override void OnDataReceived(byte[] dataBuffer, int amount, IPEndPoint fromEndPoint) Parameters Byte [] dataBuffer A byte array containing the received data. Int32 amount The number of bytes in dataBuffer used by the received data. IPEndPoint fromEndPoint The endpoint from which the data was received. Overrides UdpPeer.OnDataReceived(Byte[], Int32, IPEndPoint)"
  },
  "api/Riptide.Transports.Udp.UdpServer.Port.html": {
    "href": "api/Riptide.Transports.Udp.UdpServer.Port.html",
    "title": "Port Property | Riptide Docs",
    "keywords": "Port Property Namespace : Riptide.Transports.Udp Assembly : RiptideNetworking.dll Port The local port that the server is running on. public ushort Port { get; } Property Value UInt16 Implements IServer.Port"
  },
  "api/Riptide.Transports.Udp.UdpServer.Shutdown.html": {
    "href": "api/Riptide.Transports.Udp.UdpServer.Shutdown.html",
    "title": "Shutdown Method | Riptide Docs",
    "keywords": "Shutdown Method Namespace : Riptide.Transports.Udp Assembly : RiptideNetworking.dll Shutdown() Closes all existing connections and stops listening for new connections. public void Shutdown() Implements IServer.Shutdown()"
  },
  "api/Riptide.Transports.Udp.UdpServer.Start.html": {
    "href": "api/Riptide.Transports.Udp.UdpServer.Start.html",
    "title": "Start Method | Riptide Docs",
    "keywords": "Start Method Namespace : Riptide.Transports.Udp Assembly : RiptideNetworking.dll Start(UInt16) Starts the transport and begins listening for incoming connections. public void Start(ushort port) Parameters UInt16 port The local port on which to listen for connections. Implements IServer.Start(UInt16)"
  },
  "api/Riptide.Utils.Converter.FromDouble.html": {
    "href": "api/Riptide.Utils.Converter.FromDouble.html",
    "title": "FromDouble Method | Riptide Docs",
    "keywords": "FromDouble Method Namespace : Riptide.Utils Assembly : RiptideNetworking.dll FromDouble(Double, Byte[], Int32) Converts a given to bytes and writes them into the given array. public static void FromDouble(double value, byte[] array, int startIndex) Parameters Double value The to convert. Byte [] array The array to write the bytes into. Int32 startIndex The position in the array at which to write the bytes."
  },
  "api/Riptide.Utils.Converter.FromFloat.html": {
    "href": "api/Riptide.Utils.Converter.FromFloat.html",
    "title": "FromFloat Method | Riptide Docs",
    "keywords": "FromFloat Method Namespace : Riptide.Utils Assembly : RiptideNetworking.dll FromFloat(Single, Byte[], Int32) Converts a given to bytes and writes them into the given array. public static void FromFloat(float value, byte[] array, int startIndex) Parameters Single value The to convert. Byte [] array The array to write the bytes into. Int32 startIndex The position in the array at which to write the bytes."
  },
  "api/Riptide.Utils.Converter.FromInt.html": {
    "href": "api/Riptide.Utils.Converter.FromInt.html",
    "title": "FromInt Method | Riptide Docs",
    "keywords": "FromInt Method Namespace : Riptide.Utils Assembly : RiptideNetworking.dll FromInt(Int32, Byte[], Int32) Converts a given to bytes and writes them into the given array. public static void FromInt(int value, byte[] array, int startIndex) Parameters Int32 value The to convert. Byte [] array The array to write the bytes into. Int32 startIndex The position in the array at which to write the bytes."
  },
  "api/Riptide.Utils.Converter.FromLong.html": {
    "href": "api/Riptide.Utils.Converter.FromLong.html",
    "title": "FromLong Method | Riptide Docs",
    "keywords": "FromLong Method Namespace : Riptide.Utils Assembly : RiptideNetworking.dll FromLong(Int64, Byte[], Int32) Converts a given to bytes and writes them into the given array. public static void FromLong(long value, byte[] array, int startIndex) Parameters Int64 value The to convert. Byte [] array The array to write the bytes into. Int32 startIndex The position in the array at which to write the bytes."
  },
  "api/Riptide.Utils.Converter.FromShort.html": {
    "href": "api/Riptide.Utils.Converter.FromShort.html",
    "title": "FromShort Method | Riptide Docs",
    "keywords": "FromShort Method Namespace : Riptide.Utils Assembly : RiptideNetworking.dll FromShort(Int16, Byte[], Int32) Converts a given to bytes and writes them into the given array. public static void FromShort(short value, byte[] array, int startIndex) Parameters Int16 value The to convert. Byte [] array The array to write the bytes into. Int32 startIndex The position in the array at which to write the bytes."
  },
  "api/Riptide.Utils.Converter.FromUInt.html": {
    "href": "api/Riptide.Utils.Converter.FromUInt.html",
    "title": "FromUInt Method | Riptide Docs",
    "keywords": "FromUInt Method Namespace : Riptide.Utils Assembly : RiptideNetworking.dll FromUInt(UInt32, Byte[], Int32) Converts a given to bytes and writes them into the given array. public static void FromUInt(uint value, byte[] array, int startIndex) Parameters UInt32 value The to convert. Byte [] array The array to write the bytes into. Int32 startIndex The position in the array at which to write the bytes."
  },
  "api/Riptide.Utils.Converter.FromULong.html": {
    "href": "api/Riptide.Utils.Converter.FromULong.html",
    "title": "FromULong Method | Riptide Docs",
    "keywords": "FromULong Method Namespace : Riptide.Utils Assembly : RiptideNetworking.dll FromULong(UInt64, Byte[], Int32) Converts a given to bytes and writes them into the given array. public static void FromULong(ulong value, byte[] array, int startIndex) Parameters UInt64 value The to convert. Byte [] array The array to write the bytes into. Int32 startIndex The position in the array at which to write the bytes."
  },
  "api/Riptide.Utils.Converter.FromUShort.html": {
    "href": "api/Riptide.Utils.Converter.FromUShort.html",
    "title": "FromUShort Method | Riptide Docs",
    "keywords": "FromUShort Method Namespace : Riptide.Utils Assembly : RiptideNetworking.dll FromUShort(UInt16, Byte[], Int32) Converts a given to bytes and writes them into the given array. public static void FromUShort(ushort value, byte[] array, int startIndex) Parameters UInt16 value The to convert. Byte [] array The array to write the bytes into. Int32 startIndex The position in the array at which to write the bytes."
  },
  "api/Riptide.Utils.Converter.html": {
    "href": "api/Riptide.Utils.Converter.html",
    "title": "Converter Class | Riptide Docs",
    "keywords": "Converter Class Namespace : Riptide.Utils Assembly : RiptideNetworking.dll Provides functionality for converting bytes to various value types and vice versa. public class Converter : object Inheritance Object Converter Methods FromDouble(Double, Byte[], Int32) Converts a given to bytes and writes them into the given array. FromFloat(Single, Byte[], Int32) Converts a given to bytes and writes them into the given array. FromInt(Int32, Byte[], Int32) Converts a given to bytes and writes them into the given array. FromLong(Int64, Byte[], Int32) Converts a given to bytes and writes them into the given array. FromShort(Int16, Byte[], Int32) Converts a given to bytes and writes them into the given array. FromUInt(UInt32, Byte[], Int32) Converts a given to bytes and writes them into the given array. FromULong(UInt64, Byte[], Int32) Converts a given to bytes and writes them into the given array. FromUShort(UInt16, Byte[], Int32) Converts a given to bytes and writes them into the given array. ToDouble(Byte[], Int32) Converts the 8 bytes in the array at startIndex to a . ToFloat(Byte[], Int32) Converts the 4 bytes in the array at startIndex to a . ToInt(Byte[], Int32) Converts the 4 bytes in the array at startIndex to a . ToLong(Byte[], Int32) Converts the 8 bytes in the array at startIndex to a . ToShort(Byte[], Int32) Converts the 2 bytes in the array at startIndex to a . ToUInt(Byte[], Int32) Converts the 4 bytes in the array at startIndex to a . ToULong(Byte[], Int32) Converts the 8 bytes in the array at startIndex to a . ToUShort(Byte[], Int32) Converts the 2 bytes in the array at startIndex to a ."
  },
  "api/Riptide.Utils.Converter.ToDouble.html": {
    "href": "api/Riptide.Utils.Converter.ToDouble.html",
    "title": "ToDouble Method | Riptide Docs",
    "keywords": "ToDouble Method Namespace : Riptide.Utils Assembly : RiptideNetworking.dll ToDouble(Byte[], Int32) Converts the 8 bytes in the array at startIndex to a . public static double ToDouble(byte[] array, int startIndex) Parameters Byte [] array The array to read the bytes from. Int32 startIndex The position in the array at which to read the bytes. Returns Double The converted ."
  },
  "api/Riptide.Utils.Converter.ToFloat.html": {
    "href": "api/Riptide.Utils.Converter.ToFloat.html",
    "title": "ToFloat Method | Riptide Docs",
    "keywords": "ToFloat Method Namespace : Riptide.Utils Assembly : RiptideNetworking.dll ToFloat(Byte[], Int32) Converts the 4 bytes in the array at startIndex to a . public static float ToFloat(byte[] array, int startIndex) Parameters Byte [] array The array to read the bytes from. Int32 startIndex The position in the array at which to read the bytes. Returns Single The converted ."
  },
  "api/Riptide.Utils.Converter.ToInt.html": {
    "href": "api/Riptide.Utils.Converter.ToInt.html",
    "title": "ToInt Method | Riptide Docs",
    "keywords": "ToInt Method Namespace : Riptide.Utils Assembly : RiptideNetworking.dll ToInt(Byte[], Int32) Converts the 4 bytes in the array at startIndex to a . public static int ToInt(byte[] array, int startIndex) Parameters Byte [] array The array to read the bytes from. Int32 startIndex The position in the array at which to read the bytes. Returns Int32 The converted ."
  },
  "api/Riptide.Utils.Converter.ToLong.html": {
    "href": "api/Riptide.Utils.Converter.ToLong.html",
    "title": "ToLong Method | Riptide Docs",
    "keywords": "ToLong Method Namespace : Riptide.Utils Assembly : RiptideNetworking.dll ToLong(Byte[], Int32) Converts the 8 bytes in the array at startIndex to a . public static long ToLong(byte[] array, int startIndex) Parameters Byte [] array The array to read the bytes from. Int32 startIndex The position in the array at which to read the bytes. Returns Int64 The converted ."
  },
  "api/Riptide.Utils.Converter.ToShort.html": {
    "href": "api/Riptide.Utils.Converter.ToShort.html",
    "title": "ToShort Method | Riptide Docs",
    "keywords": "ToShort Method Namespace : Riptide.Utils Assembly : RiptideNetworking.dll ToShort(Byte[], Int32) Converts the 2 bytes in the array at startIndex to a . public static short ToShort(byte[] array, int startIndex) Parameters Byte [] array The array to read the bytes from. Int32 startIndex The position in the array at which to read the bytes. Returns Int16 The converted ."
  },
  "api/Riptide.Utils.Converter.ToUInt.html": {
    "href": "api/Riptide.Utils.Converter.ToUInt.html",
    "title": "ToUInt Method | Riptide Docs",
    "keywords": "ToUInt Method Namespace : Riptide.Utils Assembly : RiptideNetworking.dll ToUInt(Byte[], Int32) Converts the 4 bytes in the array at startIndex to a . public static uint ToUInt(byte[] array, int startIndex) Parameters Byte [] array The array to read the bytes from. Int32 startIndex The position in the array at which to read the bytes. Returns UInt32 The converted ."
  },
  "api/Riptide.Utils.Converter.ToULong.html": {
    "href": "api/Riptide.Utils.Converter.ToULong.html",
    "title": "ToULong Method | Riptide Docs",
    "keywords": "ToULong Method Namespace : Riptide.Utils Assembly : RiptideNetworking.dll ToULong(Byte[], Int32) Converts the 8 bytes in the array at startIndex to a . public static ulong ToULong(byte[] array, int startIndex) Parameters Byte [] array The array to read the bytes from. Int32 startIndex The position in the array at which to read the bytes. Returns UInt64 The converted ."
  },
  "api/Riptide.Utils.Converter.ToUShort.html": {
    "href": "api/Riptide.Utils.Converter.ToUShort.html",
    "title": "ToUShort Method | Riptide Docs",
    "keywords": "ToUShort Method Namespace : Riptide.Utils Assembly : RiptideNetworking.dll ToUShort(Byte[], Int32) Converts the 2 bytes in the array at startIndex to a . public static ushort ToUShort(byte[] array, int startIndex) Parameters Byte [] array The array to read the bytes from. Int32 startIndex The position in the array at which to read the bytes. Returns UInt16 The converted ."
  },
  "api/Riptide.Utils.Extensions.html": {
    "href": "api/Riptide.Utils.Extensions.html",
    "title": "Extensions Class | Riptide Docs",
    "keywords": "Extensions Class Namespace : Riptide.Utils Assembly : RiptideNetworking.dll Contains extension methods for various classes. public static class Extensions : object Inheritance Object Extensions Methods ToStringBasedOnIPFormat(IPEndPoint) Takes the 's IP address and port number and converts it to a string, accounting for whether the address is an IPv4 or IPv6 address."
  },
  "api/Riptide.Utils.Extensions.ToStringBasedOnIPFormat.html": {
    "href": "api/Riptide.Utils.Extensions.ToStringBasedOnIPFormat.html",
    "title": "ToStringBasedOnIPFormat Method | Riptide Docs",
    "keywords": "ToStringBasedOnIPFormat Method Namespace : Riptide.Utils Assembly : RiptideNetworking.dll ToStringBasedOnIPFormat(IPEndPoint) Takes the 's IP address and port number and converts it to a string, accounting for whether the address is an IPv4 or IPv6 address. public static string ToStringBasedOnIPFormat(this IPEndPoint endPoint) Parameters IPEndPoint endPoint Returns String A string containing the IP address and port number of the endpoint."
  },
  "api/Riptide.Utils.html": {
    "href": "api/Riptide.Utils.html",
    "title": "Riptide.Utils Namespace | Riptide Docs",
    "keywords": "Riptide.Utils Namespace Classes Converter Provides functionality for converting bytes to various value types and vice versa. Extensions Contains extension methods for various classes. RiptideLogger Provides functionality for logging messages. Enums LogType Defines log message types. Delegates RiptideLogger.LogMethod Encapsulates a method used to log messages."
  },
  "api/Riptide.Utils.LogType.html": {
    "href": "api/Riptide.Utils.LogType.html",
    "title": "LogType Enum | Riptide Docs",
    "keywords": "LogType Enum Namespace : Riptide.Utils Assembly : RiptideNetworking.dll Defines log message types. public enum LogType : int Fields Debug Logs that are used for investigation during development. Error Logs that highlight problematic events in the application flow which will cause unexpected behavior if not planned for. Info Logs that provide general information about application flow. Warning Logs that highlight abnormal or unexpected events in the application flow."
  },
  "api/Riptide.Utils.RiptideLogger.DisableLoggingFor.html": {
    "href": "api/Riptide.Utils.RiptideLogger.DisableLoggingFor.html",
    "title": "DisableLoggingFor Method | Riptide Docs",
    "keywords": "DisableLoggingFor Method Namespace : Riptide.Utils Assembly : RiptideNetworking.dll DisableLoggingFor(LogType) Disables logging for messages of the given LogType . public static void DisableLoggingFor(LogType logType) Parameters LogType logType The type of message to enable logging for."
  },
  "api/Riptide.Utils.RiptideLogger.EnableLoggingFor.html": {
    "href": "api/Riptide.Utils.RiptideLogger.EnableLoggingFor.html",
    "title": "EnableLoggingFor Method | Riptide Docs",
    "keywords": "EnableLoggingFor Method Namespace : Riptide.Utils Assembly : RiptideNetworking.dll EnableLoggingFor(LogType, RiptideLogger.LogMethod) Enables logging for messages of the given LogType . public static void EnableLoggingFor(LogType logType, RiptideLogger.LogMethod logMethod) Parameters LogType logType The type of message to enable logging for. RiptideLogger.LogMethod logMethod The method to use when logging this type of message."
  },
  "api/Riptide.Utils.RiptideLogger.html": {
    "href": "api/Riptide.Utils.RiptideLogger.html",
    "title": "RiptideLogger Class | Riptide Docs",
    "keywords": "RiptideLogger Class Namespace : Riptide.Utils Assembly : RiptideNetworking.dll Provides functionality for logging messages. public class RiptideLogger : object Inheritance Object RiptideLogger Properties IsDebugLoggingEnabled Whether or not Debug messages will be logged. IsErrorLoggingEnabled Whether or not Error messages will be logged. IsInfoLoggingEnabled Whether or not Info messages will be logged. IsWarningLoggingEnabled Whether or not Warning messages will be logged. Methods DisableLoggingFor(LogType) Disables logging for messages of the given LogType . EnableLoggingFor(LogType, RiptideLogger.LogMethod) Enables logging for messages of the given LogType . Initialize(RiptideLogger.LogMethod, RiptideLogger.LogMethod, RiptideLogger.LogMethod, RiptideLogger.LogMethod, Boolean, String) Initializes RiptideLogger with the supplied log methods. Initialize(RiptideLogger.LogMethod, Boolean, String) Initializes RiptideLogger with all log types enabled. Log(LogType, String) Logs a message. Log(LogType, String, String) Logs a message."
  },
  "api/Riptide.Utils.RiptideLogger.Initialize.html": {
    "href": "api/Riptide.Utils.RiptideLogger.Initialize.html",
    "title": "Initialize Method | Riptide Docs",
    "keywords": "Initialize Method Namespace : Riptide.Utils Assembly : RiptideNetworking.dll Overloads Initialize(RiptideLogger.LogMethod, Boolean, String) Initializes RiptideLogger with all log types enabled. Initialize(RiptideLogger.LogMethod, RiptideLogger.LogMethod, RiptideLogger.LogMethod, RiptideLogger.LogMethod, Boolean, String) Initializes RiptideLogger with the supplied log methods. Initialize(RiptideLogger.LogMethod, Boolean, String) Initializes RiptideLogger with all log types enabled. public static void Initialize(RiptideLogger.LogMethod logMethod, bool includeTimestamps, string timestampFormat = \"HH:mm:ss\") Parameters RiptideLogger.LogMethod logMethod The method to use when logging all types of messages. Boolean includeTimestamps Whether or not to include timestamps when logging messages. String timestampFormat The format to use for timestamps. Initialize(RiptideLogger.LogMethod, RiptideLogger.LogMethod, RiptideLogger.LogMethod, RiptideLogger.LogMethod, Boolean, String) Initializes RiptideLogger with the supplied log methods. public static void Initialize(RiptideLogger.LogMethod debugMethod, RiptideLogger.LogMethod infoMethod, RiptideLogger.LogMethod warningMethod, RiptideLogger.LogMethod errorMethod, bool includeTimestamps, string timestampFormat = \"HH:mm:ss\") Parameters RiptideLogger.LogMethod debugMethod The method to use when logging debug messages. Set to null to disable debug logs. RiptideLogger.LogMethod infoMethod The method to use when logging info messages. Set to null to disable info logs. RiptideLogger.LogMethod warningMethod The method to use when logging warning messages. Set to null to disable warning logs. RiptideLogger.LogMethod errorMethod The method to use when logging error messages. Set to null to disable error logs. Boolean includeTimestamps Whether or not to include timestamps when logging messages. String timestampFormat The format to use for timestamps."
  },
  "api/Riptide.Utils.RiptideLogger.IsDebugLoggingEnabled.html": {
    "href": "api/Riptide.Utils.RiptideLogger.IsDebugLoggingEnabled.html",
    "title": "IsDebugLoggingEnabled Property | Riptide Docs",
    "keywords": "IsDebugLoggingEnabled Property Namespace : Riptide.Utils Assembly : RiptideNetworking.dll IsDebugLoggingEnabled Whether or not Debug messages will be logged. public static bool IsDebugLoggingEnabled { get; } Property Value Boolean"
  },
  "api/Riptide.Utils.RiptideLogger.IsErrorLoggingEnabled.html": {
    "href": "api/Riptide.Utils.RiptideLogger.IsErrorLoggingEnabled.html",
    "title": "IsErrorLoggingEnabled Property | Riptide Docs",
    "keywords": "IsErrorLoggingEnabled Property Namespace : Riptide.Utils Assembly : RiptideNetworking.dll IsErrorLoggingEnabled Whether or not Error messages will be logged. public static bool IsErrorLoggingEnabled { get; } Property Value Boolean"
  },
  "api/Riptide.Utils.RiptideLogger.IsInfoLoggingEnabled.html": {
    "href": "api/Riptide.Utils.RiptideLogger.IsInfoLoggingEnabled.html",
    "title": "IsInfoLoggingEnabled Property | Riptide Docs",
    "keywords": "IsInfoLoggingEnabled Property Namespace : Riptide.Utils Assembly : RiptideNetworking.dll IsInfoLoggingEnabled Whether or not Info messages will be logged. public static bool IsInfoLoggingEnabled { get; } Property Value Boolean"
  },
  "api/Riptide.Utils.RiptideLogger.IsWarningLoggingEnabled.html": {
    "href": "api/Riptide.Utils.RiptideLogger.IsWarningLoggingEnabled.html",
    "title": "IsWarningLoggingEnabled Property | Riptide Docs",
    "keywords": "IsWarningLoggingEnabled Property Namespace : Riptide.Utils Assembly : RiptideNetworking.dll IsWarningLoggingEnabled Whether or not Warning messages will be logged. public static bool IsWarningLoggingEnabled { get; } Property Value Boolean"
  },
  "api/Riptide.Utils.RiptideLogger.Log.html": {
    "href": "api/Riptide.Utils.RiptideLogger.Log.html",
    "title": "Log Method | Riptide Docs",
    "keywords": "Log Method Namespace : Riptide.Utils Assembly : RiptideNetworking.dll Overloads Log(LogType, String) Logs a message. Log(LogType, String, String) Logs a message. Log(LogType, String) Logs a message. public static void Log(LogType logType, string message) Parameters LogType logType The type of log message that is being logged. String message The message to log. Log(LogType, String, String) Logs a message. public static void Log(LogType logType, string logName, string message) Parameters LogType logType The type of log message that is being logged. String logName Who is logging this message. String message The message to log."
  },
  "api/Riptide.Utils.RiptideLogger.LogMethod.html": {
    "href": "api/Riptide.Utils.RiptideLogger.LogMethod.html",
    "title": "RiptideLogger.LogMethod Delegate | Riptide Docs",
    "keywords": "RiptideLogger.LogMethod Delegate Namespace : Riptide.Utils Assembly : RiptideNetworking.dll Encapsulates a method used to log messages. public delegate void LogMethod(string log); Parameters String log The message to log."
  },
  "index.html": {
    "href": "index.html",
    "title": "| Riptide Docs",
    "keywords": ""
  },
  "manual/overview/about-riptide.html": {
    "href": "manual/overview/about-riptide.html",
    "title": "About Riptide | Riptide Docs",
    "keywords": "About Riptide Riptide Networking is a lightweight C# networking library primarily designed for use in multiplayer games. It can be used in Unity as well as in other .NET environments such as console applications. It provides functionality for establishing connections and sending data back and forth, leaving it up to you to decide what data you want to send and when. This is ideal if you like to be in control of your code and know what's going on under the hood. Riptide is 100% free to use under the MIT license and its development is only funded by donations ."
  },
  "manual/overview/faq.html": {
    "href": "manual/overview/faq.html",
    "title": "FAQ | Riptide Docs",
    "keywords": "FAQ Below are some frequently asked questions as well as common issues which you may face when getting started with Riptide. If you can't find your question or the provided answer/solution is insufficient, feel free to join the Discord server and ask there! What's the difference between Riptide and other networking solutions? Riptide is a relatively low level networking solution—it gives you the tools to manage connections and send data, while leaving the rest up to you. This means you have full control over what happens, how it happens, and when it happens, but it also means you have to do more yourself. That might sound scary if you're just getting started with multiplayer game development, but it can actually be hugely beneficial for your learning process. This is in stark contrast to higher-level, more abstracted solutions, which provide more features and do more for you. However, this typically means you have less control over what your code is doing, and it may make learning how multiplayer games actually work more difficult because you're not exposed to what's going on under the hood. Whether you should use an abstracted, high-level solution or something lower-level like Riptide depends on what your needs and goals are. Do you want to see and be in charge of what's going on under the hood? Riptide is likely better for you. Do you just want to quickly build a multiplayer game without having to decide what happens and when? Then you may want to consider using something higher-level. Does Riptide cost money to use? No. Riptide is completely free to use, and it imposes no arbitrary concurrent user limits. You can connect as many players as you like, as long as the hardware your server is running on can handle it and you have sufficient available bandwidth. However, if you'd like to financially support Riptide's development and get early access to new features, you can do so through GitHub Sponsors . Can I use Riptide outside of Unity? Yes! Riptide is not dependent on Unity in any way, meaning you can use it pretty much anywhere you can run C# code. This includes .NET applications such as console apps as well as other engines like Flax Engine and Godot. What platforms can I use Riptide on? This varies depending on which low level transport you're using. Riptide's default transport uses UDP sockets and works on PC, Mac, Linux, iOS and Android. VR and consoles have not been officially tested to determine whether Riptide works on them, and at this point in time there is no web transport, meaning Riptide does not work in browser-based games. If you end up using Riptide's Steam transport , that obviously only works on platforms supported by Steam. How many players does Riptide support? This heavily depends on how much data your game needs to send per second per player and how that compares to the hardware and bandwidth available to your server. A turn-based card game would likely be able to support hundreds of times as many players as a fast-paced shooter while using the same resources. A big part of developing multiplayer games is choosing what data to send and when to send it. Riptide leaves that part up to you, so you're the one making those much more performance-relevant decisions of what and when . As a result, Riptide itself is highly unlikely to be your performance bottleneck. Does Riptide support player-hosted and lobby-based games? Yes! Riptide gives you the tools to manage connections and send data, but doesn't really impose any restrictions on how you do that. You can set up a dedicated server with full authority, a relay server which just passes on data it receives, a client that also acts as the host (server), or pretty much anything inbetween. The only architecture that would require some tweaks to Riptide's source is true peer-to-peer, where all clients in a lobby are connected to all other clients in the same lobby. Why am I not receiving any messages? Make sure that you're calling the server's and/or client's Update() method regularly. Why am I getting a warning about no server-side/client-side method handler being found? If you're getting this warning, make sure you actually have a handler method set up for the message ID mentioned in the warning. If that doesn't help, chances are your handler method has the wrong parameters for what you intended it to be used for. Remember, server-side handler methods (which handle messages coming from clients) should have two parameters—a ushort and a Message instance. Client-side handler methods (which handles messages coming from a server) should have only one parameter—a Message instance. Do I have to use Debug.Log() with Riptide's log system? No. You can use whatever log method you like, including Console.WriteLine() , other engine-specific log methods, and your own custom log methods. All you have to do is pass your chosen log method to RiptideLogger 's Initialize() method."
  },
  "manual/overview/getting-started.html": {
    "href": "manual/overview/getting-started.html",
    "title": "Getting Started | Riptide Docs",
    "keywords": "Getting Started For a more complete tutorial on how to set up Riptide in your project, see this video . A lot of things were renamed in v2.0.0, which makes following along with the tutorial more difficult, so it's recommended to use v1.1.0 when watching the video and to use the upgrade guides to update your project afterwards. Tip The video tutorial uses two separate projects (one for the server and one for the client). This makes the separation between server and client very clear, which can be helpful when first getting into multiplayer game development. However, it's not ideal—especially for larger projects—due to the fact that it results in duplicated code and assets. This can be mitigated somewhat by setting up a local package for shared code, but combining server and client in the same project is just as doable and arguably easier to maintain. Initial Setup First of all, we need to tell Riptide how we want information to be logged so that we can see what our code is doing. We can do this using the RiptideLogger.Initialize() method, which should be called before we do anything else with Riptide. If you're using separate projects for the server and the client, make sure to call it in both. RiptideLogger.Initialize(Debug.Log, Debug.Log, Debug.LogWarning, Debug.LogError, false); Obviously this is using Unity's logging methods, so if you're not using Unity for your project you'll need to replace the four log methods with Console.WriteLine or your engine's equivalent. Important This article explains the basics and includes various code snippets, but if you'd like to see these snippets in the context of a working demo, take a look at the NetworkManager classes in the dedicated server demo 's server and client projects. Starting a Server To start a server, we need to create a new Server instance and then call its Start() method, which takes in the port we want it to run on and the maximum number of clients we want to allow to be connected at any given time. You'll likely want to run this code as soon as your server application starts up. Server server = new Server(); server.Start(7777, 10); In order for the server to be able to accept connections and process messages, we need to call its Update() method on a regular basis. In Unity, this can be done using the provided FixedUpdate method . private void FixedUpdate() { server.Update(); } Connecting a Client The process of connecting a client is quite similar. First we create a new Client instance and then we call its Connect() method, which expects a host address as the parameter. Riptide's default transport requires host addresses to consist of an IP address and a port number, separated by a : . Since we're running the server and the client on the same computer right now, we'll use 127.0.0.1 (also known as localhost ) as the IP. Client client = new Client(); client.Connect(\"127.0.0.1:7777\"); Tip Connecting to 127.0.0.1 will only work if your server and client applications are running on the same computer. To connect from a computer on a different network you need to connect to your host computer's public IP address instead, and you'll need to portforward to allow traffic from your clients to reach your server. Finally, we need to call the client's Update() method on a regular basis, just like we did with the server. private void FixedUpdate() { client.Update(); } At this point, if you run the server and the client you should see log messages informing you that the server started and the client connected! Hooking Into Events Riptide's Server and Client classes both have several events to allow you to run your own code when various things happen. For example, you'll likely want your server to spawn a player object when a client connects and destroy it again when they disconnect. You can do this by subscribing your spawn and despawn methods to the ClientConnected and ClientDisconnected events. The Client class's most useful events are probably the ConnectionFailed and Disconnected events, which come in handy for things like returning the player to the main menu when their connection attempt fails or they're disconnected. For a complete list of available events, check out the server events and client events . Sending Data In order to send data over the network, it has to be converted to bytes first—you can't just send a string or an int directly. Riptide provides the Message class to make this process really easy. Creating a Message The first step of sending a message is to get an instance of the class. This is done using the Create() method, which requires the message's send mode and an ID as parameters. Message message = Message.Create(MessageSendMode.Unreliable, 1); The MessageSendMode can be set to Reliable or Unreliable . Due to how the internet works, not every packet a computer sends will arrive at its destination. Using the unreliable send mode means Riptide will send the message without doing anything extra to ensure delivery, which may result in some of these messages being lost. Using the reliable send mode will make Riptide track whether or not the message has been successfully delivered, and it will continue to resend it until that is the case. Tip Your first instinct may be to send everything reliably, but at least in fast-paced games, the opposite is normally true—most information is sent unreliably. Consider the fact that even in an extremely basic setup where you simply send a player's position every tick, a newer, more up-to-date position message will have already been sent by the time a previous one could be detected as lost and be resent, and there's no point in resending outdated information. Message IDs are used to identify what type of message you're sending, which allows the receiving end to determine how to properly handle it. In the example above, we set the message ID to 1 (in practice you'd probably want to use an enum for message IDs instead of hard-coding the number). Adding Data to the Message To add data to our message, we can simply call the Add method for the type we want to add. For example: message.AddInt(365); The Message class has built-in methods for all primitive data types ( byte , bool , int / uint , float , etc.), string s, and structs which implement IMessageSerializable , as well as arrays of all these types. Any other types you may want to send should consist of combinations of these supported types. For example, a Vector3 consists of three float s (one for each component), so to add one to your message, you would simply call AddFloat() three times, passing in the vector's three different components. Alternatively, you could write a custom extension method to make this easier, just like the ones included in the Unity package . Sending the Message Once you've added the data you want to include in your message, it's time to send it. Clients have only one Send() method, while servers have Send() and SendToAll() (which has an overload as well). client.Send(message); // Sends the message to the server server.Send(message, <toClientId>); // Sends the message to a specific client server.SendToAll(message); // Sends the message to all connected clients server.SendToAll(message, <toClientId>); // Sends the message to all connected clients except the specified one Make sure to replace <toClientId> with the ID of the client you want to send the message to, or who you don't want to sent the message to if you're using the SendToAll() method. Handling the Message Messages are handled in \"message handler\" methods. These are just regular static methods with a [ MessageHandler ] attribute attached. [MessageHandler(1)] private static void HandleSomeMessageFromServer(Message message) { int someInt = message.GetInt(); // Do stuff with the retrieved data here } Notice that we've passed 1 to the [MessageHandler] attribute. This tells Riptide that this method is meant to handle messages with an ID of 1 , which is what we set our message's ID to in the creating a message part of this article. Important Whether a message handler method handles messages received from a server or a client is determined by its parameters. In order for a handler method to handle messages from clients, it must have two parameters (a ushort and a Message instance). In order for a handler method to handle messages from a server, it must have only one parameter (a Message instance). The code snippet above shows a client-side message handler, which will only handle messages received from the server. Caution Data MUST be retrieved in the exact order in which it was added to the message! If you added an int , followed by a float and then another int , you must retrieve an int and a float before you can retrieve the second int . Mixing up the order will result in your retrieved values being completely different from what you added to the message."
  },
  "manual/overview/installation.html": {
    "href": "manual/overview/installation.html",
    "title": "Installation | Riptide Docs",
    "keywords": "Installation There are a number of ways to install Riptide, depending on what you're working on and which tools you're using. Unity Option 1: Unity Package Manager Note Installing Riptide via Unity's Package Manager requires you to have git installed on your computer! In your Unity project, open the Package Manager (Window > Package Manager). Click the + (plus) button in the top left corner of the window. Select the Add package from git URL... option. Enter the following URL: https://github.com/RiptideNetworking/Riptide.git?path=/Packages/Core#2.0.0 . To install a version other than v2.0.0, replace the 2.0.0 after the # with your chosen version number. Click 'Add' and wait for Riptide to be installed. If you have errors in your project after installation or intellisense isn't working for Riptide's classes, go to Edit > Preferences > External Tools, make sure the box next to Git packages is checked, and then click Regenerate project files . Tip If you'd like to use the latest in-development version of Riptide (from the dev branch) instead of an official release, enter https://github.com/RiptideNetworking/Riptide.git?path=/Packages/Core#unity-package in the git URL field. Keep in mind that doing this will get you the latest state of the repository, which may include bugs and incomplete features! Option 2: DLL File If you prefer not to use Unity's Package Manager or that option doesn't work for you, you can also install Riptide by manually adding the compiled dll file to your project. Either download the RiptideNetworking.dll file from the latest release (or choose a previous version ), or clone/download the repository and build the solution yourself. Drop the RiptideNetworking.dll file anywhere into your Unity project's Assets folder. Optional: add the MessageExtensions class and add it to your project. It's included in the Unity package but isn't part of the dll file. Tip It's highly recommended that you also download the RiptideNetworking.xml file and drop that into your project alongside the dll file. This will allow your IDE's intellisense to display Riptide's API documentation. .NET Projects The following installation steps are for Visual Studio users and may differ if you use a different IDE. Option 1: DLL File Either download the RiptideNetworking.dll file from the latest release (or choose a previous version ), or clone/download the repository and build the solution yourself. Right click your project in the Solution Explorer. Select Add and then select the Project Reference... option. Click Browse in the left sidebar of the window. Click the Browse button in the bottom right corner of the window. Navigate to the folder where you saved the RiptideNetworking.dll file and add it. Click OK . Option 2: Direct Project Reference Either download the RiptideNetworking.dll file from the latest release (or choose a previous version ), or clone/download the repository and build the solution yourself. Right click your solution in the Solution Explorer. Select Add and then select the Existing Project... option. Navigate to the cloned/downloaded Riptide repository and open the RiptideNetworking.csproj file. Right click your project in the Solution Explorer. Select Add and then select the Project Reference... option. In the Projects tab (should be selected by default in the left sidebar), check the box next to RiptideNetworking . Click OK ."
  },
  "manual/updates/guides/updating-to-v2.html": {
    "href": "manual/updates/guides/updating-to-v2.html",
    "title": "Coming Soon! | Riptide Docs",
    "keywords": "Coming Soon!"
  },
  "manual/updates/release-notes/v2.0.0.html": {
    "href": "manual/updates/release-notes/v2.0.0.html",
    "title": "Coming Soon! | Riptide Docs",
    "keywords": "Coming Soon!"
  }
}